var documenterSearchIndex = {"docs":
[{"location":"gallery/scripts_agu/bezier/#Bezier","page":"Bezier","title":"Bezier","text":"","category":"section"},{"location":"gallery/scripts_agu/bezier/","page":"Bezier","title":"Bezier","text":"Plot a Bezier curve","category":"page"},{"location":"gallery/scripts_agu/bezier/","page":"Bezier","title":"Bezier","text":"x = [0, 1, 2, 3, 2];  y = [0, 1, 1, 0.5, 0.25];\nlines(x,y, limits=(-1,4,-0.5,2.0), scale=3.0, lw=1, markerfacecolor=:red,\n      size=0.5, bezier=true, title=\"Bezier curve\", show=true)","category":"page"},{"location":"gallery/scripts_agu/bezier/","page":"Bezier","title":"Bezier","text":"<img src=\"../figs/bezier.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/contourf/contourf/#Contourf-examples","page":"Contourf","title":"Contourf examples","text":"","category":"section"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"GMT does not actually have a contourf module like Matlab for example, but we can obtain the same result using grdview, grdcontour and pscontour. However, to make things the Julia wrapper wrapped up a module called contourf that makes it really easy to use. To show how it works let's start by creating an example grid and a CPT.","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"G = GMT.peaks();","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"C = makecpt(T=(-7,9,2));","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"Now if we pass those two to the contourf module we get an annotated plot where the annotations come from the color CPT.","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"contourf(G, C, show=true)","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"<img src=\"../contf_fig1.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"If we want to just draw some contours and not annotate them, we pass an array with the contours to be drawn.","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"contourf(G, C, contour=[-2, 0, 2, 5], show=true)","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"<img src=\"../contf_fig2.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"gallery/contourf/contourf/#What-if-one-has-an-*x,y,z*-file-instead-of-a-grid?","page":"Contourf","title":"What if one has an x,y,z file instead of a grid?","text":"","category":"section"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"That is also simple, let's simulate it with synthetic data.","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"d = [0 2 5; 1 4 5; 2 0.5 5; 3 3 9; 4 4.5 5; 4.2 1.2 5; 6 3 1; 8 1 5; 9 4.5 5];","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"contourf(d, limits=(-0.5,9.5,0,5), pen=0.25, labels=(line=(:min,:max),), show=1)","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"<img src=\"../contf_fig3.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"In the above since we did not specify a CPT the program picked the GMT's default one. But if we want use another one it's only a question of creating and passed it in.","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"cpt = makecpt(range=(0,10,1), cmap=:batlow);\ncontourf(d, contours=cpt, limits=(-0.5,9.5,0,5), pen=0.25, labels=(line=(:min,:max),), show=true)","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"<img src=\"../contf_fig4.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"","category":"page"},{"location":"gallery/contourf/contourf/","page":"Contourf","title":"Contourf","text":"Download a Pluto Notebook here","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/#Choropleth-maps","page":"Coutries (DCW)","title":"Choropleth maps","text":"","category":"section"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"A choropleth is a thematic map where areas are colored in proportion to a variable such as population density. GMT lets us plot choropleth maps but the process is not straightforward because we need to put the color information in the header of a multi-segment file. To facilitate this, some tools were added to the Julia wrapper.","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"Load packages needed to download data and put into a DataFrame","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"paises = CSV.File(HTTP.get(\"https://raw.githubusercontent.com/tillnagel/unfolding/master/data/data/countries-population-density.csv\").body, delim=';') |> DataFrame;","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"Extract the Europe countries from the DCW file","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"eu = coast(DCW=\"=EU+z\", dump=true);","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"Generate two vector with country codes (2 chars codes) and the population density for European countries.","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"codes, vals = GMT.mk_codes_values(paises[!, 2], paises[!, 3], region=\"eu\");","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"Create a Categorical CPT that allows plotting the choropleth. Note that we need to limit the CPT range to leave out the very high density states like Monaco otherwise all others would get the same color.","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"C = cpt4dcw(codes, vals, range=[10, 500, 10]);","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"Show the result","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"plot(eu, cmap=C, fill=\"+z\", proj=:guess, R=\"-76/36/26/84\", title=\"Population density\",\n\tcolorbar=true, show=true)","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"<img src=\"../choro1_dcw.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"","category":"page"},{"location":"gallery/choropleths/choropleth_DCW/","page":"Coutries (DCW)","title":"Coutries (DCW)","text":"Download a Pluto Notebook here","category":"page"},{"location":"gallery/color_lines/color_lines/#Line-colors-with-custom-CPT-and-auto-color-wrap","page":"Color lines","title":"Line colors with custom CPT and auto color wrap","text":"","category":"section"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"In this example the lines color is set using a custom CPT. Pen thickness is assigned automatically.","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"The custom CPT is used by setting the plot command’s cmap argument to true. This workas because we previously computed the CPT and it will remain in memory until it's consumed when we finish the plot. The level argument sets the color to be used from the custom CPT.","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"In fact, in this case with a CPT already in memory, the level option alone would have triggered the line coloring and the cmap option could have been droped.","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"Normally we don't need to start a figure with a call to basemap because the plot function takes care of guessing reasonable  defaults, but in this case we start with a curve with small amplitude and we grow the figure by adding more lines. So if we leave it to automatic guessing one would have to start by the largest amplitude curve.","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"using GMT\nC = makecpt(range=(0,10,1));\nbasemap(region=(20,30,-10,10), figsize=(12,8))\nx = 20:0.1:30;\nfor amp=0:10\n\ty = amp .* sin.(x)\n\tplot!(x, y, cmap=true, level=amp)\nend\ncolorbar!(show=true)","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"<img src=\"../clines1.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/color_lines/color_lines/#Line-colors-with-the-automatic-color-scheme","page":"Color lines","title":"Line colors with the automatic color scheme","text":"","category":"section"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"Here we are showing how to plot several lines at once and color them according to a circular color scheme comprised of 7 distinct colors. We start by generating a dummy matrix 8x5, where rows represent the vertex and the columns hold the lines. To tell the program that first column contains the coordinates and the remaining are all lines to be plotted we use the option multicol=true","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"mat = GMT.fakedata(8, 5);\nlines(mat, multicol=true, show=true)","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"<img src=\"../clines2.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"But if we want choose the colors ourselves, it is also easy though we need to go a bit lower in the data preparation.","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"The basic data type to transfer tabular data to GMT is the GMTdataset and the above command has converted the matrix into a GMTdataset under the hood but now we need to create one ourselves and fine control more details, like the colors and line thickness of the individual lines. Not that we have 5 lines but will provide 3 colors and 3 lines thicknesses. When we do this those properties are wrapped modulo its number.","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"D = mat2ds(mat, color=[\"brown\", \"green\", \"blue\"], linethick=[2, 1.0, 0.5, 0.25], multi=true);","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"And now we just call lines (but using plot would have been the same) with the D argument.","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"lines(D, show=true)","category":"page"},{"location":"gallery/color_lines/color_lines/","page":"Color lines","title":"Color lines","text":"<img src=\"../clines3.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/scripts_agu/arrows_II/#Arrows_II","page":"Arrows_II","title":"Arrows_II","text":"","category":"section"},{"location":"gallery/scripts_agu/arrows_II/","page":"Arrows_II","title":"Arrows_II","text":"Plot another arrow","category":"page"},{"location":"gallery/scripts_agu/arrows_II/","page":"Arrows_II","title":"Arrows_II","text":"arrows([0.75 0.5 0 8], limits=(-0.1,3,0,2.5), figsize=(16,5),\n       arrow=(len=2,start=:arrow,stop=:tail,shape=0.5), fill=:red, pen=6,\n       frame=(axes=:WSrt, annot=:auto, title=\"Arrow II\"))\nT1 = text_record([0 2.0], \"arrows([0 1.0 0 6], limits=(0,3,0,2), figsize=(14,5),\");\nT2 = text_record([0 1.5], \"   arrow=(len=2,start=:arrow,stop=:tail,shape=0.5),\");\nT3 = text_record([0 1.1], \"   pen=6, fill=:red\");\npstext!(T1, font=(20,\"Times-Italic\"), justify=:LB)\npstext!(T2, font=(20,\"Times-Italic\"), justify=:LB)\npstext!(T3, font=(20,\"Times-Italic\"), justify=:LB, show=true)","category":"page"},{"location":"gallery/scripts_agu/arrows_II/","page":"Arrows_II","title":"Arrows_II","text":"<img src=\"../figs/arrows_II.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/buffergeo/buffer/#Geodesic-buffers","page":"Geodesic buffers","title":"Geodesic buffers","text":"","category":"section"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"Buffers polygons delimite areas that are within some distance of input features. We can have them arround points or lines. We will show here examples of both. ","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"We start by computing a great circle, also known as an orthodrome between two points and interpolated at 1000 km increments.","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"using GMT\n# Compute the great circle (orthodrome) line\northo = orthodrome([0 0; 70 60], step=1000, unit=:k);\n# Plot the orthodrome on an orthographic projection\ncoast(region=:global, proj=(name=:ortho, center=(0,45)), land=:peru, frame=:g)\nplot!(ortho, lw=0.5, marker=:circ, ms=0.1, fill=:black, show=true)","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"<img src=\"../buffer1.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"Next we will draw geodesic circles with 500 km radius with center on the orthodrome vertices. And to do it we need ofc to compute those circles. We compute the circles with the circgeo function. ","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"c = circgeo(ortho, radius=500, unit=:k);","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"coast(region=:global, proj=(name=:ortho, center=(0,45)), land=:peru, frame=:g)\nplot!(c, lw=0.1, fill=:gray)\nplot!(ortho, lw=0.5, marker=:circ, ms=0.1, fill=:black, show=true)","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"<img src=\"../buffer2.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"Now imagine that we plot many close circles and compute the union of them all. That's how we get the buffer.","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"# Poly-line arround which to compute the buffer. Make it go arround the pole.\nline = [-37. 1; -28 26; -45 35; -19 42; -9 55; 4 64; 32 72; 85 73; 135 73; 172 73; -144 73; -78 77; -27 72; -8 65; 8 54; 18 39; 28 24; 34 1];\n# Compute the buffer polygon\nD = buffergeo(line, width=500000);\n# and plot it\ncoast(region=:global, land=:peru, frame=:g,\n      proj=(name=:ortho, center=(0,45)),\n      plot=(data=D, fill=:green), show=true)","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"<img src=\"../buffer3.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"","category":"page"},{"location":"gallery/buffergeo/buffer/","page":"Geodesic buffers","title":"Geodesic buffers","text":"Download a Pluto Notebook here","category":"page"},{"location":"gallery/scripts_agu/bars_3D/#Make-a-3D-bar-plot-with-constant-color","page":"Make a 3D bar plot with constant color","title":"Make a 3D bar plot with constant color","text":"","category":"section"},{"location":"gallery/scripts_agu/bars_3D/","page":"Make a 3D bar plot with constant color","title":"Make a 3D bar plot with constant color","text":"Create a 3x3 grid","category":"page"},{"location":"gallery/scripts_agu/bars_3D/","page":"Make a 3D bar plot with constant color","title":"Make a 3D bar plot with constant color","text":"G = gmt(\"grdmath -R0/2/0/2 -I1 X Y R2 NEG EXP X MUL =\");","category":"page"},{"location":"gallery/scripts_agu/bars_3D/","page":"Make a 3D bar plot with constant color","title":"Make a 3D bar plot with constant color","text":"Plot that grid as 3D prisms","category":"page"},{"location":"gallery/scripts_agu/bars_3D/","page":"Make a 3D bar plot with constant color","title":"Make a 3D bar plot with constant color","text":"bar3(G,                 # 'G' is the grid created above\n     fill=[0,115,190],  # Fill prisms with this RGB color\n     lw=:thinnest,      # Line thickness (0.25 pt)\n     figsize=14,        # Set fig width of 14 cm\n     show=true)         # Show the result","category":"page"},{"location":"gallery/scripts_agu/bars_3D/","page":"Make a 3D bar plot with constant color","title":"Make a 3D bar plot with constant color","text":"As one-liners (to facilitate copy-paste):","category":"page"},{"location":"gallery/scripts_agu/bars_3D/","page":"Make a 3D bar plot with constant color","title":"Make a 3D bar plot with constant color","text":"G = gmt(\"grdmath -R0/2/0/2 -I1 X Y R2 NEG EXP X MUL =\");\nbar3(G, fill=[0,115,190], lw=:thinnest, figsize=14, show=true)","category":"page"},{"location":"gallery/scripts_agu/bars_3D/","page":"Make a 3D bar plot with constant color","title":"Make a 3D bar plot with constant color","text":"<img src=\"../figs/bars_3D.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"decorated/#Line-decorations","page":"Line decorations","title":"Line decorations","text":"","category":"section"},{"location":"decorated/","page":"Line decorations","title":"Line decorations","text":"There are two different types of decorated lines. Lines decorated with text (quoted lines) and lines decorated with symbols. This second category is still subdivided in two algorithms. They are all specified by a keyword (decorated) and a named tuple.","category":"page"},{"location":"decorated/","page":"Line decorations","title":"Line decorations","text":"decorated=(dist=..., symbol=..., pen=..., quoted=true, etc)","category":"page"},{"location":"decorated/#Front-lines","page":"Line decorations","title":"Front lines","text":"","category":"section"},{"location":"decorated/","page":"Line decorations","title":"Line decorations","text":"dist=xx or distance=xx\n Distance gap between symbols and symbol size. If xx is a two elements  array or tuple the first element is gap and second the size. However, size may be ommited  (defaulting to 30% of the gap) and in this case xx may be a scalar or a string.\nnumber=xx\n Instead of the above, use this option to set the number of symbols along the front instead,  but in this case xx must be a two elements array or tuple with the number and size.\nleft=true\n Plot symbols on the left side of the front\nright=true\n Plot symbols on the right side of the front\nlen=xx or length=xx\n Length of the vector head. xx may be numeric, a string with the length  and the units attached (as in len=\"2c\") or a tuple with length and units as in len=(2,:centimeters)\npen=pen\n Use an alternate pen. The pen value may contain any of valid ways of specifying pens.\nsymbol= – Specify which symbol to plot:\nsymbol=:box\nsymbol=:circle\nsymbol=:fault\nsymbol=:triangle\nsymbol=:slip  – Left-lateral or right-lateral strike-slip arrows.\nsymbol=:arcuate  – Draws arcuate arrow heads\noffset=xx – Offset the first symbol from the beginning of the front by that amount [0].","category":"page"},{"location":"decorated/#Decorated-lines","page":"Line decorations","title":"Decorated lines","text":"","category":"section"},{"location":"decorated/","page":"Line decorations","title":"Line decorations","text":"To select this type the dec2=true keyword/value must be present in the decorated args. The required setting controls the placement of labels along the quoted lines. Choose among the controlling algorithms.","category":"page"},{"location":"decorated/#placement_method_dec","page":"Line decorations","title":"Placement methods:","text":"","category":"section"},{"location":"decorated/","page":"Line decorations","title":"Line decorations","text":"dist=xx or distance=xx\n Give distances between labels on the plot in your preferred measurement unit. xx may be a scalar or a string. Use strings when appending the units c (cm), i (inch), or p (points).\ndistmap=xx\n Like above but specify distances in map units and append the unit; choose among e (m),  k (km), n (nautical mile), and d (arc degree), m (arc minute), or s (arc second)\nline=xx\n Give the coordinates of the end points for one or more straight line segments.  Symbols will be placed where these lines intersect the decorated lines. xx format is a Mx4 array  with the coordinates of the line's end points. The format of each line specification is  [startx starty stopx stopy]. These can be replaced by either a 2-character key that uses the justification  format employed in text to indicate a point on the frame or center of the map, given as [LCR][BMT] or  their explicit versions (for example line=(:TopLeft,:BottomRight)). In addition, you can use min, max  to mean the global minimum and maximum locations in the grid (i.e. line=(:min,:max)).\nLine=xx\n Like line But will interpret the point pairs as defining great circles.\nn_labels=xx or :n_symbols=xx\n Specifies the number of equidistant labels for quoted lines [1].\nN_labels=xx or :N_symbols=xx\n Same as above but starts labeling exactly at the start of the line  [Default centers them along the line]. Optionally, append /min_dist[c|i|p] to enforce that a minimum distance  separation between successive labels is enforced. In this case xx must obviously be a string.","category":"page"},{"location":"decorated/#symb_format_dec","page":"Line decorations","title":"Symbol formatting:","text":"","category":"section"},{"location":"decorated/","page":"Line decorations","title":"Line decorations","text":"marker=symb or symbol=symb\n Selects the decorating symbol symb. See the Symbols for the list of symbols available.\nsize=xx or markersize or ms or symbsize or symbolsize\n Use any of these to set the symbol size. Sizes can be scalars, strings or tuples if a unit is used.\nangle=xx\n For symbols at a fixed angle.\ndebug=true\n Turns on debug which will draw helper points and lines to illustrate the workings  of the decorated line setup.\nfill=color\n Sets the symbol fill. The color is a Setting color element.\npen=pen\n Draws the outline of symbols; optionally specify pen for outline [Default is width = 0.25p,  color = black, style = solid]. The pen value may contain any of valid ways of specifying pens.\nnudge=xx\n Nudges the placement of symbols by the specified amount. xx may be a scalar, a 2 elements  array (to separate x and y nudges) or a string. Must use a string if units are used.\nn_data=xx\n Specifies how many (x,y) points will be used to estimate symbol angles [Default is 10].","category":"page"},{"location":"decorated/#Quoted-lines","page":"Line decorations","title":"Quoted lines","text":"","category":"section"},{"location":"decorated/","page":"Line decorations","title":"Line decorations","text":"To select this type the quoted=true keyword/value must be present in the decorated args. Lines with annotations such as contours. The required setting controls the placement of labels along the quoted lines. Choose among the controlling algorithms.","category":"page"},{"location":"decorated/#placement_method_quot","page":"Line decorations","title":"Placement methods:","text":"","category":"section"},{"location":"decorated/","page":"Line decorations","title":"Line decorations","text":"dist=xx or distance=xx\n Give distances between labels on the plot in your preferred measurement unit. xx may be a scalar or a string. Use strings when appending the units c (cm), i (inch), or p (points).\ndistmap=xx\n Similar to above but specify distances in map units and append the unit; choose among e (m),  f (foot), k (km), M (mile), n (nautical mile) or u (US survey foot), and d (arc degree), m (arc minute),  or s (arc second).\nline=xx\n Give the coordinates of the end points for one or more straight line segments.  Symbols will be placed where these lines intersect the quoted lines. xx format is a Mx4 array  with the coordinates of the line's end points. The format of each line specification is  [startx starty stopx stopy]. These can be replaced by a 2-character key that uses the justification  format employed in text to indicate a point on the frame or center of the map, given as [LCR][BMT].\nLine=xx\n Like line But will interpret the point pairs as defining great circles.\nn_labels=xx or :n_symbols=xx\n Specifies the number of equidistant labels for quoted lines [1].\nN_labels=xx or :N_symbols=xx\n Same as above but starts labeling exactly at the start of the line  [Default centers them along the line]. Optionally, append /min_dist[c|i|p] to enforce that a minimum distance  separation between successive labels is enforced. In this case xx must obviously be a string.","category":"page"},{"location":"decorated/#label_format_quot","page":"Line decorations","title":"Label formatting:","text":"","category":"section"},{"location":"decorated/","page":"Line decorations","title":"Line decorations","text":"angle=xx\n For symbols at a fixed angle.\nclearance=xx\n Sets the clearance between label and optional text box. xx may be a scalar, a 2 elements  array (to separate x and y clearances) or a string. Must use a string if units are used. Use % to indicate  a percentage of the label font size [15%].\ncolor=color\n Selects opaque text boxes [Default is transparent]; optionally specify the color [Default is PS_PAGE_COLOR].  The color is a Setting color element.\nconst_label=\"xx\"\n Sets the constant label text.\ncurved=true\n Specifies curved labels following the path [Default is straight labels].\ndebug=true\n Turns on debug which will draw helper points and lines to illustrate the workings  of the decorated line setup.\ndelay=true\n Delay the plotting of the text. This is used to build a clip path based on the text, then lay  down other overlays while that clip path is in effect, then turning of clipping with clip -Cs which  finally plots the original text.\nfont=xx\n Sets the desired font [Default FONTANNOTPRIMARY with its size changed to 9p]. xx is a  Setting fonts element.\njustify=xx\n Sets label justification [Default is MC]. xx is a two char justification code (see Justify).\nlabel=xx\nSets the label text according to the specified option. Where xx may be a symbol or a tuple:\nlabel=:header  – Take the label from the current segment header\nlabel=:input   – Use text after the 2nd column in the fixed label location file as the label.  Requires the fixed label location setting.\nlabel=(:plot_dist,\"unit\")  – Take the Cartesian plot distances along the line as the label.  Use any of c|i|p as the unit.\nlabel=(:map_dist,\"unit\") –  Calculate actual map distances. Use any of d|e|f|k|n|M|n|s as the unit.\nmin_rad=xx\n Do not place labels where the line’s radius of curvature is less than min_rad [Default is 0]. \nnudge=xx\n Nudges the placement of symbols by the specified amount. xx may be a scalar, a 2 elements  array (to separate x and y nudges) or a string. Must use a string if units are used.\nn_data=xx\n Specifies how many (x,y) points will be used to estimate symbol angles [Default is 10].\npen=pen\n Draws the outline of text boxes; optionally specify pen for outline  [Default is width = 0.25p, color = black, style = solid]. The pen value may contain any of valid ways  of specifying pens.\nprefix=xx\n Prepends prefix (xx is a string) to all line labels. If prefix starts with a leading hyphen  (-) then there will be no space between label value and the prefix.\nrounded=true\n Selects rounded rectangular text box [Default is rectangular].\nsuffices=\"first,last\"\n Append the suffices first and last to the corresponding labels. Used to  annotate the start and end of a line [Default just adds a prime to the second label].\nunit=xx\n Appends unit (xx is a string) to all line labels. If unit starts with a leading hyphen (-)  then there will be no space between label value and the unit. [Default is no unit]. ","category":"page"},{"location":"colorbar/#colorbar","page":"colorbar","title":"colorbar","text":"","category":"section"},{"location":"colorbar/","page":"colorbar","title":"colorbar","text":"colorbar(cmd0::String=\"\", arg1=nothing; kwargs...)","category":"page"},{"location":"colorbar/","page":"colorbar","title":"colorbar","text":"Plot a gray or color scale-bar on maps","category":"page"},{"location":"colorbar/#Description","page":"colorbar","title":"Description","text":"","category":"section"},{"location":"colorbar/","page":"colorbar","title":"colorbar","text":"Plots gray scales or color scales on maps. Both horizontal and vertical scales are supported. For CPTs with gradational colors (i.e., the lower and upper boundary of an interval have different colors) we will interpolate to give a continuous scale. Variations in intensity due to shading/illumination may be displayed by setting the option shade. Colors may be spaced according to a linear scale, all be equal size, or by providing a file with individual tile widths. The font used for the annotations along the scale and optional units is specified by FONT_ANNOT_PRIMARY. If a label is requested, it is plotted with FONT_LABEL.","category":"page"},{"location":"colorbar/#Required-Arguments","page":"colorbar","title":"Required Arguments","text":"","category":"section"},{"location":"colorbar/","page":"colorbar","title":"colorbar","text":"D or pos or position : – pos=(map=true, inside=true, outside=true, norm=true, paper=true, anchor=XX, size=XX, triangles=true, justify=code, offset=XX, horizontal=true, move_annot=true[:a|:l|:u], neon=true, nan=true)\n   Defines the reference point on the map for the color scale using one of four coordinate systems: (1) Use map=true for map (user) coordinates, (2) use inside=true or outside=true (the default) for setting anchor via a 2-char justification code that refers to the (invisible) map domain rectangle, (3) use norm=true for normalized (0-1) coordinates, or (4) use paper=true for plot coordinates (inches, cm, etc.). All but paper=true requires both region and proj to be specified.\nFor inside or outside with codes TC, BC, ML, MR (i.e., centered on one of the map sides) we pre-calculate all further settings. Specifically, the length is set to 80% of the map side, horizontal or vertical depends on the side, the offset is MAP_LABEL_OFFSET for outside with an extra offset MAP_FRAME_WIDTH for outside, and annotations are placed on the side of the scale facing away from the map frame. However, you can override any of these with these modifiers.   Use size=(length,width) to set the color bar size. If width is not specified then it is set to 4% of the given length. Give a negative length to reverse the scale bar. Use horizontal=true to get a horizontal scale [Default is vertical]. By default, the anchor point on the scale is assumed to be the bottom left corner (BL), but this can be changed by justify=code where code is a 2-char justification code (see text). Note: with the default outside=true, the justify defaults to the same as anchor, if inside=true is used then justify defaults to the mirror opposite of anchor. Finally,add offset=(dx,dy) to offset the color scale by dx, dy away from the anchor point in the direction implied by justify (or the direction implied by inside or outside).   Add sidebar triangles for back- and/or foreground colors with triangles=true. Use triangles=:f (foreground) or triangles=:b (background) for only one sidebar triangle [Default gives both]. Optionally,append triangle height [Default is half the barwidth].   Move text to opposite side with move_annot=true[:a|:l|:u]. Horizontal scale bars: Move annotations and labels above the scale bar [Default is below]; the unit remains on the left. Vertical scale bars: Move annotations and labels to the left of the scale bar [Default is to the right]; the unit remains below. Append one or more of a, l or u to control which of the annotations, label, and unit that will be moved to the opposite side. Use neon=true if you want to print a vertical label as a column of characters (does not work with special characters). Append nan=true to plot a rectangle with the NaN color at the start of the bar, use text instead of true to change label from NaN.","category":"page"},{"location":"colorbar/#Optional-Arguments","page":"colorbar","title":"Optional Arguments","text":"","category":"section"},{"location":"colorbar/","page":"colorbar","title":"colorbar","text":"B or axes or frame\n  Set annotation, tick, and gridline interval for the colorbar. More at frame   The x-axis label will plot beneath a horizontal bar (or vertically to the right of a vertical bar), except when using the move_annot modifier of the pos option. As an option, use the y-axis label to plot the data unit to the right of a horizontal bar (and above a vertical bar). When using frame=(annot=:auto,) or frame=(annot=:auto,ticks=:auto) annotation and/or minor tick intervals are chosen automatically. If frame is omitted, or no annotation intervals are provided, the default is to annotate every color level based on the numerical entries in the CPT (which may be overridden by ULB flags in the CPT). To specify custom text annotations for intervals, you must append ;\\ annotation to each z-slice in the CPT.\nC or color or cmap : color=cpt\n  Note: If not given, the module will check if we have a valid current_cpt stored in memory (makecpt does store it). If there is one, fine, otherwise GMT will error.   Where cpt is the CPT to be used. By default all color changes are annotated. To use a subset, add an extra column to the CPT with a L, U, or B to annotate Lower, Upper, or Both color segment boundaries (but see frame). We can understand pattern specifications in the CPT. For CPTs where the z range is in meters, it may be useful to change to another unit when plotting. To do so, append +U\\ unit to the file name. Likewise, if the CPT uses another unit than meter and you wish to plot the CPT versus meters, append +u\\ unit. If a GMT master dynamic CPT is given instead then its z-range will be set to its default range (if it has one) before plotting.\nF or box : – box=(clearance=val, fill=color, inner=true, pen=pen, rounded=true, shaded=XX)\n  Without further options, draws a rectangular border around the scale using MAP_FRAME_PEN; specify a different pen with pen=pen, (see Pen attributes). Add fill=color, where color is any valid color setting (see Setting color), to fill the scale panel [no fill]. Add  clearance=val where val is either gap or (xgap,ygap), or (lgap,rgap,bgap,tgap) where these items are uniform, separate in x- and y-direction, or individual side spacings between scale and border. Use inner=true to draw a secondary, inner border as well. We use a uniform gap between borders of 2p and the MAP_DEFAULTS_PEN unless other values are specified (like inner=\"gap/pen\"). Add rounded=true to draw rounded rectangular borders instead, with a 6p corner radius. You can override this radius by using another value instead of true. Finally, use shadded=true or shadded=(dx,dy) or shadded=shade to draw an offset background shaded region. Here, dx/dy indicates the shift relative to the foreground frame [4p/-4p]and shade sets the fill style to use for shading (\"gray50\").\nG or truncate : – truncate=(zlo,zhi)\n  Truncate the incoming CPT so that the lowest and highest z-levels are to zlo and zhi.  If one of these equal NaN then we leave that end of the CPT alone. The truncation takes place before the plotting.\nI or shade : – shade=true | shade=max_intens | shade=(low_i,high_i)\n  Add illumination effects. Optionally, set the range of intensities from - to shade=max_intens. If not specified, 1 is used. Alternatively, use shade=(low,high) intensities to specify an asymmetric range [Default is no illumination].\nJ or proj : proj=<parameters>\n Select map projection. More at proj\nL or equal or equal_size : – equal=true | equal=(range=true, gap=val)\n  Gives equal-sized color rectangles. Default scales rectangles according to the z-range in the CPT (Also see zfile). If set, any equal interval annotation set with frame will be ignored. If equal=(gap=val,) is appended and the CPT is discrete we will center each annotation on each rectangle, using the lower boundary z-value for the annotation. If equal=(range=true,) is prepended we annotate the interval range instead. If shade is used then each rectangle will have its constant color modified by the specified intensity.\nM or monochrome : – monochrome=true\n  Force a monochrome graybar using the (television) YIQ transformation.\nN or dpi : – dpi=true | dpi=:p** | *dpi=number\n  Controls how the color scale should be encoded graphically. To preferentially draw color rectangles (e.g., for discrete colors), use dpi=:p. Otherwise we will preferentially draw images (e.g., for continuous colors). Optionally use dpi=number effective dots-per-inch for rasterization of color scales [600].\nQ or log : – log=true\n  Select logarithmic scale and power of ten annotations. All z-values in the CPT will be converted to p = log10(z) and only integer p values will be annotated using the 10^p format [Default is linear scale].\nR or region or limits : – limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),) | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more\n  Specify the region of interest. More at limits\nS or nolines : – nolines=true\n  Do not separate different color intervals with black grid lines.\nU or time_stamp : – time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n Draw GMT time stamp logo on plot. More at timestamp\nV or verbose : – verbose=true | verbose=level\n Select verbosity level. More at verbose\nW or zscale : – zscale=true\n  Multiply all z-values in the CPT by the provided scale. By default the CPT is used as is.\nX or x_off or x_offset : – x_off=[] | x_off=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : – y_off=[] | y_off=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off\nZ or zfile : zfile=\"file\"\n  File with colorbar-width per color entry. By default, width of entry is scaled to color range, i.e., z = 0-100 gives twice the width as z = 100-150 (Also see equal).","category":"page"},{"location":"colorbar/#Examples","page":"colorbar","title":"Examples","text":"","category":"section"},{"location":"colorbar/","page":"colorbar","title":"colorbar","text":"To plot a horizontal color scale (12 cm long; 0.5 cm wide) at the reference point (8,1) (paper coordinates) with justification at top center and automatic annotation interval, do","category":"page"},{"location":"colorbar/","page":"colorbar","title":"colorbar","text":"    makecpt(range=(-200,1000,100), cmap=:rainbow)\n    colorbar(pos=(paper=true, anchor=(8,1), size=(12,0.5), justify=:TC, horizontal=true),\n            frame=(annot=:auto, ticks=:auto, xlabel=\"topography\", ylabel=:km), show=true)","category":"page"},{"location":"colorbar/","page":"colorbar","title":"colorbar","text":"To append a vertical color scale (7.5 cm long; 1.25 cm wide) to the right of a plot that is 6 inch wide and 4 inch high, using illumination, and show back- and foreground colors, and annotating every 5 units, we provide the reference point and select the left-mid anchor point via","category":"page"},{"location":"colorbar/","page":"colorbar","title":"colorbar","text":"    colorbar(pos=(paper=true, anchor=\"6.5i/2i\", justify=(:LM,\"2i\"), size=(7.5,1.2), triangles=true),\n            cmap=:geo, shade=true, xaxis=(annot=1000, label=:BATHYMETRY), ylabel=:m, show=1)","category":"page"},{"location":"colorbar/","page":"colorbar","title":"colorbar","text":"To overlay a horizontal color scale (10 centimeters long and default width) above a Mercator map produced by a previous call, ensuring a 2 cm offset from the map frame, use","category":"page"},{"location":"colorbar/","page":"colorbar","title":"colorbar","text":"    colorbar!(region=(0,10,0,10), pos=(justify=:CT, width=10, offset=(0,2), horizontal=true), cmap=\"colors.cpt\", show=1)","category":"page"},{"location":"plot/#plot","page":"plot","title":"plot","text":"","category":"section"},{"location":"plot/","page":"plot","title":"plot","text":"plot(cmd0::String=\"\", arg1=[]; kwargs...)","category":"page"},{"location":"plot/","page":"plot","title":"plot","text":"Reads (x,y) pairs and plot lines, polygons, or symbols with different levels of decoration. The input can either be a file name of a file with at least two columns (x,y),but optionally more, a GMTdatset object with also two or more columns. If a symbol is selected and no symbol size given, then it will interpret the third column of the input data as symbol size. Symbols whose size is <= 0 are skipped. If no symbols are specified then the symbol code (see symbol below) must be present as last column in the input. If symbol is not used, a line connecting the data points will be drawn instead. To explicitly close polygons, use close. Select a fill with fill. If fill is set, pen will control whether the polygon outline is drawn or not. If a symbol is selected, fill and pen determines the fill and outline/no outline, respectively.","category":"page"},{"location":"plot/","page":"plot","title":"plot","text":"Since many options imply further data, to control symbol size and/or color for example, columns beyond 2 for plot or 3 for plot3d cannot be used to plot multiple lines at once (like Matlab does). However, that is stil possible if one uses the form plot(x, y, ...) where x is the coordinates vector or a matrix with only one column or row and y is a matrix with N columns representing the individual lines and M rows, as many as elements in x. This case, off course, looses the possibility of having extra columns with options auxiliary data. Still, another possibility to achieve this when arg1 is a MxN matrix is to use the key/val multicol=true. Automatic legends are obtained by using legend=true.","category":"page"},{"location":"plot/","page":"plot","title":"plot","text":"Selecting both a symbol and a pen plots a line and add the sybols at the vertex.","category":"page"},{"location":"plot/#Parameters","page":"plot","title":"Parameters","text":"","category":"section"},{"location":"plot/","page":"plot","title":"plot","text":"A or steps : – steps=true | steps=:meridian|:parallel|:x|:y\n By default, geographic line segments are drawn as great circle arcs. To draw them as straight lines, use the steps=true. Alternatively, use steps=:meridian to draw the line by first following a meridian, then a parallel. Or append steps=:parallel to start following a parallel, then a meridian. (This can be practical to draw a line along parallels, for example). For Cartesian data, points are simply connected, unless you use steps=:x or steps=:y to draw stair-case curves that whose first move is along x or y, respectively.\nB or axes or frame\n Set map boundary frame and axes attributes. Default is to draw and annotate left and bottom axes.  More at frame\nC or color or cmap : color=cpt\n Give a CPT or specify color=\"color1,color2 [,color3 ,...]\" or color=((r1,g1,b1),(r2,g2,b2),...) to build a linear continuous CPT from those colors automatically, where z starts at 0 and is incremented by one for each color. In this case color_n can be a [r g b] triplet, a color name, or an HTML hexadecimal color (e.g. #aabbcc ). If symbol is set, let symbol fill color be determined by the z-value in the third column. Additional fields are shifted over by one column (optional size would be 4th rather than 3rd field, etc.). If symbol is not set, then it expects the user to supply a multisegment file where each segment header contains a -Z\\ val string. The val will control the color of the line or polygon (if close is set) via the CPT.\nD or shift or offset : offset=(dx,dy) | offset=dx\n Offset the plot symbol or line locations by the given amounts dx,dy [Default is no offset]. If dy is not given it is set equal to dx.\nE or error or error_bars : – error=(x|y|X|Y=true, wiskers=true, cap=width, pen=pen, colored=true, cline=true, csymbol=true)\n Draw symmetrical error bars. Use error=(x=true) and/or error=(y=true) to indicate which bars you want to draw (Default is both x and y). The x and/or y errors must be stored in the columns after the (x,y) pair [or (x,y,z) triplet]. If asym=true is appended then we will draw asymmetrical error bars; these requires two rather than one extra data column, with the low and high value. If upper case error=(X=true) and/or Y are used we will instead draw \"box-and-whisker\" (or \"stem-and-leaf\") symbols. The x (or y) coordinate is then taken as the median value, and four more columns are expected to contain the minimum (0% quantile), the 25% quantile, the 75% quantile, and the maximum (100% quantile) values. The 25-75% box may be filled by using fill. If wiskers=true is appended the we draw a notched \"box-and-whisker\" symbol where the notch width reflects the uncertainty in the median. This symbol requires a 5th extra data column to contain the number of points in the distribution. The cap=width modifier sets the cap width that indicates the length of the end-cap on the error bars [7p]. Pen attributes for error bars may also be set via pen=pen. [Defaults: width = default, color = black, style = solid]. When color is used we can control how the look-up color is applied to our symbol. Add cline=true to use it to fill the symbol, while csymbol=true will just set the error pen color and turn off symbol fill. Giving colored=true will set both color items.\nF or conn or connection : – conn=(continuous=true, net|network=true, refpoint=true, ignorehdr=true, singlegroup=true, segments=true, anchor=(x,y))\n Alter the way points are connected (by specifying a scheme) and data are grouped (by specifying a method).  Use one of three line connection schemes:\n continuous=true : Draw continuous line segments for each group [Default].\n refpoint=true : Draw line segments from a reference point reset for each group.\n network=true : Draw networks of line segments between all points in each group.\n Optionally, use one of four segmentation methods to define the group:\n ignore_hdr=true : Ignore all segment headers, i.e., let all points belong to a single group, and set group reference point to the very first point of the first file.  single_group=true : Consider all data in each file to be a single separate group and reset the group reference point to the first point of each group.  segments=true : Segment headers are honored so each segment is a group; the group reference point is reset to the first point of each incoming segment [Default].  segments_reset=true : Same as segments=true, but the group reference point is reset after each record to the previous point (this method is only available with the refpoint=true scheme). Instead of the codes ignore_hdr, single_group, segments, segments_reset you may append the coordinates of a anchor=(x,y) which will serve as a fixed external reference point for all groups.\nJ or proj : proj=<parameters>\n Select map projection. Default is linear and 14 cm width. More at proj\nJz or JZ or zscale or zsize (for plot3d only) : – zscale=scale | zsize=size\n Set z-axis scaling or or z-axis size. zsize=size sets the size to the fixed value size  (for example zsize=10 or zsize=4i). zscale=scale sets the vertical scale to UNIT/z-unit.\nR or region or limits : limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more \n Specify the region of interest. By default, the limits are computed from data extents. More at limits\nG or markerfacecolor or mc or fill\n Select color or pattern for filling of symbols or polygons [Default is no fill]. Note that plot will search for fill and pen settings in all the segment headers (when passing a GMTdaset or file of a multi-segment dataset) and let any values thus found over-ride the command line settings (but those must be provided in the terse GMT syntax). See Setting color for extend color selection (including colormap generation).\nI or shade : – shade=intens\n  Use the supplied intens value (nominally in the -1 to +1 range) to modulate the fill color by simulating illumination [none]. If no intensity is provided (e.g. shade=\"\") we will instead read intens from the first data column after the symbol parameters (if given).\nL or close : – close=(sym=true, asym=true, envelope=true, left=true, right=true, x0=x0, top=true, bot=true, y0=y0, pen=pen)\n  Force closed polygons. Alternatively, add modifiers to build a polygon from a line segment.   Add sym=true to build symmetrical envelope around y(x) using deviations dy(x) given in extra column 3.   Add asym=true to build asymmetrical envelope around y(x) using deviations dy1(x) and dy2(x) from extra columns 3-4.   Add envelope=true to build asymmetrical envelope around y(x) using bounds yl(x) and yh(x) from extra columns 3-4.   Add left=true or right=true or x0=x0 to connect first and last point to anchor points at either xmin, xmax, or x0, or\n  bot=true or top=true or y0=y0 to connect first and last point to anchor points at either ymin, ymax, or y0.\n  Polygon may be painted (fill) and optionally outlined by adding pen=pen.\nN or noclip or no_clip : noclip=true | noclip=:r | noclip=:c\n Do NOT clip symbols that fall outside map border [Default plots points whose coordinates are strictly inside the map border only]. This option does not apply to lines and polygons which are always clipped to the map region. For periodic (360-longitude) maps we must plot all symbols twice in case they are clipped by the repeating boundary. The noclip will turn off clipping and not plot repeating symbols. Use noclip=:r to turn off clipping but retain the plotting of such repeating symbols, or use noclip=:c to retain clipping but turn off plotting of repeating symbols.\nS or symbol : – symbol=(symb=name, size=val, unit=unity) or marker|Marker|shape=name, markersize| MarkerSize|ms|size=val\n Plot symbols (including vectors, pie slices, fronts, decorated or quoted lines). If present, size is symbol size in the unit set in gmt.conf (unless c, i, or p is appended to markersize or synonym or cm, inch, point as unity when using the symbol=(symb=name,size=val,unitunity) form). If the symbol name is not given it will be read from the last column in the input data (must come from a file name or a GMTdataset); this cannot be used in conjunction with binary input (data from file). Optionally, append c, i,or p to indicate that the size information in the input data is in units of cm, inch, or point, respectively [Default is PROJ_LENGTH_UNIT]. Note: if you provide both size and symbol via the input file you must use PROJ_LENGTH_UNIT to indicate the unit used for the symbol size or append the units to the sizes in the file. If symbol sizes are expected via the third data column then you may convert those values to suitable symbol sizes via the incol mechanism.\n You can change symbols by adding the required -S option to any of your multisegment headers (GMTdataset only). Choose between these symbol codes:\n - or x-dash  size is the length of a short horizontal (x-dir) line segment.\n + or plus    size is diameter of circumscribing circle.\n a or * or star  size is diameter of circumscribing circle.\n c or circle  size is diameter of circle.\n d or diamond size is diameter of circumscribing circle.\n e or ellipse Direction (in degrees counter-clockwise from horizontal), major_axis, and minor_axis must be found in columns 3, 4, and 5.\n E or Ellipse Same as ellipse, except azimuth (in degrees east of north) should be given instead of direction. The azimuth will be mapped into an angle based on the chosen map projection (ellipse leaves the directions unchanged.) Furthermore, the axes lengths must be given in geographical instead of plot-distance units. An exception occurs for a linear projection in which we assume the ellipse axes are given in the same units as region. For degenerate ellipses (circles) with just the diameter given, use Ellipse-. The diameter is excepted to be given in column 3. Alternatively, append the desired diameter to E- and this fixed diameter is used instead (e.g. symbol=\"E-500\"). For allowable geographical units, see UNITS.\n front    Draw a front. See Front lines\n g or octagon  size is diameter of circumscribing circle.\n h or hexagon  size is diameter of circumscribing circle.\n i or v or inverted_tri  size is diameter of circumscribing circle.\n j or rotated_rec  Rotated rectangle. Direction (in degrees counter-clockwise from horizontal), x-dimension, and y-dimension must be found in columns 3, 4, and 5.\n J or Rotated_rec  Same as rotated_rec, except azimuth (in degrees east of north) should be given instead of direction. The azimuth will be mapped into an angle based on the chosen map projection (rotated_rec leaves the directions unchanged.) Furthermore, the dimensions must be given in geographical instead of plot-distance units. For a degenerate rectangle (square) with one dimension given, use J-. The dimension is excepted to be given in column 3. Alternatively, append the dimension diameter to J- and this fixed dimension is used instead. An exception occurs for a linear projection in which we assume the dimensions are given in the same units as region. For allowable geographical units, see UNITS.\n m or matang  math angle arc, optionally with one or two arrow heads [Default is no arrow heads]. The size is the length of the vector head. Arc width is set by pen, with vector head outlines defaulting to half of arc width. The radius of the arc and its start and stop directions (in degrees counter-clockwise from horizontal) must be given in columns 3-5. See Vector Attributes for specifying other attributes.\n M or Matang  Same as matang but switches to straight angle symbol if angles subtend 90 degrees exactly.\n n or pentagon  size is diameter of circumscribing circle.\n p or point  No size needs to be specified (1 pixel is used).\n quoted lines    i.e., lines with annotations such as contours. See Quoted lines\n r or rectangle  No size needs to be specified, but the x- and y-dimensions must be found in columns 3 and 4.\n R or roundrect  Rounded rectangle. No size needs to be specified, but the x- and y-dimensions and corner radius must be found in columns 3, 4, and 5.\n s or square    size is diameter of circumscribing circle.\n t or ^ or triangle  size is diameter of circumscribing circle.\n x or cross    size is diameter of circumscribing circle.\n y or y-dash  (|). size is the length of a short vertical (y-dir) line segment.\n decorated    i.e., lines with symbols along them. See Decorated lines\n\nW or pen=pen\n Set pen attributes for lines or the outline of symbols [Defaults: width = default, color = black, style = solid]. See Pen attributes.   If the modifier pen=(cline=true) is appended then the color of the line are taken from the CPT (see cmap). If instead modifier pen=(csymbol=true) is appended then the color from the cpt file is applied to symbol fill. Use pen=(colored=true) for both effects.  You can also append one or more additional line attribute modifiers: offset=val will start and stop drawing the line the given distance offsets from the end point. Append unit u from c | i | p to indicate plot distance on the map or append map distance units instead (see below);  bezier=true will draw the line using a Bezier spline; vspecs will place a vector head at the ends of the lines. You can use vec_start and vec_stop to specify separate vector specs at each end [shared specs]. See the Vector Attributes for more information.\nU or time_stamp : time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n Draw GMT time stamp logo on plot. More at timestamp\nV or verbose : verbose=true | verbose=level\n Select verbosity level. More at verbose\nX or x_off or x_offset : xoff=[] | *xoff=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : yoff=[] | *yoff=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off","category":"page"},{"location":"plot/#Units","page":"plot","title":"Units","text":"","category":"section"},{"location":"plot/","page":"plot","title":"plot","text":"For map distance unit, append unit d for arc degree, m for arc minute, and s for arc second, or e for meter [Default], f for foot, k for km, M for statute mile, n for nautical mile, and u for US survey foot. By default we compute such distances using a spherical approximation with great circles (spheric_dist=:g). You can use spheric_dist=:f to perform “Flat Earth” calculations (quicker but less accurate) or spheric_dist=:e to perform exact geodesic calculations (slower but more accurate; see PROJ_GEODESIC for method used).","category":"page"},{"location":"plot/#Examples","page":"plot","title":"Examples","text":"","category":"section"},{"location":"plot/","page":"plot","title":"plot","text":"Decorated curve with blue stars","category":"page"},{"location":"plot/","page":"plot","title":"plot","text":"    xy = gmt(\"gmtmath -T0/180/1 T SIND 4.5 ADD\");\n    lines(xy, axes=:af, pen=(1,:red), decorated=(dist=(2.5,0.25), symbol=:star,\n          symbsize=1, pen=(0.5,:green), fill=:blue, dec2=true), show=true)","category":"page"},{"location":"gallery/scripts_agu/compass/#Compass","page":"Compass","title":"Compass","text":"","category":"section"},{"location":"gallery/scripts_agu/compass/","page":"Compass","title":"Compass","text":"This exmple plots a compass in a map, including a magnetic component. Because several parameters used here deviate from the defaults we have an unusualy large list of parameter settings","category":"page"},{"location":"gallery/scripts_agu/compass/","page":"Compass","title":"Compass","text":"basemap(region=(-7,7,-6,6), proj=:Mercator,\n        compass=(map=true, anchor=(0,0), width=6, dec=-14.5, annot=(45,10,5,30,10,2),\n                 rose_primary=(0.25,:blue), rose_secondary=0.5, labels=\"\", justify=:CM),\n        par=(FONT_ANNOT_PRIMARY=9, FONT_LABEL=14, FONT_TITLE=24, MAP_TITLE_OFFSET=\"7p\",\n             MAP_VECTOR_SHAPE=0.5, MAP_TICK_PEN_SECONDARY=\"thinner,red\", MAP_TICK_PEN_PRIMARY=\"thinner,blue\"),\n        figsize=15, savefig=\"compass.png\", show=true)","category":"page"},{"location":"gallery/scripts_agu/compass/","page":"Compass","title":"Compass","text":"<img src=\"../figs/compass.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"gallery/historic/ex19/#Color-patterns-on-maps","page":"Color patterns on maps","title":"Color patterns on maps","text":"","category":"section"},{"location":"gallery/historic/ex19/","page":"Color patterns on maps","title":"Color patterns on maps","text":"    Glat = gmt(\"grdmath -Rd -I1 -r Y COSD 2 POW =\")\n    Glon = gmt(\"grdmath -Rd -I1 -r X =\")\n    lat_cpt = makecpt(color=\"white,blue\", range=(0,1), continuous=true, no_bg=true)\n    lon_cpt = makecpt(cmap=:rainbow, range=(-180,180))\n    grdimage(Glat, cmap=lat_cpt, frame=:none, interp=:l, proj=:sinu,\n             figsize=16, y_off=18)\n    coast!(area=5000, clip=:land)\n    grdimage!(Glon, cmap=lon_cpt, interp=:l)\n    coast!(clip=:end)\n    coast!(area=5000, shore=:thinnest)\n    text!(text_record([0 20], \"16TH INTERNATIONAL\"),\n          font=(32,\"Helvetica-Bold\",\"red=thinner\"))\n    text!(text_record([0 -10], \"GMT CONFERENCE\"),\n          font=(32,\"Helvetica-Bold\",\"red=thinner\"))\n    text!(text_record([0 -30], \"Honolulu, Hawaii, April 1, 2019\"),\n          font=(18,\"Helvetica-Bold\",\"green=thinner\"))\n\n    # Then show example of color patterns and placing a PostScript image\n    coast!(area=5000, land=(pattern=86, bg=:yellow, fg=:red, dpi=100),\n           water=(pattern=\"@circuit.png\", dpi=100), frame=:none, y_off=-8)\n    text!(text_record([0 30], \"SILLY USES OF\"),\n          font=(32,\"Helvetica-Bold\",\"lightgreen=thinner\"))\n    text!(text_record([0 -30], \"COLOR PATTERNS\"),\n          font=(32,\"Helvetica-Bold\",\"magenta=thinner\"))\n    psimage!(\"@GMT_covertext.eps\", D=\"jCM+w3i\")\n\n    # Finally repeat 1st plot but exchange the patterns\n    grdimage!(Glon, cmap=lon_cpt, frame=:none, interp=:l, y_off=-8)\n    coast!(area=5000, clip=:land)\n    grdimage!(Glat, cmap=lat_cpt, interp=:l)\n    coast!(clip=:end)\n    coast!(area=5000, shore=:thinnest)\n    text!(text_record([0  20], \"15TH INTERNATIONAL\"),\n          font=(32,\"Helvetica-Bold\",\"red=thinner\"))\n    text!(text_record([0 -10], \"GMT CONFERENCE\"),\n          font=(32,\"Helvetica-Bold\",\"red=thinner\"))\n    text!(text_record([0 -30], \"Honolulu, Hawaii, April 1, 2018\"),\n          font=(18,\"Helvetica-Bold\",\"green=thinner\"), show=true)","category":"page"},{"location":"gallery/historic/ex19/","page":"Color patterns on maps","title":"Color patterns on maps","text":"See also GMT ex17","category":"page"},{"location":"contourf/#contourf","page":"contourf","title":"contourf","text":"","category":"section"},{"location":"contourf/","page":"contourf","title":"contourf","text":"contourf(cmd0::String=\"\", arg1=nothing, arg2=nothing; kwargs...)","category":"page"},{"location":"contourf/","page":"contourf","title":"contourf","text":"Create filled contour mapps.","category":"page"},{"location":"contourf/#Description","page":"contourf","title":"Description","text":"","category":"section"},{"location":"contourf/","page":"contourf","title":"contourf","text":"This module is a wrapper to grdview, contour and grdcontour and as such it works with two different kinds of input data. If input is a grid (either a grid file name or a GMTgrid object) it will make a filled contour with grdview and optionally  overlay contours by calling grdcontour. If, on the other hand, the input data is table data file or a Mx3 array (or GMTdataset), it first compute a Delaunay triangulation and makes the plot from it. In this later case, the job is done by contour module alone.","category":"page"},{"location":"contourf/","page":"contourf","title":"contourf","text":"The region option can be used to select a map region larger or smaller than that implied by the extent of the grid. ","category":"page"},{"location":"contourf/#Required-Arguments","page":"contourf","title":"Required Arguments","text":"","category":"section"},{"location":"contourf/","page":"contourf","title":"contourf","text":"The input data set to be filled/contoured. It can be 2-D gridded data GMTgrid) or a Mx3 table (or GNTdataset). In these cases the data type detection is automatic. Alterativelly, one can provide the file name. In that case, if the data has known extensions (.grd or .nc among others for grids or .dat, .bin (need to use iput_type) for tables) the type detection is also automatic. And, for grids, passing a file name is actually the most efficient way os using thsi module. Still, if data type is not automatically detected, we can help the module by passing the grid=true or data=true options.","category":"page"},{"location":"contourf/","page":"contourf","title":"contourf","text":"Not exactly required but convinient, the second input argument can be a GMTcpt object. The advantage of this is that it releases the contour option to pass only options that control what contours to plot.","category":"page"},{"location":"contourf/#Optional-Arguments","page":"contourf","title":"Optional Arguments","text":"","category":"section"},{"location":"contourf/","page":"contourf","title":"contourf","text":"A or annot : – annot=annot_int | annot=(int=annot_int, disable=true, single=true, labels=labelinfo)\n annot_int is annotation interval in data units; it is ignored if contour levels are given in a file.  [Default is no annotations]. Use annot=(disable=true,) to disable all annotations implied by cont.  Alternatively do annot=(single=true, int=val) to plot val as a single contour. The optional labelinfo controls the specifics of the label formatting and consists of a named tuple with the following control arguments Label formatting\nB or axes or frame\n Set map boundary frame and axes attributes. More at frame\nC or cont or contour or contours or levels : – cont=cont_int\n The contours to be drawn may be specified in one of two possible ways:\nIf cont_int is a GMTcpt object (or a string and has the suffix \".cpt\" and can be opened as a file). The color boundaries are then used as contour levels. If the CPT has annotation flags in the last column then those contours will be annotated. By default all contours are labeled; use annot=(disable=true,)) (or annot=:none) to disable all annotations.\nIf cont_int is a constant or an array it means plot those contour intervals. This works also to draw single contours. E.g. contour=[0] will draw only the zero contour. The annot option offers the same","category":"page"},{"location":"contourf/","page":"contourf","title":"contourf","text":"   possibility so they may be used together to plot a single annotated contour and another single non-annotated contour,\n   as in **anot=[10], cont=[5]** that plots an annotated 10 contour and an non-annotated 5 contour. If **annot** is set\n   and **cont** is not, then the contour interval is set equal to the specified annotation interval.\n\nIf no **contour** option and no *GMTcpt* are passed then for grid a default color map is computed and all of\nthose automatically contours are drwan. Also, no *GMTcpt* and **contour=[array]** computes a cmap with only the\ncontour values specified in *array*. When passing a *Mx3* array or a *GMTdataset* the default behavior is\nbasically the same.","category":"page"},{"location":"contourf/","page":"contourf","title":"contourf","text":"E or index : – index=tri_network\n Give a Mx3 array or name of file with network information. Each record must contain triplets of node numbers for  a triangle [Default computes these using Delaunay triangulation (see triangulate)].\nG or labels : – labels=()\n The required argument controls the placement of labels along the quoted lines. Choose among five  controlling algorithms as explained in Placement methods\nJ or proj : – proj=<parameters>\n Select map projection. More at proj\nQ or cut : – cut=np | cut=length&unit[+z]\n Do not draw contours with less than np number of points [Draw all contours]. Alternatively, give  instead a minimum contour length in distance units, including c (Cartesian distances using user  coordinates) or C for plot length units in current plot units after projecting the coordinates.  Optionally, append +z to exclude the zero contour.\nR or region or limits : – limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more\n Specify the region of interest. More at limits. For perspective view view, optionally add  zmin,zmax. This option may be used to indicate the range used for the 3-D axes [Default is region given  by the reliefgrid]. You may ask for a larger w/e/s/n region to have more room between the image and the axes.  A smaller region than specified in the reliefgrid will result in a subset of the grid.\nS or smooth : – smooth=smoothfactor\n Resample the contour lines at roughly every (gridbox_size/smoothfactor) interval.  This option should be used only when input data is a table.\nS or skip : – skip=true|\"t\"\n Skip all input xyz points that fall outside the region [Default uses all the data in the triangulation].  Alternatively, use **skip=\"t\"* to skip triangles whose three vertices are all outside the region.  This option should be used only when input data is a grid.\nT or ticks : – ticks=(local_high=true, local_low=true, gap=gap, closed=true, labels=labels)\n Will draw tick marks pointing in the downward direction every gap along the innermost closed contours only;  set closed=true to tick all closed contours. Use gap=(gap,length) and optionally tick mark length  (append units as c, i, or p) or use defaults [\"15p/3p\"]. User may choose to tick only local  highs or local lows by specifying local_high=true, local_low=true, respectively. Set labels to  annotate the centers of closed innermost contours (i.e., the local lows and highs). If no labels (i.e,  set labels=\"\") is set, we use - and + as the labels. Appending exactly two characters, e.g., labels=:LH,  will plot the two characters (here, L and H) as labels. For more elaborate labels, separate the low and hight  label strings with a comma (e.g., labels=\"lo,hi\"). If a file is given by cont, and ticks is set,  then only contours marked with upper case C or A will have tick marks [and annotations].\nU or time_stamp : – time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n Draw GMT time stamp logo on plot. More at timestamp\nV or verbose : – verbose=true | verbose=level\n Select verbosity level. More at verbose\nW or pen : – pen=(annot=true, contour=true, pen=pen, colored=true, cline=true, ctext=true)\n annot=true if present, means to annotate contours or contour=true for regular contours [Default].  The pen sets the attributes for the particular line. Default pen for annotated contours: pen=(075black).  Regular contours use pen=(025black). Normally, all contours are drawn with a fixed color determined by  the pen setting. This option may be repeated, for example to separate contour and annotated contours settings.  For that the syntax changes to use a Tuple of NamedTuples, e.g.  pen=((annot=true contour=true pen=pen) (annot=true contour=true pen=pen)). If the modifier pen=(cline=true) is used then the color of the contour lines are taken from the CPT (see cont). If instead pen=(ctext=true) is appended then the color from the cpt file is applied to the contour annotations. Select pen=(colored=true) for both effects.\nX or x_off or x_offset : – x_off=[] | *x_off=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : – y_off=[] | *y_off=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off\np or view or perspective : – view=(azim, elev)\n Selects perspective view and sets the azimuth and elevation of the viewpoint. More at perspective\nt or transparency or alpha: – alpha=50\n Set PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].  Works only for the PDF and PNG formats.","category":"page"},{"location":"contourf/#Examples","page":"contourf","title":"Examples","text":"","category":"section"},{"location":"contourf/","page":"contourf","title":"contourf","text":"Using a grid","category":"page"},{"location":"contourf/","page":"contourf","title":"contourf","text":"\tG = GMT.peaks();\n\tC = makecpt(T=(-7,9,2));\n\n\tcontourf(G, show=1)\n\tcontourf(G, C=[-2, 0, 2, 5], show=1)\n\tcontourf(G, C, contour=[-2, 0, 2, 5], show=1)\n\tcontourf(G, C, annot=[-2, 0, 2, 5], show=1)\n\tcontourf(G, C, annot=2, show=1)\n\tcontourf(G, C, contour=1, annot=[-2, 0, 2, 5], show=1)\n\tcontourf(G, C, annot=:none, show=1)","category":"page"},{"location":"contourf/","page":"contourf","title":"contourf","text":"Using a table data.","category":"page"},{"location":"contourf/","page":"contourf","title":"contourf","text":"\td = [0 2 5; 1 4 5; 2 0.5 5; 3 3 9; 4 4.5 5; 4.2 1.2 5; 6 3 1; 8 1 5; 9 4.5 5];\n\tcontourf(d, limits=(-0.5,9.5,0,5), pen=0.25, labels=(line=(:min,:max),), show=1)","category":"page"},{"location":"grdgradient/#grdgradient","page":"grdgradient","title":"grdgradient","text":"","category":"section"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"grdgradient(cmd0::String=\"\", arg1=nothing; kwargs...)","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"Compute directional derivative or gradient from a grid","category":"page"},{"location":"grdgradient/#Description","page":"grdgradient","title":"Description","text":"","category":"section"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"Computes the directional derivative in a given direction (azim), or to find the direction (slopegrid) [and the magnitude (find_dir)] of the vector gradient of the data.","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"Estimated values in the first/last row/column of output depend on boundary conditions (see interp). ","category":"page"},{"location":"grdgradient/#Required-Arguments","page":"grdgradient","title":"Required Arguments","text":"","category":"section"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"The 2-D gridded data set to be contoured.","category":"page"},{"location":"grdgradient/#Optional-Arguments","page":"grdgradient","title":"Optional Arguments","text":"","category":"section"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"A or azim : – azim=azim | azim=(azim1, azim2)\n  Azimuthal direction for a directional derivative; azim is the angle in the x,y plane measured in degrees positive clockwise from north (the +y direction) toward east (the +x direction). The negative of the directional derivative, -[dz/dx sin(azim) + dz/dy cos(azim)], is found; negation yields positive values when the slope of z(x,y) is downhill in the azim direction, the correct sense for shading the illumination of an image (see grdimage and grdview) by a light source above the x,y plane shining from the azim direction. Optionally, supply two azimuths, azim=(azim1, azim2), in which case the gradients in each of these directions are calculated and the one larger in magnitude is retained; this is useful for illuminating data with two directions of lineated structures, e.g., azim=(0,270) illuminates from the north (top) and west (left).  Finally, if azim is a file it must be a grid of the same domain, spacing and registration as in_grdfile and we will update the azimuth at each output node when computing the directional derivatives.\nG or outgrid : – outgrid=\"gridname\"\n  Name of the output grid file for the directional derivative. Optional, use only when saving directly to a file.\nD or find_dir : – find_dir=true | find_dir=:a | find_dir=:c | find_dir=:o | find_dir=:n | find_dir=acon\n  Find the direction of the positive (up-slope) gradient of the data. To instead find the aspect (the down-slope direction), use find_dir=:a. By default, directions are measured clockwise from north, as azim in azim above. Use find_dir=:c to use conventional Cartesian angles measured counterclockwise from the positive x (east) direction. Use find_dir=:o to report orientations (0-180) rather than directions (0-360). Use find_dir=:n to add 90 degrees to all angles (e.g., to give local strikes of the surface). Note, you can combine two or more options by cating the single flgas in a word, (e.g. find_dir=:on)\nE or lambert : – lambert=([simple=true, peucker=true, manip=true,] view=(azim,elev) [,ambient=val, difuse=val, specular=val, shine=val])\n  Compute Lambertian radiance appropriate to use with grdimage and grdview. The Lambertian Reflection assumes an ideal surface that reflects all the light that strikes it and the surface appears equally bright from all viewing directions. Here, azim and elev are the azimuth and elevation of the light vector. Optionally, supply ambient [0.55], diffuse [0.6], specular [0.4], or shine [10], which are parameters that control the reflectance properties of the surface. Default values are given in the brackets. Use lambert=(simple=true, view=(azim,elev)) for a simpler Lambertian algorithm. Note that with this form you only have to provide azimuth and elevation. Alternatively, use lambert=(peucker=true,) for the Peucker piecewise linear approximation (simpler but faster algorithm; in this case the azim and elev are hardwired to 315 and 45 degrees. This means that even if you provide other values they will be ignored. The lambert=(manip=true,) uses another algorithm that gives results close to ESRI's hillshade but faster. In this case the azimuth and elevation are hardwired to 315 and 45 degrees.\nN or norm or normalize : – norm=([laplace=true, cauchy=true,] [amp=val,] [sigma=val, offset=val])\n  Normalization. [Default is no normalization.] The actual gradients g are offset and scaled to produce normalized gradients gn with a maximum output magnitude of amp. If amp is not given, default amp = 1. If offset is not given, it is set to the average of g. norm=true yields gn = amp ] (g - offset)/max(abs(g - offset)). norm=(laplace=true,) normalizes using a cumulative Laplace distribution yielding *gn = amp * (1.0 - exp(sqrt(2) * (g - offset)/ sigma)), where sigma is estimated using the L1 norm of (g - offset) if it is not given. norm=(cauchy=true,) normalizes using a cumulative Cauchy distribution yielding gn = (2 * amp / PI) * atan( (g - offset)/ sigma) where sigma is estimated using the L2 norm of (g - offset) if it is not given. To use offset and/or sigma from a previous calculation, leave out the argument to the modifier(s) (e.g. set them to \"\") and see save_stats for usage.\nQ or save_stats : – save_stats=:save | save_stats=:read | save_stats=:Read\n  Controls how normalization via norm is carried out.  When multiple grids should be normalized the same way (i.e., with the same offset and/or sigma), we must pass these values via norm.  However, this is inconvenient if we compute these values from a grid. Use save_stats=:save to save the results of offset and sigma to a statistics file; if grid output is not needed for this run then specify outgrid=:none. For subsequent runs, just use save_stats=:read to read these values. Using save_stats=:Read will read then delete the statistics file. See TILES for more information. (Warning: this option is available on GMT6 only)\nR or region or limits : – limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),) | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more\\    will select a subsection of working grid. If this subsection exceeds the boundaries of the grid, only the common region will be extracted. More at limits\nS or slopegrid :\n  Name of output grid file with scalar magnitudes of gradient vectors. Requires find_dir but makes outgrid optional. \nV or verbose : – verbose=true | verbose=level\n Select verbosity level. More at verbose","category":"page"},{"location":"grdgradient/#Grid-Distance-Units","page":"grdgradient","title":"Grid Distance Units","text":"","category":"section"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"If the grid does not have meter as the horizontal unit, append +u\\ unit to the input file name to convert from the specified unit to meter. If your grid is geographic, convert distances to meters by supplying colinfo=:g instead.","category":"page"},{"location":"grdgradient/#Hints","page":"grdgradient","title":"Hints","text":"","category":"section"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"If you don't know what norm options to use to make an intensity file for grdimage and grdview, a good first try is norm=e0.6.","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"Usually 255 shades are more than enough for visualization purposes. You can save 75% disk space by appending =nb/a to the output filename outgrid.","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"If you want to make several illuminated maps of subregions of a large data set, and you need the illumination effects to be consistent across all the maps, use the norm option and supply the same value of sigma and offset to grdgradient for each map. A good guess is offset = 0 and sigma found by grdinfo -L2 or -L1 applied to an unnormalized gradient grd.","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"If you simply need the x- or y-derivatives of the grid, use grdmath.","category":"page"},{"location":"grdgradient/#Tiles","page":"grdgradient","title":"Tiles","text":"","category":"section"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"For very large datasets (or very large plots) you may need to break the job into multiple tiles. It is then important that the normalization of the intensities are handled the same way for each tile. By default, offset and sigma are recalculated for each tile. Hence, different tiles of the same large grid will compute different offset and sigma values. Thus, the intensity for the same directional slope will be different across the final map. This inconsistency can lead to visible changes in image appearance across tile seams. The way to ensure compatible results is to specify the same offset and sigma via the modifiers to norm. However, if these need to be estimated from the large grid then the save_stats option can help: Run grdgradient on the full grid (or as large portion of the grid that your computer can handle) and specify save_stats=:save to create a statistics file with the resulting offset and sigma. Then, for each of your grid tile calculations, give norm=(offset=\"\",) and/or norm=(sigma=\"\",) without arguments to norm and specify save_stats=:read. This option will read the values from the hidden statistics file and use them in the normalization. If you use save_stats=:Read for the final tile then the statistics file is removed after use.","category":"page"},{"location":"grdgradient/#Examples","page":"grdgradient","title":"Examples","text":"","category":"section"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"To make a file for illuminating the data in geoid.nc using exp- normalized gradients in the range [-0.6,0.6] imitating light sources in the north and west directions:","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"    G = grdgradient(\"geoid.nc\", azim=(0,270), norm=(laplace=true, amp=0.6), Verbose=true)","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"To find the azimuth orientations of seafloor fabric in the file topo.nc:","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"    G = grdgradient(\"topo.nc\", find_dir=:no);","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"To determine the offset and sigma suitable for normalizing the intensities from topo.nc, do","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"    grdgradient(\"topo.nc\", azim=30, norm=:t0.6, save_stats=:save);","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"To use the previously determined offset and sigma to normalize the intensities in tile_3.nc, do","category":"page"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"    Gtile_3_int = grdgradient(\"tile_3.nc\", azim=30, norm=(cauchy=true,offset=\"\",sigma=\"\"),save_stats=:read)","category":"page"},{"location":"grdgradient/#References","page":"grdgradient","title":"References","text":"","category":"section"},{"location":"grdgradient/","page":"grdgradient","title":"grdgradient","text":"Horn, B.K.P., Hill-Shading and the Reflectance Map, Proceedings of the IEEE, Vol. 69, No. 1, January 1981, pp. 14-47. (http://people.csail.mit.edu/bkph/papers/Hill-Shading.pdf)","category":"page"},{"location":"justify/#Justify","page":"Justify","title":"Justify","text":"","category":"section"},{"location":"justify/","page":"Justify","title":"Justify","text":"justify = \"code\"","category":"page"},{"location":"justify/","page":"Justify","title":"Justify","text":"Where code is a two chars code made up of the initials of the six:","category":"page"},{"location":"justify/","page":"Justify","title":"Justify","text":"three letter codes for horizontal (Left, Center, Right)\nvertical (Top, Middle, Bottom) alignments.","category":"page"},{"location":"justify/","page":"Justify","title":"Justify","text":"This gives the Nine anchor points relative to any text string may be specified by combining any of three letter codes for horizontal and vertical.","category":"page"},{"location":"justify/","page":"Justify","title":"Justify","text":"See here for graphical display.","category":"page"},{"location":"justify/","page":"Justify","title":"Justify","text":"Examples:","category":"page"},{"location":"justify/","page":"Justify","title":"Justify","text":"justify=\"LB\"\nfont=:CM","category":"page"},{"location":"gallery/historic/ex18/#Volumes-and-Spatial-Selections","page":"Volumes and Spatial Selections","title":"Volumes and Spatial Selections","text":"","category":"section"},{"location":"gallery/historic/ex18/","page":"Volumes and Spatial Selections","title":"Volumes and Spatial Selections","text":"    using Printf\n    # Define location of Pratt seamount and the 400 km diameter\n    pratt = [-142.65 56.25 400]\n\n    # First generate gravity image w/ shading, label Pratt, and draw a circle\n    # of radius = 200 km centered on Pratt.\n    grav_cpt = makecpt(color=:rainbow, range=(-60,60));\n    grdimage(\"@AK_gulf_grav.nc\", shade=:default, frame=(annot=2,ticks=1),\n             proj=:merc, figsize=14, x_off=3.8, y_off=14.9)\n    coast!(region=\"@AK_gulf_grav.nc\", land=:gray, shore=:thinnest)\n    colorbar!(pos=(anchor=:BC, offset=(0,1)), xaxis=(annot=20, ticks=10), ylabel=\"mGal\")\n    text!(text_record(pratt, \"Pratt\"), pos=(anchor=(0.25,0.25),),\n          font=(12,\"Helvetica-Bold\"), justify=:LB)\n    plot!(pratt, marker=\"E-\", markerline=:thinnest)\n\n    # Then draw 10 mGal contours and overlay 50 mGal contour in green\n    grdcontour!(\"@AK_gulf_grav.nc\", cont=20, frame=(axes=:WSEn, annot=2, ticks=1), y_off=-12.3)\n    # Save 50 mGal contours to individual files, then plot them\n    grdcontour!(\"@AK_gulf_grav.nc\", cont=10, range=(49,51), dump=\"sm_%c.txt\")\n    plot!(\"sm_C.txt\", lw=:thin, lc=:green)\n    coast!(land=:gray, shore=:thinnest)\n    plot!(pratt, marker=\"E-\", markerline=:thinnest)\n\n    # Now determine centers of each enclosed seamount > 50 mGal but only plot\n    # the ones within 200 km of Pratt seamount.\n\n    # Determine mean location of each closed contour\n    centers = gmtspatial(\"sm_C.txt\", length=true, colinfo=:g)\n    rm(\"sm_O.txt\");     rm(\"sm_C.txt\")\n\n    # Only plot the ones within 200 km\n    t = gmtselect(centers, C=(pratt,\"200k\"), colinfo=:g)\n    plot!(t, marker=:Circle, ms=0.2, mc=:red, MarkerLine=:thinnest)\n    plot!(pratt, marker=:Triangle, ms=0.25, fill=:yellow, MarkerLine=:thinnest)\n\n    # Then report the volume and area of these seamounts only\n    # by masking out data outside the 200 km-radius circle\n    # and then evaluate area/volume for the 50 mGal contour\n\n    Gmask = gmt(string(\"grdmath -R \", pratt[1], \" \", pratt[2], \" SDIST =\"))\n    Gmask = grdclip(Gmask, above=(200, NaN), below=(200, 1))\n    Gtmp = gmt(\"grdmath @AK_gulf_grav.nc ? MUL =\", Gmask);\n    av   = grdvolume(Gtmp, cont=50, unit=:k);\n\n    T = text_record([\"> -149 52.5 14p 2.6i j\"\n        @sprintf(\"Volumes: %d mGal\\\\264km@+2@+\", av[1].data[3])\n        \"\"\n        @sprintf(\"Areas: %.2f km@+2@+\", av[1].data[2])])\n\n    text!(T, paragraph=true, fill=:white, pen=:thin, offset=0.75,\n          font=(14,\"Helvetica-Bold\"), justify=:LB, clearance=0.25, show=true)","category":"page"},{"location":"gallery/historic/ex18/","page":"Volumes and Spatial Selections","title":"Volumes and Spatial Selections","text":"See also GMT ex18","category":"page"},{"location":"gallery/historic/ex21/#Time-series-of-RedHat-stock-price","page":"Time-series of RedHat stock price","title":"Time-series of RedHat stock price","text":"","category":"section"},{"location":"gallery/historic/ex21/","page":"Time-series of RedHat stock price","title":"Time-series of RedHat stock price","text":"    gmtset(FORMAT_DATE_IN=\"dd-o-yy\", FORMAT_DATE_MAP=:o, FONT_ANNOT_PRIMARY=\"+10p\", FORMAT_TIME_PRIMARY_MAP=:abbreviated, PS_CHAR_ENCODING=\"ISOLatin1+\")\n\n    # Unfortunately, for time data some things must be numeric (seconds) other time strings\n    wesn = gmtinfo(\"@RHAT_price.csv\", f=:T, inc=50, per_column=true)\n\n    # This provides the min/max time as a time string (1999-08-11T00:00:00/2007-12-31T00:00:00/0.0/300.0)\n    R = gmtinfo(\"@RHAT_price.csv\", f=:T, inc=50);\t\t# The output is a cell\n    R = R[1].text[1][3:end]\n    wT, eT, sF, = split(R, '/')\n\n    # Lay down the basemap:\n    basemap(region=R, frame=(axes=:WSen, title=\"RedHat (RHT) Stock Price Trend since IPO\",\n            fill=:lightgreen), xaxis=(annot=3, annot_unit=:month, ticks=1, ticks_unit=\"month2\"),\n            yaxis=(annot=50, prefix=\"\\$ \",), xaxis2=(annot=1, annot_unit=:year),\n            figsize=(22,15), portrait=false)\n\n    # Plot main window with open price as red line over yellow envelope of low/highs\n    RHAT1_env = gmtconvert(\"@RHAT_price.csv\", outcol=\"0,2\", colinfo=\"0T\")\n    RHAT2_env = gmtconvert(\"@RHAT_price.csv\", outcol=\"0,3\", colinfo=\"0T\",\n                           reverse=true, supress=true)\n    RHAT_env = [RHAT1_env[1].data; RHAT2_env[1].data]\n    plot!(RHAT_env, fill=:yellow)\n    plot!(\"@RHAT_price.csv\", lw=:thin, lc=:red)\n\n    # Draw P Wessel's purchase price as line and label it.\n    fid = open(\"RHAT.pw\",\"w\")\n    println(fid, \"05-May-00\t0\")\n    println(fid, \"05-May-00\t300\")\n    close(fid)\n    plot!(\"RHAT.pw\", lw=:thinner, ls=:dashed, f=:T)\n    fid = open(\"RHAT.pw\",\"w\")\n    println(fid, \"01-Jan-99\t25\")\n    println(fid, \"01-Jan-02\t25\")\n    close(fid)\n    plot!(\"RHAT.pw\", lw=:thick, ls=:dashed, f=:T)\n    text!(text_record([wesn[1].data[1] 25], \"PW buy\"), offset=(3.8, 0.15),\n          font=(12, \"Bookman-Demi\"), justify=:LB)\n\n    # Draw P Wessel's sales price as line and label it.\n    fid = open(\"RHAT.pw\",\"w\")\n    println(fid, \"25-Jun-07\t0\")\n    println(fid, \"25-Jun-07\t300\")\n    close(fid)\n    plot!(\"RHAT.pw\", lw=:thinner, ls=:dashed, f=:T)\n    fid = open(\"RHAT.pw\",\"w\")\n    println(fid, \"01-Aug-06\t23.8852\");\n    println(fid, \"01-Jan-08\t23.8852\");\n    close(fid);\n    plot!(\"RHAT.pw\", lw=:thick, ls=:dashed, f=:T)\n    text!(text_record([wesn[1].data[2] 23.8852], \"PW sell\"), offset=(-2, 0.15),\n          font=(12, \"Bookman-Demi\"), justify=:RB)\n\n    # Get smaller region for insert for trend since 2004\n    R = \"2004T/\" * eT * '/' * sF * \"/40\"\n\n    # Lay down the basemap, using Finnish annotations and place the insert in the upper right\n    basemap!(region=R, frame=(axes=:ESw, fill=:lightblue),\n             xaxis=(annot=3, annot_unit=:month, ticks=3, ticks_unit=\"month2\"),\n             yaxis=(annot=10, prefix=\"\\$ \",),\n             xaxis2=(annot=1, annot_unit=:year), proj=:linear, figsize=(15, 7.5),\n             x_off=7, y_off=7.5, par=(:GMT_LANGUAGE, :fi))\n\n    # Again, plot close price as red line over yellow envelope of low/highs\n    plot!(RHAT_env, fill=:yellow)\n    plot!(\"@RHAT_price.csv\", lw=:thin, lc=:red)\n\n    # Draw P Wessel's sales price as dashed line\n    plot!(\"RHAT.pw\", lw=:thick, ls=:dashed, f=:T)\n\n    # Mark sales date\n    fid = open(\"RHAT.pw\",\"w\")\n    println(fid, \"25-Jun-07\t0\")\n    println(fid, \"25-Jun-07\t300\")\n    close(fid)\n    plot!(\"RHAT.pw\", lw=:thinner, ls=:dashed, f=:T, show=1)\n    rm(\"gmt.conf\")\n    rm(\"RHAT.pw\")","category":"page"},{"location":"gallery/historic/ex21/","page":"Time-series of RedHat stock price","title":"Time-series of RedHat stock price","text":"See also GMT ex21","category":"page"},{"location":"fonts/#Setting-fonts","page":"Setting fonts","title":"Setting fonts","text":"","category":"section"},{"location":"fonts/","page":"Setting fonts","title":"Setting fonts","text":"font = (size, fontname, color)","category":"page"},{"location":"fonts/","page":"Setting fonts","title":"Setting fonts","text":"A text font is composed of three parts: 1) a size; 2) a fontname; 3) the font *color. The size may be a scalar, a string with the units appended or a tuple with (size, units). The fontname is a string or symbol with the font name. e.g \"Helvetica\". See here for the available font names. The color is a color element, See Setting color","category":"page"},{"location":"fonts/","page":"Setting fonts","title":"Setting fonts","text":"Both fontname and color are optional. So a font=10 is a valid setting, meaning a default font of size 10 points. It's also valid to provide a all font parametrs in a string using the compact GMT syntax. The GMT docs has further details on this option.","category":"page"},{"location":"fonts/","page":"Setting fonts","title":"Setting fonts","text":"Examples:","category":"page"},{"location":"fonts/","page":"Setting fonts","title":"Setting fonts","text":"font=\"24p\"\nfont=(\"14p\",:red)\nfont=(12, :Helvetica, (30,20,180))\nfont=\"12p,Helvetica-Bold,red\"","category":"page"},{"location":"gallery/scripts_agu/error_bars/#Error_bars","page":"Error_bars","title":"Error_bars","text":"","category":"section"},{"location":"gallery/scripts_agu/error_bars/","page":"Error_bars","title":"Error_bars","text":"Plot error bars with different color control","category":"page"},{"location":"gallery/scripts_agu/error_bars/","page":"Error_bars","title":"Error_bars","text":"C = makecpt(cmap=:rainbow, range=(0,6,1));\nt = [1 1 1 1\n    2 2 2 1\n    3 3 3 1\n    4 4 4 1\n    5 5 5 1];\nplot(t, limits=(0,6,0,6), figsize=7, frame=:noannot, marker=:circle, ms=0.5,\n     color=C, ml=0.25, error_bars=(x=:x, pen=(2,:red)), y_off=5)\nplot!(t, frame=:noannot, marker=:circle, ms=0.5, color=C, ml=0.25,\n      error_bars=(y=:y, pen=1, cline=true), x_off=7.5)\n# Use the color map to paint the symbol marker line\nplot!(t, frame=:noannot, marker=:circle, ms=0.5, color=C,\n      ml=(lw=5, colored=true), error_bars=(y=:y, pen=1, csymbol=true),\n      x_off=-7.5, y_off=7.5)\n# Pretend our data array has only the coordinates and pass color col & errors via args\ntt = t[:,1:2]\nplot!(tt, frame=:noannot, marker=:circle, ms=0.5, color=C, mz=[1 2 3 4 5],\n      ml=(0.25,:red), error_bars=(x=ones(5,1), pen=1, cline=true),\n      x_off=7.5, show=true)","category":"page"},{"location":"gallery/scripts_agu/error_bars/","page":"Error_bars","title":"Error_bars","text":"<img src=\"../figs/error_bars.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/mapprojs/","page":"Map projections","title":"Map projections","text":"Albers equal-area conic Equidistant conic Lambert conformal conic (American) polyconic\n[(Image: )]Albers conic equal-area projection [(Image: )]Equidistant conic [(Image: )]Lambert conic conformal [(Image: )](American) polyconic projection","category":"page"},{"location":"gallery/mapprojs/","page":"Map projections","title":"Map projections","text":"Lambert Azimuthal Equal-Area (rect) Lambert Azimuthal Equal-Area (hemi) Polar Stereographic Rectangular stereographic\n[(Image: )]Rectangular map [(Image: )]Hemisphere map [(Image: )]Polar Stereographic Map [(Image: )]Rectangular stereographic map","category":"page"},{"location":"gallery/mapprojs/","page":"Map projections","title":"Map projections","text":"Perspective Orthographic Lambert conformal conic Gnomonic\n[(Image: )]Perspective [(Image: )]Orthographic [(Image: )]Azimuthal Equidistant [(Image: )]Gnomonic","category":"page"},{"location":"gallery/mapprojs/","page":"Map projections","title":"Map projections","text":"Mercator Transverse Mercator Oblique Mercator Cassini\n[(Image: )]Mercator [(Image: )]Transverse Mercator [(Image: )]Oblique Mercator [(Image: )]Cassini cylindrical","category":"page"},{"location":"gallery/mapprojs/","page":"Map projections","title":"Map projections","text":"Cylindrical equidistant Cylindrical equal-area Miller Cylindrical Cylindrical stereographic\n[(Image: )]Cylindrical equidistant [(Image: )]Cylindrical equal-area [(Image: )]Miller Cylindrical [(Image: )]Cylindrical stereographic","category":"page"},{"location":"gallery/mapprojs/","page":"Map projections","title":"Map projections","text":"Hammer Mollweide Winkel Tripel Robinson\n[(Image: )]Hammer [(Image: )]Mollweide [(Image: )]Winkel Tripel [(Image: )]Robinson","category":"page"},{"location":"gallery/mapprojs/","page":"Map projections","title":"Map projections","text":"Eckert IV Sinusoidal Sinusoidal int Van der Grinten\n[(Image: )]Eckert IV and VI [(Image: )]Sinusoidal [(Image: )]Sinusoidal [(Image: )]Van der Grinten","category":"page"},{"location":"usage/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"usage/","page":"Introduction","title":"Introduction","text":"Access to GMT from Julia is accomplished via a main function (also called gmt), which offers full access to all of GMT’s ~140 modules as well as fundamental import, formatting, and export of GMT data objects. Internally, the GMT5 C API defines six high-level data structures (GMT6 will define only five) that handle input and output of data via GMT modules. These are data tables (representing one or more sets of points, lines, or polygons), grids (2-D equidistant data matrices), raster images (with 1–4 color bands), raw PostScript code, text tables (free-form text/data mixed records) and color palette tables (i.e., color maps). Correspondingly, we have defined five data structures that we use at the interface between GMT and Julia via the gmt function. The GMT.jl wrapper is responsible for translating between the GMT structures and native Julia structures, which are:","category":"page"},{"location":"usage/","page":"Introduction","title":"Introduction","text":"Grids: Many tools consider equidistant grids a particular data type and numerous file formats exist for saving such data. Because GMT relies on GDAL we are able to read and write almost all such formats in addition to a native netCDF4 format that complies with both the COARDS and CF netCDF conventions. We have designed a native Julia grid structure Grid type that holds header information from the GMT grid as well as the data matrix representing the gridded values. These structures may be passed to GMT modules that expect grids and are returned from GMT modules that produce such grids. In addition, we supply a function to convert a matrix and some metadata into a grid structure.\nImages: The raster image shares many characteristics with the grid structure except the bytes representing each node reflect gray shade, color bands (1, 3, or 4 for indexed, RGB and RGBA, respectively), and possibly transparency values. We therefore represent images in another native structure Image type that among other items contains three components: The image matrix, a color map (present for indexed images only), and an alpha matrix (for images specifying transparency on a per-pixel level). As for grids, a wrapper function creating the correct structure is available.\nSegments: GMT considers point, line, and polygon data to be organized in one or more segments in a data table. Modules that return segments uses a native Julia segment structure Dataset type that holds the segment data, which may be either numerical, text, or both; it also holds a segment header string which GMT uses to pass metadata. Thus, GMT modules returning segments will typically produce arrays of segments and you may pass these to any other module expecting points, lines, or polygons or use them directly in Julia. Since a matrix is one fundamental data type you can also pass a matrix directly to GMT modules as well. Consequently, it is very easy to pass data from Julia into GMT modules that process data tables as well as to receive data segments from GMT modules that process and produce data tables as output.\nColor palettes: GMT uses its flexible Color Palette Table (CPT) format to describe how the color (or pattern) of symbols, lines, polygons or grids should vary as a function of a state variable. In Julia, this information is provided in another structure CPT type that holds the color map as well as an optional alpha array for transparency values. Like grids, these structures may be passed to GMT modules that expect CPTs and will be returned from GMT modules that normally would produce CPT files.\nPostScript: While most users of the GMT.jl wrapper are unlikely to manipulate PostScript directly, it allows for the passing of PostScript via another data structure Postscript type.","category":"page"},{"location":"usage/","page":"Introduction","title":"Introduction","text":"Given this design the Julia wrapper is designed to work in two distinct ways. ","category":"page"},{"location":"usage/","page":"Introduction","title":"Introduction","text":"The first way, referred as the monolithic, is the more feature reach and follows closely the GMT usage from shell(s) command line but still provide all the facilities of the Julia language. See the Monolithic for the Reference on how to use the Package.\nThe second way uses an upper level set of functions that abstract aspects that make the monolithic usage more complex. It provides an interface to some of the GMT modules using a option=val list type syntax. This makes it more appropriate for new commers but it won't release you from understanding the monolithic way. See the By Modules","category":"page"},{"location":"proj_examples/#GMT-Map-Projections","page":"Map projections","title":"GMT Map Projections","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"GMT implements more than 30 different projections. They all project the input coordinates longitude and latitude to positions on a map. In general, x’ = f(x,y,z) and y’ = g(x,y,z), where z is implicitly given as the radial vector length to the (x,y) point on the chosen ellipsoid. The functions f and g can be quite nasty and we will refrain from presenting details in this document. The interested read is referred to Snyder [1987] [20]. We will mostly be using the coast command to demonstrate each of the projections. GMT map projections are grouped into four categories depending on the nature of the projection. The groups are","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Conic map projections\nAzimuthal map projections\nCylindrical map projections\nMiscellaneous projections","category":"page"},{"location":"proj_examples/#Conic-projections","page":"Map projections","title":"Conic projections","text":"","category":"section"},{"location":"proj_examples/#Albers-conic-equal-area-projection","page":"Map projections","title":"Albers conic equal-area projection","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"This projection, developed by Albers in 1805, is predominantly used to map regions of large east-west extent, in particular the United States. It is a conic, equal-area projection, in which parallels are unequally spaced arcs of concentric circles, more closely spaced at the north and south edges of the map. Meridians, on the other hand, are equally spaced radii about a common center, and cut the parallels at right angles. Distortion in scale and shape vanishes along the two standard parallels. Between them, the scale along parallels is too small; beyond them it is too large. The opposite is true for the scale along meridians. To define the projection in GMT you need to provide the following information:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: aea, Albers, GMT code -> B (width) b (scale)\nLongitude and latitude of the projection center.\nTwo standard parallels.\nMap scale in cm/degree or 1:xxxxx notation, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Note that you must include the 1: if you choose to specify the scale that way. E.g., you can say 0.5 which means 0.5 cm/degree or 1:200000 which means 1 cm on the map equals 200,000 cm along the standard parallels. The projection center defines the origin of the rectangular map coordinates. As an example we will make a map of the region near Taiwan. We choose the center of the projection to be at 125ºE/20ºN and 25ºN and 45ºN as our two standard parallels. We desire a map that is 12 cm wide (the dafault). The complete command needed to generate the map below is therefore given by:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=[110 140 20 35],                                   # The Map limits\t\n      proj=(name=:Albers, center=[125 20], parallels=[25 45]),  # The projection parameters\n      frame=:ag,          # Tell it to set annotations and grid lines automatically\n      resolution=:low,    # Use the low resolution coastlines\n      area=250,           # Do not plot polygons with areas < 250 km^2\n      land=:green,        # Paint land with green\n      shore=:thinnest,    # Coastlines are drwan with a 0.1 pt thickness\n      show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_albers.png\" alt=\"GMT_Albers\" title=\"Albers equal-area conic map projection\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Equidistant-conic","page":"Map projections","title":"Equidistant conic","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The equidistant conic projection was described by the Greek philosopher Claudius Ptolemy about A.D. 150. It is neither conformal or equal-area, but serves as a compromise between them. The scale is true along all meridians and the standard parallels. To select this projection in GMT you must provide the same information as for the other conic projection, i.e.,","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: eqdc, conicEquidistant, GMT code -> D (width) d (scale)\nLongitude and latitude of the projection center.\nTwo standard parallels.\nMap scale in cm/degree or 1:xxxxx notation, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The equidistant conic projection is often used for atlases with maps of small countries. As an example, we generate a map of Cuba:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=[-88 -70 18 24], proj=(name=:eqdc, center=[-79 21], parallels=[19 23]),\n      frame=:ag, res=:intermediate, borders=(type=1,pen=(\"thick\",\"red\")), land=:green,\n      shore=:thinnest, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_equidistant_conic.png\" alt=\"GMT_equidistant_conic\" title=\"Equidistant conic map projection\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Lambert-conic-conformal","page":"Map projections","title":"Lambert conic conformal","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"This conic projection was designed by the Alsatian mathematician Johann Heinrich Lambert (1772) and has been used extensively for mapping of regions with predominantly east-west orientation, just like the Albers projection. Unlike the Albers projection, Lambert’s conformal projection is not equal-area. The parallels are arcs of circles with a common origin, and meridians are the equally spaced radii of these circles. As with Albers projection, it is only the two standard parallels that are distortion-free. To select this projection in GMT you must provide the same information as for the Albers projection, i.e.,","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: lcc, lambertConic, GMT code -> L (width) l (scale)\nLongitude and latitude of the projection center.\nTwo standard parallels.\nMap scale in cm/degree or 1:xxxxx notation, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The Lambert conformal projection has been used for basemaps for all the 48 contiguous States with the two fixed standard parallels 33ºN and 45ºN. We will generate a map of the continental USA using these parameters. Note that with all the projections you have the option of selecting a rectangular border rather than one defined by meridians and parallels. Here, we choose the regular WESN region, a “fancy” basemap frame, and use degrees west for longitudes. The generating command used is","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=[-130 -70 24 52], proj=(name=:lambertConic, center=[-100 35], parallels=[33 45]),\n      frame=:ag, res=:low, borders=((type=1, pen=(\"thick\",\"red\")), (type=2, pen=(\"thinner\",))),\n      area=500, land=:tan, water=:blue, shore=(:thinnest,:white), show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_lambert_conic.png\" alt=\"GMT_lambert_conic\" title=\"Lambert conformal conic map projection\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#(American)-polyconic-projection","page":"Map projections","title":"(American) polyconic projection","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The polyconic projection, in Europe usually referred to as the American polyconic projection, was introduced shortly before 1820 by the Swiss-American cartographer Ferdinand Rodulph Hassler (1770–1843). As head of the Survey of the Coast, he was looking for a projection that would give the least distortion for mapping the coast of the United States. The projection acquired its name from the construction of each parallel, which is achieved by projecting the parallel onto the cone while it is rolled around the globe, along the central meridian, tangent to that parallel. As a consequence, the projection involves many cones rather than a single one used in regular conic projections.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The polyconic projection is neither equal-area, nor conformal. It is true to scale without distortion along the central meridian. Each parallel is true to scale as well, but the meridians are not as they get further away from the central meridian. As a consequence, no parallel is standard because conformity is lost with the lengthening of the meridians.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: poly, Polyconic, GMT code -> Poly (width) poly (scale)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Below we reproduce the illustration by Snyder [1987], with a gridline every 10 and annotations only every 30º in longitude:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=(-180,-20,0,90), proj=:poly, xaxis=(annot=30,grid=10), yaxis=(annot=10,grid=10),\n      res=:crude, area=1000, land=:lightgray, shore=:thinnest, figsize=10, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_polyconic.png\" alt=\"GMT_Polyconic\" title=\"(American) polyconic projection\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Azimuthal-projections","page":"Map projections","title":"Azimuthal projections","text":"","category":"section"},{"location":"proj_examples/#Lambert-Azimuthal-Equal-Area","page":"Map projections","title":"Lambert Azimuthal Equal-Area","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"This projection was developed by Lambert in 1772 and is typically used for mapping large regions like continents and hemispheres. It is an azimuthal, equal-area projection, but is not perspective. Distortion is zero at the center of the projection, and increases radially away from this point. To define this projection in GMT you must provide the following information:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: laea, lambertAzimuthal, GMT code -> A (width) a (scale)\nLongitude and latitude of the projection center.\nOptionally, the horizon, i.e., the number of degrees from the center to the edge (<= 180, default is 90).\nScale as 1:xxxxx or as radius/latitude where radius is the projected distance on the map from projection center to an oblique latitude where 0 would be the oblique Equator, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Two different types of maps can be made with this projection depending on how the region is specified. We will give examples of both types.","category":"page"},{"location":"proj_examples/#Rectangular-map","page":"Map projections","title":"Rectangular map","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"In this mode we define our region by specifying the longitude/latitude of the lower left and upper right corners instead of the usual west, east, south, north boundaries. The reason for specifying our area this way is that for this and many other projections, lines of equal longitude and latitude are not straight lines and are thus poor choices for map boundaries. Instead we require that the map boundaries be rectangular by defining the corners of a rectangular map boundary. Using 0ºE/40ºS (lower left) and 60ºE/10ºS (upper right) as our corners we try","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":".. Este so funciona uma vez por causa do -Gp. Depois e preciso fazer \"destroy\"","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=\"0/-40/60/-10+r\", proj=(name=:laea, center=[30,-30]), frame=:ag, res=:low,\n      area=500, land=(pattern=10,dpi=300), shore=:thinnest, figsize=10, show=1)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/lambert_az_rect.png\" alt=\"Lambert_az_rect\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Note that an +r is appended to the region option to inform GMT that the region has been selected using the rectangle technique, otherwise it would try to decode the values as west, east, south, north and report an error since east < west.","category":"page"},{"location":"proj_examples/#Hemisphere-map","page":"Map projections","title":"Hemisphere map","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Here, you must specify the world as your region. E.g., to obtain a hemisphere view that shows the Americas, try","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:g, proj=(name=:laea, center=[280,30]), frame=:g, res=:crude, area=1000,\n      land=:navy, figsize=8, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_lambert_az_hemi.png\" alt=\"GMT_Lambert_az_hemi\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Stereographic-Equal-Angle","page":"Map projections","title":"Stereographic Equal-Angle","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"This is a conformal, azimuthal projection that dates back to the Greeks. Its main use is for mapping the polar regions. In the polar aspect all meridians are straight lines and parallels are arcs of circles. While this is the most common use it is possible to select any point as the center of projection. The requirements are","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: stere, Stereographic, GMT code -> S (width) s (scale)\nLongitude and latitude of the projection center.\nOptionally, the horizon, i.e., the number of degrees from the center to the edge (< 180, default is 90).\nScale as 1:xxxxx (true scale at pole), slat/1:xxxxx (true scale at standard parallel slat), or radius/latitude where radius is distance on map in inches from projection center to a particular oblique latitude, or simply map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"A default map scale factor of 0.9996 will be applied by default. However, the setting is ignored when a standard parallel has been specified since the scale is then implicitly given. We will look at two different types of maps.","category":"page"},{"location":"proj_examples/#Polar-Stereographic-Map","page":"Map projections","title":"Polar Stereographic Map","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"In our first example we will let the projection center be at the north pole. This means we have a polar stereographic projection and the map boundaries will coincide with lines of constant longitude and latitude. An example is given by","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=(-30,30,60,72), proj=(name=:Stereographic, center=[0,90], paralles=60),\n      frame=:a10g, res=:low, area=250, land=:royalblue, water=:seashell,\n      figscale=\"1:30000000\", show=1)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_stereographic_polar.png\" alt=\"GMT_stereographic_polar\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Rectangular-stereographic-map","page":"Map projections","title":"Rectangular stereographic map","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"As with Lambert’s azimuthal equal-area projection we have the option to use rectangular boundaries rather than the wedge-shape typically associated with polar projections. This choice is defined by selecting two points as corners in the rectangle and appending an +r to the region option. This command produces a map as presented in","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=\"-25/59/70/72+r\", proj=(name=:stereographic, center=(10,90)), frame=:a20g, res=:low,\n      area=250, land=:darkbrown, shore=:thinnest, water=:lightgray, figsize=11, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_stereographic_rect.png\" alt=\"GMT_stereographic_rect\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#General-stereographic-map","page":"Map projections","title":"General stereographic map","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"In terms of usage this projection is identical to the Lambert azimuthal equal-area projection. Thus, one can make both rectangular and hemispheric maps. Our example shows Australia using a projection pole at 130ºE/30ºS. The command used was","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=\"100/-42/160/-8r\", proj=(name=:stereographic, center=(130,-30)), frame=:ag, res=:low,\n      area=500, land=:green, ocean=:lightblue, shore=:thinnest, figsize=10, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_stereographic_general.png\" alt=\"GMT_stereographic_general\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Perspective","page":"Map projections","title":"Perspective","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The perspective projection imitates in 2 dimensions the 3-dimensional view of the earth from space. The implementation in GMT is very flexible, and thus requires many input variables. Those are listed and explained below, with the values used in figure below  between brackets.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: GMT code -> G (width) g (scale)\nLongitude and latitude of the projection center (4ºE/52ºN).\nAltitude of the viewer above sea level in kilometers (230 km). If this value is less than 10, it is assumed to be the distance of the viewer from the center of the earth in earth radii. If an +r is appended, it is the distance from the center of the earth in kilometers.\nAzimuth in degrees (90, due east). This is the direction in which you are looking, measured clockwise from north.\nTilt in degrees (60). This is the viewing angle relative to zenith. So a tilt of 0º is looking straight down, 60º is looking from 30º above the horizon.\nTwist in degrees (180). This is the boresight rotation (clockwise) of the image. The twist of 180º in the example mimics the fact that the Space Shuttle flies upside down.\nWidth and height of the viewpoint in degrees (60). This number depends on whether you are looking with the naked eye (in which case you view is about 60º wide), or with binoculars, for example.\nScale as 1:xxxxx or as radius/latitude where radius is distance on map in inches from projection center to a particular oblique latitude, or map width (10 cm).","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The imagined view of northwest Europe from a Space Shuttle at 230 km looking due east is thus accomplished by the following coast command:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:g, proj=\"G4/52/230/90/60/180/60/60\", xaxis=(annot=2,grid=2), yaxis=(annot=1,grid=1),\n      rivers=:all, res=:intermediate, land=:lightbrown, ocean=:lightblue, shore=:thinnest, figsize=10,\n      par=(:MAP_ANNOT_MIN_SPACING,0.65), show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_perspective.png\" alt=\"GMT_perspective\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Orthographic","page":"Map projections","title":"Orthographic","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The orthographic azimuthal projection is a perspective projection from infinite distance. It is therefore often used to give the appearance of a globe viewed from outer space. As with Lambert’s equal-area and the stereographic projection, only one hemisphere can be viewed at any time. The projection is neither equal-area nor conformal, and much distortion is introduced near the edge of the hemisphere. The directions from the center of projection are true. The projection was known to the Egyptians and Greeks more than 2,000 years ago. Because it is mainly used for pictorial views at a small scale, only the spherical form is necessary.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"To specify the orthographic projection the same options -Jg or -JG as the perspective projection are used, but with fewer variables to supply:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: ortho, Ortographic, GMT code -> G (width) g (scale)\nLongitude and latitude of the projection center.\nOptionally, the horizon, i.e., the number of degrees from the center to the edge (<= 90, default is 90).\nScale as 1:xxxxx or as radius/latitude where radius is distance on map in inches from projection center to a particular oblique latitude, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Our example of a perspective view centered on 75ºW/40ºN can therefore be generated by the following coast command:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:g, proj=(name=:ortho, center=(-75,41)), frame=:g, res=:crude, area=5000,\n      land=:pink, ocean=:thistle, figsize=10, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_orthographic.png\" alt=\"GMT_orthographic\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Azimuthal-Equidistant","page":"Map projections","title":"Azimuthal Equidistant","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The most noticeable feature of this azimuthal projection is the fact that distances measured from the center are true. Therefore, a circle about the projection center defines the locus of points that are equally far away from the plot origin. Furthermore, directions from the center are also true. The projection, in the polar aspect, is at least several centuries old. It is a useful projection for a global view of locations at various or identical distance from a given point (the map center).","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"To specify the azimuthal equidistant projection you must supply:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: aeqd, azimuthalEquidistant, GMT code -> E (width) e (scale)\nLongitude and latitude of the projection center.\nOptionally, the horizon, i.e., the number of degrees from the center to the edge (<= 180, default is 180).\nScale as 1:xxxxx or as radius/latitude where radius is distance on map in inches from projection center to a particular oblique latitude, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Our example of a global view centered on 100ºW/40ºN can therefore be generated by the following coast command. Note that the antipodal point is 180º away from the center, but in this projection this point plots as the entire map perimeter:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:g, proj=(name=:azimuthalEquidistant, center=(-100,40)), frame=:g,\n      res=:crude, area=10000, land=:lightgray, shore=:thinnest, figsize=10, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_az_equidistant.png\" alt=\"GMT_az_equidistant\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Gnomonic","page":"Map projections","title":"Gnomonic","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The Gnomonic azimuthal projection is a perspective projection from the center onto a plane tangent to the surface. Its origin goes back to the old Greeks who used it for star maps almost 2500 years ago. The projection is neither equal-area nor conformal, and much distortion is introduced near the edge of the hemisphere; in fact, less than a hemisphere may be shown around a given center. The directions from the center of projection are true. Great circles project onto straight lines. Because it is mainly used for pictorial views at a small scale, only the spherical form is necessary.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"To specify the Gnomonic projection you must supply:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: gnom, Gnomonic, GMT code -> F (width) f (scale)\nLongitude and latitude of the projection center.\nOptionally, the horizon, i.e., the number of degrees from the center to the edge (< 90, default is 60).\nScale as 1:xxxxx or as radius/latitude where radius is distance on map in cm from projection center to a particular oblique latitude, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Using a horizon of 60, our example of this projection centered on 120ºW/35ºN can therefore be generated by the following command:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:g, proj=(name=:Gnomonic, center=(-120,35), horizon=60),\n      frame=(annot=30, grid=15), res=:crude, area=10000, land=:tan, ocean=:cyan,\n      shore=:thinnest, figsize=10, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_gnomonic.png\" alt=\"GMT_gnomonic\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Cylindrical-projections","page":"Map projections","title":"Cylindrical projections","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Cylindrical projections are easily recognized for its shape: maps are rectangular and meridians and parallels are straight lines crossing at right angles. But that is where similarities between the cylindrical projections supported by GMT (Mercator, transverse Mercator, universal transverse Mercator, oblique Mercator, Cassini, cylindrical equidistant, cylindrical equal-area, Miller, and cylindrical stereographic projections) stops. Each have a different way of spacing the meridians and parallels to obtain certain desirable cartographic properties.","category":"page"},{"location":"proj_examples/#Mercator","page":"Map projections","title":"Mercator","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Probably the most famous of the various map projections, the Mercator projection takes its name from the Flemish cartographer Gheert Cremer, better known as Gerardus Mercator, who presented it in 1569. The projection is a cylindrical and conformal, with no distortion along the equator. A major navigational feature of the projection is that a line of constant azimuth is straight. Such a line is called a rhumb line or loxodrome. Thus, to sail from one point to another one only had to connect the points with a straight line, determine the azimuth of the line, and keep this constant course for the entire voyage. The Mercator projection has been used extensively for world maps in which the distortion towards the polar regions grows rather large, thus incorrectly giving the impression that, for example, Greenland is larger than South America. In reality, the latter is about eight times the size of Greenland. Also, the Former Soviet Union looks much bigger than Africa or South America. One may wonder whether this illusion has had any influence on U.S. foreign policy.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"In the regular Mercator projection, the cylinder touches the globe along the equator. Other orientations like vertical and oblique give rise to the Transverse and Oblique Mercator projections, respectively. We will discuss these generalizations following the regular Mercator projection.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The regular Mercator projection requires a minimum of parameters. To use it in GMT programs you supply this information (the first two items are optional and have defaults):","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: merc, Mercator, GMT code -> M (width) m (scale)\nCentral meridian [Middle of your map].\nStandard parallel for true scale [Equator]. When supplied, central meridian must be supplied as well.\nScale along the equator in cm/degree or 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Our example presents a world map at a scale of 0.012 inch pr degree which will give a map 4.32 inch wide. It was created with the command:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=(0,360,-70,70), proj=:Mercator, xaxis=(annot=60,ticks=15), yaxis=(annot=30,ticks=15),\n      res=:crude, area=:5000, land=:red, scale=0.03, par=(:MAP_FRAME_TYPE,\"fancy+\"), show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_mercator.png\" alt=\"GMT_mercator\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"While this example is centered on the Dateline, one can easily choose another configuration with the region option. A map centered on Greenwich would specify the region with region=(-180180-7070)","category":"page"},{"location":"proj_examples/#Transverse-Mercator","page":"Map projections","title":"Transverse Mercator","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The transverse Mercator was invented by Lambert in 1772. In this projection the cylinder touches a meridian along which there is no distortion. The distortion increases away from the central meridian and goes to infinity at 90º from center. The central meridian, each meridian 90º away from the center, and equator are straight lines; other parallels and meridians are complex curves. The projection is defined by specifying:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: tmerc, transverseMercator, GMT code -> T (width) t (scale)\nThe central meridian.\nOptionally, the latitude of origin (default is the equator).\nScale along the equator in cm/degree or 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The optional latitude of origin defaults to Equator if not specified. Although defaulting to 1, you can change the map scale factor via the PROJ_SCALE_FACTOR parameter. Our example shows a transverse Mercator map of south-east Europe and the Middle East with 35ºE as the central meridian:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=\"20/30/50/45r\", proj=(name=:tmerc, center=35), frame=:ag, res=:low,\n      area=250, land=:lightbrown, ocean=:seashell, shore=:thinnest, scale=0.45, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_transverse_merc.png\" alt=\"GMT_transverse_merc\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The transverse Mercator can also be used to generate a global map - the equivalent of the 360º Mercator map. Using the command","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=(0,360,-80,80), proj=(name=:tmerc, center=[330 -45]),\n      frame=(annot=30, grid=:auto, axes=:WSne), res=:crude, area=2000, land=:black,\n      water=:lightblue, figsize=9, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_TM.png\" alt=\"GMT_TM\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"we made the map illustrated in figure below. Note that when a world map is given (indicated by region=(0360-8080)), the arguments are interpreted to mean oblique degrees, i.e., the 360º range is understood to mean the extent of the plot along the central meridian, while the “south” and “north” values represent how far from the central longitude we want the plot to extend. These values correspond to latitudes in the regular Mercator projection and must therefore be less than 90.","category":"page"},{"location":"proj_examples/#Universal-Transverse-Mercator-(UTM)","page":"Map projections","title":"Universal Transverse Mercator (UTM)","text":"","category":"section"},{"location":"proj_examples/#Oblique-Mercator","page":"Map projections","title":"Oblique Mercator","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Oblique configurations of the cylinder give rise to the oblique Mercator projection. It is particularly useful when mapping regions of large lateral extent in an oblique direction. Both parallels and meridians are complex curves. The projection was developed in the early 1900s by several workers. Several parameters must be provided to define the projection. GMT offers three different definitions:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Option -Jo[a|A] or -JO[a|A]:\nName: omerc, obliqueMerc1, GMT code -> Oa (width) oa (scale)\nLongitude and latitude of projection center.\nAzimuth of the oblique equator.\nScale in cm/degree or 1:xxxxx along oblique equator, or map width.\nOption -Jo[b|B] or -JO[b|B]:\nName: omerc2, obliqueMerc2, GMT code -> Ob (width) ob (scale)\nLongitude and latitude of projection center.\nLongitude and latitude of second point on oblique equator.\nScale in cm/degree or 1:xxxxx along oblique equator, or map width.\nOption -Joc|C or -JOc|C:\nName: omercp, obliqueMerc3, GMT code -> Oc (width) oc (scale)\nLongitude and latitude of projection center.\nLongitude and latitude of projection pole.\nScale in cm/degree or 1:xxxxx along oblique equator, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"For all three definitions, the upper case A|B|C means we will allow projection poles in the southern hemisphere. These forms are only available when using the GMT letters code. Our example was produced by the command","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=\"270/20/305/25+r\", proj=(name=:omercp, center=[280 25.5], parallels=[22 69]),\n      frame=:ag, res=:i, area=250, shore=:thinnest, land=:burlywood, water=:azure,\n      rose=\"jTR+w1+f2+l+o0.4\", figsize=12, par=(FONT_TITLE=8, MAP_TITLE_OFFSET=0.12), show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_obl_merc.png\" alt=\"GMT_obl_merc\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Cassini-cylindrical","page":"Map projections","title":"Cassini cylindrical","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"This cylindrical projection was developed in 1745 by César-François Cassini de Thury for the survey of France. It is occasionally called Cassini-Soldner since the latter provided the more accurate mathematical analysis that led to the development of the ellipsoidal formulae. The projection is neither conformal nor equal-area, and behaves as a compromise between the two end-members. The distortion is zero along the central meridian. It is best suited for mapping regions of north-south extent. The central meridian, each meridian 90º away, and equator are straight lines; all other meridians and parallels are complex curves. The requirements to define this projection are:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: cass, Cassini, GMT code -> C (width) c (scale)\nLongitude and latitude of central point.\nScale in cm/degree or as 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"A detailed map of the island of Sardinia centered on the 8º45’E meridian using the Cassini projection can be obtained by running the command:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=\"7:30/38:30/10:30/41:30r\", proj=(name=:Cassini, center=[8.75 40]),\n      frame=:afg, map_scale=\"jBR+c40+w100+f+o0.4/0.5\", land=:springgreen,\n      res=:high, water=:azure, shore=:thinnest, rivers=(:all,:thinner), figsize=6,\n      par=(:FONT_LABEL,12), show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_cassini.png\" alt=\"GMT_cassini\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Cylindrical-equidistant","page":"Map projections","title":"Cylindrical equidistant","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"This simple cylindrical projection is really a linear scaling of longitudes and latitudes. The most common form is the Plate Carrée projection, where the scaling of longitudes and latitudes is the same. All meridians and parallels are straight lines. The projection can be defined by:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: eqc, PlateCarree, equidistCylindrical, GMT code -> Q (width) q (scale)\nThe central meridian [Middle of your map].\nStandard parallel [Equator].\nScale in cm/degree or as 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The first two of these are optional and have defaults. When the standard parallel is defined, the central meridian must be supplied as well.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"A world map centered on the dateline using this projection can be obtained by running the command:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:g, proj=:equidistCylindrical, frame=(annot=60, ticks=30, grid=30),\n      res=:crude, area=5000, land=:tan4, water=:lightcyan, figsize=12, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_equi_cyl.png\" alt=\"GMT_equi_cyl\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Different relative scalings of longitudes and latitudes can be obtained by selecting a standard parallel different from the equator. Some selections for standard parallels have practical properties as shown in table:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name lat\nGrafarend and Niermann, minimum linear distortion 61.7º\nRonald Miller Equirectangular 50.5º\nRonald Miller, minimum continental distortion 43.5º\nGrafarend and Niermann 42º\nRonald Miller, minimum overall distortion 37.5º\nPlate Carrée, Simple Cylindrical, Plain/Plane 0º","category":"page"},{"location":"proj_examples/#Cylindrical-equal-area","page":"Map projections","title":"Cylindrical equal-area","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"This cylindrical projection is actually several projections, depending on what latitude is selected as the standard parallel. However, they are all equal area and hence non-conformal. All meridians and parallels are straight lines. The requirements to define this projection are:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: cea, cylindricalEqualArea, GMT code -> Y (width) y (scale)\nThe central meridian.\nThe standard parallel.\nScale in cm/degree or as 1:xxxxx, or map width","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"While you may choose any value for the standard parallel and obtain your own personal projection, there are seven choices of standard parallels that result in known (or named) projections. These are listed in Table.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name lat\nBalthasart 50º\nGall 45º\nHobo-Dyer 37º30’ (= 37.5º)\nTrystan Edwards 37º24’ (= 37.4º)\nCaster 37º04’ (= 37.0666º)\nBehrman 30º\nLambert 0º","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"For instance, a world map centered on the 35ºE meridian using the Behrman projection can be obtained by running the command:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=(-145,215,-90,90), proj=(name=:cylindricalEqualArea, center=(35,30)),\n      frame=(annot=45, grid=45), res=:crude, area=10000, water=:dodgerblue,\n      shore=:thinnest, figsize=12, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_general_cyl.png\" alt=\"GMT_general_cyl\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"As one can see there is considerable distortion at high latitudes since the poles map into lines.","category":"page"},{"location":"proj_examples/#Miller-Cylindrical","page":"Map projections","title":"Miller Cylindrical","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"This cylindrical projection, presented by Osborn Maitland Miller of the American Geographic Society in 1942, is neither equal nor conformal. All meridians and parallels are straight lines. The projection was designed to be a compromise between Mercator and other cylindrical projections. Specifically, Miller spaced the parallels by using Mercator’s formula with 0.8 times the actual latitude, thus avoiding the singular poles; the result was then divided by 0.8. There is only a spherical form for this projection. Specify the projection by:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: mill, Miller, GMT code -> J (width) j (scale)\nOptionally, the central meridian (default is the middle of your map).\nScale in cm/degree or as 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"For instance, a world map centered on the 90ºE meridian at a map scale of 1:400,000,000 can be obtained as follows:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=(-90,270,-80,90), proj=:Miller, xaxis=(annot=45,grid=45),\n      yaxis=(annot=30,grid=30), res=:crude, area=10000, land=:khaki, water=:azure,\n      shore=:thinnest, scale=\"1:400000000\", show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_miller.png\" alt=\"GMT_miller\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Cylindrical-stereographic","page":"Map projections","title":"Cylindrical stereographic","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The cylindrical stereographic projections are certainly not as notable as other cylindrical projections, but are still used because of their relative simplicity and their ability to overcome some of the downsides of other cylindrical projections, like extreme distortions of the higher latitudes. The stereographic projections are perspective projections, projecting the sphere onto a cylinder in the direction of the antipodal point on the equator. The cylinder crosses the sphere at two standard parallels, equidistant from the equator. The projections are defined by:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: cyl_stere, cylindricalStereographic, GMT code -> Cyl_stere (width) cyl_stere (scale)\nThe central meridian (uses the middle of the map when omitted).\nThe standard parallel (default is the Equator). When used, central meridian needs to be given as well.\nScale in cm/degree or as 1:xxxxx, or map width","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Some of the selections of the standard parallel are named for the cartographer or publication that popularized the projection","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name lat\nMiller’s modified Gall 66.159467º\nKamenetskiy’s First 55º\nGall’s stereographic 45º\nBolshoi Sovietskii Atlas Mira or Kamenetskiy’s Second 30º\nBraun’s cylindrical 0º","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"A map of the world, centered on the Greenwich meridian, using the Gall’s stereographic projection (standard parallel is 45º, Figure Gall’s stereographic projection), is obtained as follows:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=(-180,180,-60,80), proj=(name=:cylindricalStereographic, center=(0,45)),\n      xaxis=(annot=60,ticks=30, grid=30), yaxis=(annot=30,grid=30), res=:crude,\n      area=5000, shore=:black, land=:seashell4, ocean=:antiquewhite1, figsize=12, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_gall_stereo.png\" alt=\"GMT_gall_stereo\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Miscellaneous-projections","page":"Map projections","title":"Miscellaneous projections","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"GMT supports 8 common projections for global presentation of data or models. These are the Hammer, Mollweide, Winkel Tripel, Robinson, Eckert IV and VI, Sinusoidal, and Van der Grinten projections. Due to the small scale used for global maps these projections all use the spherical approximation rather than more elaborate elliptical formulae.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"In all cases, the specification of the central meridian can be skipped. The default is the middle of the longitude range of the plot, specified by the (region) option.","category":"page"},{"location":"proj_examples/#Hammer","page":"Map projections","title":"Hammer","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The equal-area Hammer projection, first presented by the German mathematician Ernst von Hammer in 1892, is also known as Hammer-Aitoff (the Aitoff projection looks similar, but is not equal-area). The border is an ellipse, equator and central meridian are straight lines, while other parallels and meridians are complex curves. The projection is defined by selecting:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: hamm, Hammer, GMT code -> H (width) h (scale)\nThe central meridian [Middle of your map].\nScale along equator in cm/degree or 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"A view of the Pacific ocean using the Dateline as central meridian is accomplished thus","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:g, proj=:Hammer, frame=:g, res=:crude, area=10000, land=:black,\n\t  ocean=:cornsilk, figsize=12, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_hammer.png\" alt=\"GMT_hammer\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Mollweide","page":"Map projections","title":"Mollweide","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"This pseudo-cylindrical, equal-area projection was developed by the German mathematician and astronomer Karl Brandan Mollweide in 1805. Parallels are unequally spaced straight lines with the meridians being equally spaced elliptical arcs. The scale is only true along latitudes 4044’ north and south. The projection is used mainly for global maps showing data distributions. It is occasionally referenced under the name homalographic projection. Like the Hammer projection, outlined above, we need to specify only two parameters to completely define the mapping of longitudes and latitudes into rectangular x/y coordinates:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: moll, Mollweide, GMT code -> W (width) w (scale)\nThe central meridian [Middle of your map].\nScale along equator in cm/degree or 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"An example centered on Greenwich can be generated thus:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:d, proj=:Mollweide, frame=:g, res=:crude, area=10000, land=:tomato1,\n\t  water=:skyblue, figsize=12, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_mollweide.png\" alt=\"GMT_mollweide\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Winkel-Tripel","page":"Map projections","title":"Winkel Tripel","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"In 1921, the German mathematician Oswald Winkel a projection that was to strike a compromise between the properties of three elements (area, angle and distance). The German word “tripel” refers to this junction of where each of these elements are least distorted when plotting global maps. The projection was popularized when Bartholomew and Son started to use it in its world-renowned “The Times Atlas of the World” in the mid 20th century. In 1998, the National Geographic Society made the Winkel Tripel as its map projection of choice for global maps.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Naturally, this projection is neither conformal, nor equal-area. Central meridian and equator are straight lines; other parallels and meridians are curved. The projection is obtained by averaging the coordinates of the Equidistant Cylindrical and Aitoff (not Hammer-Aitoff) projections. The poles map into straight lines 0.4 times the length of equator. To use it you must enter","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: win, Winkel, GMT code -> R (width) r (scale)\nThe central meridian [Middle of your map].\nScale along equator in cm/degree or 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Centered on Greenwich, the example in Figure Winkel Tripel projection was created by this command:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:d, proj=:Winkel, frame=:g, res=:crude, area=10000, land=:burlywood4,\n\t  water=:wheat1, figsize=12, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_winkel.png\" alt=\"GMT_winkel\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Robinson","page":"Map projections","title":"Robinson","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The Robinson projection, presented by the American geographer and cartographer Arthur H. Robinson in 1963, is a modified cylindrical projection that is neither conformal nor equal-area. Central meridian and all parallels are straight lines; other meridians are curved. It uses lookup tables rather than analytic expressions to make the world map “look” right [22]. The scale is true along latitudes 38. The projection was originally developed for use by Rand McNally and is currently used by the National Geographic Society. To use it you must enter","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: robin, Robinson, GMT code -> N (width) n (scale)\nThe central meridian [Middle of your map].\nScale along equator in cm/degree or 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Again centered on Greenwich, the example below was created by this command:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:d, proj=:Robinson, frame=:g, res=:crude, area=10000, land=:goldenrod,\n\t  water=:snow2, figsize=12, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_robinson.png\" alt=\"GMT_robinson\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Eckert-IV-and-VI","page":"Map projections","title":"Eckert IV and VI","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The Eckert IV and VI projections, presented by the German cartographer Max Eckert-Greiffendorff in 1906, are pseudo-cylindrical equal-area projections. Central meridian and all parallels are straight lines; other meridians are equally spaced elliptical arcs (IV) or sinusoids (VI). The scale is true along latitudes 40º30’ (IV) and 49º16’ (VI). Their main use is in thematic world maps. To select Eckert IV you must use EckertIV while Eckert VI is selected with EckertVI. If no modifier is given it defaults to Eckert VI. In addition, you must enter","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: eck4, EckertIV, GMT code -> Kf (width) kf (scale)\nName: eck6, EckertVI, GMT code -> Ks (width) ks (scale)\nThe central meridian [Middle of your map].\nScale along equator in cm/degree or 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Centered on the Dateline, the Eckert IV example below was created by this command:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:d, proj=:EckertIV, frame=:g, res=:crude, area=10000, land=:ivory,\n\t  water=:bisque3, shore=:thinnest, figsize=12, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_eckert4.png\" alt=\"GMT_eckert4\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The same script, EckertVI instead of EckertIV, yields the Eckert VI map:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:d, proj=:EckertVI, frame=:g, res=:crude, area=10000, land=:ivory,\n\t  water=:bisque3, shore=:thinnest, figsize=12, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_eckert6.png\" alt=\"GMT_eckert6\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/#Sinusoidal","page":"Map projections","title":"Sinusoidal","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The sinusoidal projection is one of the oldest known projections, is equal-area, and has been used since the mid-16th century. It has also been called the “Equal-area Mercator” projection. The central meridian is a straight line; all other meridians are sinusoidal curves. Parallels are all equally spaced straight lines, with scale being true along all parallels (and central meridian). To use it, you need to select:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: sinu, Sinusoidal, GMT code -> I (width) i (scale)\nThe central meridian [Middle of your map].\nScale along equator in cm/degree or 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"A simple world map using the sinusoidal projection is therefore obtained by","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:d, proj=:Sinusoidal, xaxis=(grid=30,), yaxis=(grid=15,), res=:crude,\n      area=10000, land=:coral4, water=:azure3, figsize=12, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_sinusoidal.png\" alt=\"GMT_sinusoidal\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"To reduce distortion of shape the interrupted sinusoidal projection was introduced in 1927. Here, three symmetrical segments are used to cover the entire world. Traditionally, the interruptions are at 160ºW, 20ºW, and 60ºE. To make the interrupted map we must call coast for each segment and superpose the results. To produce an interrupted world map (with the traditional boundaries just mentioned) that is 5.04 inches wide we use the scale 12/360 = 0.03333 and offset the subsequent plots horizontally by their widths (140 * 0.03333 and 80 * 0.03333):","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=(200,340,-90,90), proj=:Sinusoidal, frame=:g, res=:crude, area=10000,\n      land=:darkred, water=:azure, scale=0.03333)\ncoast!(region=(-20,60,-90,90), frame=:g, res=:crude, area=10000, land=:darkgreen,\n       water=:azure, xoff=4.666)\ncoast!(region=(60,200,-90,90), frame=:g, res=:crude, area=10000, land=:darkblue,\n       water=:azure, xoff=2.6664, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_sinus_int.png\" alt=\"GMT_sinus_int\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The usefulness of the interrupted sinusoidal projection is basically limited to display of global, discontinuous data distributions like hydrocarbon and mineral resources, etc.","category":"page"},{"location":"proj_examples/#Van-der-Grinten","page":"Map projections","title":"Van der Grinten","text":"","category":"section"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"The Van der Grinten projection, presented by Alphons J. van der Grinten in 1904, is neither equal-area nor conformal. Central meridian and Equator are straight lines; other meridians are arcs of circles. The scale is true along the Equator only. Its main use is to show the entire world enclosed in a circle. To use it you must enter","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Name: vand, VanderGrinten, GMT code -> V (width) v (scale)\nThe central meridian [Middle of your map].\nScale along equator in cm/degree or 1:xxxxx, or map width.","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"Centered on the Dateline, the example below was created by this command:","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"coast(region=:g, proj=:VanderGrinten, xaxis=(grid=30,), yaxis=(grid=15,),res=:crude,\n      land=:lightgray, water=:cornsilk, area=10000, shore=:thinnest, figsize=10, show=true)","category":"page"},{"location":"proj_examples/","page":"Map projections","title":"Map projections","text":"<img src=\"../figures/mapproj/GMT_grinten.png\" alt=\"GMT_grinten\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/historic/ex04/#A-3-D-perspective-mesh-plot","page":"A 3-D perspective mesh plot","title":"A 3-D perspective mesh plot","text":"","category":"section"},{"location":"gallery/historic/ex04/","page":"A 3-D perspective mesh plot","title":"A 3-D perspective mesh plot","text":"    C = makecpt(cmap=(255,100), range=(-10,10,10), no_bg=true)\n\n    grdcontour(\"@HI_geoid_04.nc\", region=(195,210,18,25), view=(60,30), cont=1,\n               annot=(int=5, labels=(rounded=true,)), labels=(dist=10,),\n               x_off=3, y_off=3, proj=:merc, figscale=1.1)\n    coast!(p=true, frame=(annot=2, axes=:NEsw), land=:black,\n           rose=(inside=true, anchor=:BR, width=2.5, offset=0.25, label=true))\n    grdview!(\"@HI_topo_04.nc\", p=true, region=(195,210,18,25,-6,4),\n             plane=(-6,:lightgray), surftype=(surf=true,mesh=true), Jz=\"0.9\",\n             frame=(axes=:wesnZ, annot=2), zaxis=(annot=2, label=\"Topo (km)\"), y_off=5.6)\n    text!(text_record([7.5 14.0], \"H@#awaiian@# R@#idge@#\"), region=(0,21,0,28),\n          attrib=(font=(60,\"ZapfChancery-MediumItalic\"), justify=:CB),\n          proj=:linear, view=:none, figscale=1, show=1)","category":"page"},{"location":"gallery/historic/ex04/","page":"A 3-D perspective mesh plot","title":"A 3-D perspective mesh plot","text":"See also GMT ex04","category":"page"},{"location":"gallery/historic/ex16/#Gridding-of-data,-continued","page":"Gridding of data, continued","title":"Gridding of data, continued","text":"","category":"section"},{"location":"gallery/historic/ex16/","page":"Gridding of data, continued","title":"Gridding of data, continued","text":"    contour(\"@table_5.11\", region=(0,6.5,-0.2,6.5), frame=(axes=:WSen, annot=2, ticks=1),\n            color=\"@ex_16.cpt\", fill=true, figscale=1.143, y_off=14)\n    text!(text_record([3.25 7], \"pscontour (triangulate)\"), noclip=true,\n          font=(18,\"Times-Roman\"), justify=:CB)\n\n    Graws0 = surface(\"@table_5.11\", region=:same, inc=0.2)\n    grdview!(Graws0, color=\"@ex_16.cpt\", Q=:s, frame=:same, x_off=8.9)\n    text!(text_record([3.25 7], \"surface (tension = 0)\"), noclip=true,\n          font=(18,\"Times-Roman\"), justify=:CB)\n\n    Graws5 = surface(\"@table_5.11\", region=:same, inc=0.2, tension=0.5)\n    grdview!(Graws5, color=\"@ex_16.cpt\", Q=:s, frame=:same, x_off=-8.9, y_off=-9.5)\n    text!(text_record([3.25 7], \"surface (tension = 0.5)\"), noclip=true,\n          font=(18,\"Times-Roman\"), justify=:CB)\n\n    Grawt = triangulate(\"@Table_5_11.txt\", region=:same, inc=0.2, grid=true)\n    Gfiltered = grdfilter(Grawt, distflag=0, F=\"c1\")\n    grdview!(Gfiltered, color=\"@ex_16.cpt\", Q=:s, frame=:same, x_off=8.9)\n    text!(text_record([3.25 7], \"triangulate @~\\\\256@~ grdfilter\"),\n          no_clip=true, font=(18,\"Times-Roman\"), justify=:CB)\n    text!(text_record([8.2 19], \"Gridding of Data\"), region=(0,10,0,10), no_clip=true,\n          font=(32,\"Times-Roman\"), justify=:CB, figscale=1, proj=:linear, x_off=-8.9)\n    colorbar!(D=\"x3.25i/0.35i+jTC+w5i/0.25i+h\", color=\"@ex_16.cpt\", y_off=-1.9, show=true)","category":"page"},{"location":"gallery/historic/ex16/","page":"Gridding of data, continued","title":"Gridding of data, continued","text":"See also GMT ex16","category":"page"},{"location":"gallery/plot_funs/plot_funs/#Ploting-functions","page":"Plotting functions","title":"Ploting functions","text":"","category":"section"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"There are a couple of predefined functions that can plotted for demonstration purposes. For example the ackley function","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"imshow(\"ackley\", view=(159,30), shade=true)","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"<img src=\"../ackley.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"Or the rosenbrock that looks like a manta ray (other options are parabola, eggbox,  sombrero)\"","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"imshow(\"rosenbrock\", view=(159,30), shade=true)","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"<img src=\"../rosenbrock.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"But besides these predefined functions one can any function that defines a surface. For example a parabola can be plotted with the code bellow. First argument can be an anonymous function (like the example) of a function. Second and third args contain the plotting domain and step used to evaluate the function.","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"imshow((x,y) -> sqrt(x^2 + y^2), -5:0.05:5, -5:0.05:5, view=(159,30), shade=true, frame=:autoXYZg)","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"<img src=\"../parabola.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"And we can plot 3D lines too. Same thing, give a parametric equation and","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"plot3d(x -> sin(x)*cos(10x), y -> sin(y)*sin(10y), z -> cos(z), 0:pi/200:pi, lt=2, lc=:brown, frame=:autoXYZg, show=true)","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"<img src=\"../3Dlines.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"And a 2D example","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"lines(x -> cos(x) * x, y -> sin(y) * y, linspace(0,2.1pi,100), region=(-4,7,-5.5,2.5),\n\tlw=2, lc=:sienna, decorated=(quoted=true, const_label=\" I am the center of the Universe\", font=(34,\"Times-Italic\"), curved=true), aspect=:equal, show=true)","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"<img src=\"../universe.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"","category":"page"},{"location":"gallery/plot_funs/plot_funs/","page":"Plotting functions","title":"Plotting functions","text":"Download a Pluto Notebook here","category":"page"},{"location":"color/#Setting-color","page":"Setting color","title":"Setting color","text":"","category":"section"},{"location":"color/","page":"Setting color","title":"Setting color","text":"Color can be selected in several different ways. One of the is to create color maps with the makecpt and grd2cpt modules (see their own man pages). This is the method we use to colorize images, sets of points, etc. The other option sets the color via keyword/value pairs and is appropriate to color fill polygons, individual symbols, etc and the one documented here.","category":"page"},{"location":"color/","page":"Setting color","title":"Setting color","text":"We may use this in modules that expect the color or fill keywords, then the value can be a string or a symbol with the color's name (or names separated by commas); a number in the [0 255] range to indicate a gray shade tone; or a 3-elements tuple (more tricky) or array (simpler) where each element contains the R,G,B component in either [0 255] or [0 1] range.","category":"page"},{"location":"color/","page":"Setting color","title":"Setting color","text":"Examples:","category":"page"},{"location":"color/","page":"Setting color","title":"Setting color","text":"color=:red                     Single color\ncolor=200                      Single gray\ncolor=\"#aabbcc\"                Single color\ncolor=\"30/20/180\"              Single color\ncolor=\"yellow,brown\"           Two colors\ncolor=(30,180)                 Two gray levels\ncolor=((30,20,180),)           Single color\ncolor=((10,50,99),(20,60,90))  Two colors\ncolor=[0.118 0.078 0.706]      Single color in [0 1]\ncolor=[10 50 99; 20 60 90]     Two colors\ncolor=(:red,:green,:blue)      Three colors","category":"page"},{"location":"color/","page":"Setting color","title":"Setting color","text":"But there are other options that expect color in one of its elements. For example, to set a text font we may want to choose a color (i.e. not use the default which is black). Then we would do drop the color= and use the value in that other option value. For example font=(12, \"Helvetica\", (30,20,180)), where the color is the third element in the font keyword option. ","category":"page"},{"location":"gallery/historic/ex17/#Images-clipped-by-coastlines","page":"Images clipped by coastlines","title":"Images clipped by coastlines","text":"","category":"section"},{"location":"gallery/historic/ex17/","page":"Images clipped by coastlines","title":"Images clipped by coastlines","text":"    geoid_cpt = grd2cpt(\"@india_geoid.nc\", cmap=:rainbow)\n    grdimage(\"@india_geoid.nc\", I=:default, proj=:merc, figsize=16)\n\n    # Then use gmt pscoast to initiate clip path for land\n    coast!(region=\"@india_geoid.nc\", res=:low, clip=:land)\n\n    # Now generate topography image w/shading\n    gray = makecpt(color=150, range=(-10000,10000), no_bg=:true)\n    grdimage!(\"@india_topo.nc\", I=:default, cmap=gray)\n\n    # Finally undo clipping and overlay basemap\n    coast!(clip=:end, frame=(annot=10, ticks=5, title=\"Clipping of Images\"))\n\n    # Put a color legend on top of the land mask\n    colorbar!(cmap=geoid_cpt, pos=(anchor=:TR, inside=true, length=(10,0.5),\n              offset=(0.8,0.25), horizontal=true), xaxis=(annot=5,ticks=1),\n              yaxis=(label=\"m\",), shade=true, Vd=1)\n\n    # Add a text paragraph\n    t = [\"> 90 -10 12p 3i j\"\n        \"@_@%5%Example 17.@%%@_  We first plot the color geoid image\"\n        \"for the entire region, followed by a gray-shaded @#etopo5@#\"\n        \"image that is clipped so it is only visible inside the coastlines.\"]\n    text!(text_record(t), paragraph=true, fill=:white, pen=:thinner, clearance=(round=true,),\n          offset=(-0.25,0.25), font=(12,\"Times-Roman\"), justify=:RB, show=true)","category":"page"},{"location":"gallery/historic/ex17/","page":"Images clipped by coastlines","title":"Images clipped by coastlines","text":"See also GMT ex17","category":"page"},{"location":"lines/#lines","page":"lines","title":"lines","text":"","category":"section"},{"location":"lines/","page":"lines","title":"lines","text":"lines(cmd0::String=\"\", arg1=[]; kwargs...)","category":"page"},{"location":"lines/","page":"lines","title":"lines","text":"Reads (x,y) pairs and plot lines with different levels of decoration. The input can either be a file name of a file with at least two columns (x,y), but optionally more, a GMTdatset object with also two or more columns.","category":"page"},{"location":"lines/","page":"lines","title":"lines","text":"This module plots a large variety of lines and polygons. It goes from simple lines and polygons (color/pattern filled or not) to the so called decorated lines. That is, lines decorated with symbols and text patterns.","category":"page"},{"location":"lines/","page":"lines","title":"lines","text":"This module is a subset of plot to make it simpler to draw line plots. So not all (fine) controlling parameters are not listed here. For the finest control, user should consult the plot module.","category":"page"},{"location":"lines/#Parameters","page":"lines","title":"Parameters","text":"","category":"section"},{"location":"lines/","page":"lines","title":"lines","text":"B or axes or frame\nSet map boundary frame and axes attributes. Default is to draw and annotate left and bottom axes. More at frame\nJ or proj : proj=<parameters>\nSelect map projection. Default is linear and 14 cm width. More at proj\nR or region or limits : limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more \n Specify the region of interest. Default limits are computed from data extents. More at limits\nG or markerfacecolor or mc or fill\n Select color or pattern for filling of polygons [Default is no fill]. Note that plot will search for fill  and pen settings in all the segment headers (when passing a GMTdaset or file of a multi-segment dataset)  and let any values thus found over-ride the command line settings (but those must be provided in the terse GMT  syntax). See Setting color for extend color selection (including colormap generation).\nW or pen=pen\n Set pen attributes for lines or the outline of symbols (except for the decorated lines that have their own  options to do it) [Defaults: width = default, color = black, style = solid]. See Pen attributes\ndecorated\n For all types of line decorations: symbols Decorated lines, fronts Front lines,  text Quoted lines, etc... see Line decorations\nU or time_stamp : time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n Draw GMT time stamp logo on plot. More at timestamp\nV or verbose : verbose=true | verbose=level\n Select verbosity level. More at verbose\nX or x_off or x_offset : xoff=[] | *xoff=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : yoff=[] | *yoff=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off","category":"page"},{"location":"lines/#Examples","page":"lines","title":"Examples","text":"","category":"section"},{"location":"lines/","page":"lines","title":"lines","text":"Decorated curve with blue stars","category":"page"},{"location":"lines/","page":"lines","title":"lines","text":"    xy = gmt(\"gmtmath -T0/180/1 T SIND 4.5 ADD\");\n    lines(xy, axes=:af, pen=(1,:red), decorated=(dist=(2.5,0.25), symbol=:star,\n          symbsize=1, pen=(0.5,:green), fill=:blue, dec2=true), show=true)","category":"page"},{"location":"gallery/historic/ex11/#A-3-D-RGB-color-cube","page":"A 3-D RGB color cube","title":"A 3-D RGB color cube","text":"","category":"section"},{"location":"gallery/historic/ex11/","page":"A 3-D RGB color cube","title":"A 3-D RGB color cube","text":"    gmtset(MAP_TICK_LENGTH_PRIMARY=0, FONT_ANNOT_PRIMARY=\"12p,Helvetica-Bold\")\n    side = 6.35\n\n    plot(\"@cut-here_11.txt\", pen=(:thinnest,\"dot\"), region=(-51,306,0,1071),\n         frame=:none, figsize=(8.9,26.7), x_off=side, y_off=1.2)\n\n    # First, create grids of ascending X and Y and constant 0.\n    # These are to be used to represent R, G and B values of the darker 3 faces of the cube.\n    x_nc = gmt(\"grdmath -I1 -R0/255/0/255 X =\")\n    y_nc = gmt(\"grdmath -I1 -R Y =\")\n    c_nc = gmt(\"grdmath -I1 -R 0 =\")\n\n    grdimage!(x_nc, y_nc, c_nc, figsize=(side,-side), proj=:linear, x_off=1.25)\n    plot!(\"@rays_11.txt\", pen=(:thinner, :white, :dashed))\n    T = text_record([128 128 -45; 102  26 -90; 204  26 -90; 10  140 180],\n                    [\"12p 60\\\\217\"; \"12p 0.4\"; \"12p 0.8\"; \"16p G\"])\n    text!(T, par=(:FONT, :white), attrib=(angle=\"\", font=\"\"))\n    arrows!([0 0 0 128], noclip=true, arrow=(len=0.4, stop=true, endpoint=true),\n            pen=(2,:white), fill=:white)\n\n    grdimage!(x_nc, c_nc, y_nc, figsize=(side,side), proj=:linear, y_off=side)\n    plot!(\"@rays_11.txt\", pen=(:thinner, :white, :dashed))\n    T = text_record([128 128 45; 26 102 0; 26 204 0; 140 10 -90; 100 100 -45],\n                    [\"12p 300\\\\217\"; \"12p 0.4\"; \"12p 0.8\"; \"16p R\"; \"16p V\"]);\n    text!(T, par=(:FONT,:white), attrib=(angle=\"\", font=\"\"))\n\n    arrows!([0 0 128 0], noclip=true, arrow=(len=0.4, stop=true, endpoint=true),\n            pen=(2,:white), fill=:white)\n    arrows!([0 0 90 90], noclip=true, arrow=(len=0.4, stop=true, endpoint=true),\n            pen=(2,:white), fill=:white)\n\n    grdimage!(c_nc, x_nc, y_nc, figsize=(-side,side), proj=:linear, x_off=-side)\n    plot!(\"@rays_11.txt\", pen=(:thinner, :white, :dashed))\n    T = text_record([128 128 135; 102  26 90; 204  26 90; 10  140  0],\n                    [\"12p 180\\\\217\"; \"12p 0.4\"; \"12p 0.8\"; \"16p B\"]);\n    text!(T, par=(:FONT,:white), attrib=(angle=\"\", font=\"\"))\n\n    arrows!([0 0 0 128], noclip=true, arrow=(len=0.4, stop=true, endpoint=true),\n            pen=(2,:white), fill=:white)\n    arrows!([0 0 128 0], noclip=true, arrow=(len=0.4, stop=true, endpoint=true),\n            pen=(2,:white), fill=:white)\n\n    # Second, create grids of descending X and Y and constant 255.\n    # These are to be used to represent R, G and B values of the lighter 3 faces of the cube.\n\n    x_nc = gmt(\"grdmath -I1 -R 255 X SUB =\")\n    y_nc = gmt(\"grdmath -I1 -R 255 Y SUB =\")\n    c_nc = gmt(\"grdmath -I1 -R 255       =\")\n\n    grdimage!(x_nc, y_nc, c_nc, figsize=(-side,-side), proj=:linear, x_off=side, y_off=side)\n    plot!(\"@rays_11.txt\", pen=(:thinner, :black, :dashed))\n    T = text_record([128 128 225; 102  26 270; 204  26 270], [\"12p 240\\\\217\"; \"12p 0.4\"; \"12p 0.8\"])\n    text!(T, attrib=(angle=\"\", font=\"\"))\n\n    grdimage!(c_nc, y_nc, x_nc, figsize=(side,-side), proj=:linear, x_off=side)\n    plot!(\"@rays_11.txt\", pen=(:thinner, :black, :dashed))\n    T = text_record([128 128 -45; 26 102 0; 26 204 0; 100 100  45; 204 66 90], [\"12p 0\\\\217\"; \"12p 0.4\"; \"12p 0.8\"; \"16p S\"; \"16p H\"])\n    text!(T, attrib=(angle=\"\", font=\"\"))\n\n    arrows!([0 0 90 90], noclip=true, arrow=(len=0.4, stop=true, endpoint=true), pen=2, fill=:black)\n    arrows!([204 204 204 76], noclip=true, arrow=(len=0.4, stop=true, endpoint=true), pen=2, fill=:black)\n\n    grdimage!(x_nc, c_nc, y_nc, figsize=(-side,side), proj=:linear, x_off=-side, y_off=side)\n    plot!(\"@rays_11.txt\", pen=(:thinner, :black, :dashed))\n    T = text_record([128 128 135; 26  102 180; 26  204 180; 200 200 225], [\"12p 120\\\\217\"; \"12p 0.4\"; \"12p 0.8\"; \"16p GMT\"])\n    text!(T, attrib=(angle=\"\", font=\"\"), show=1)","category":"page"},{"location":"gallery/historic/ex11/","page":"A 3-D RGB color cube","title":"A 3-D RGB color cube","text":"See also GMT ex11","category":"page"},{"location":"gallery/historic/ex20/#Custom-plot-symbols","page":"Custom plot symbols","title":"Custom plot symbols","text":"","category":"section"},{"location":"gallery/historic/ex20/","page":"Custom plot symbols","title":"Custom plot symbols","text":"    coast(region=:global360, xaxis=(annot=60,), yaxis=(annot=30,),\n          title=\"Hotspot Islands and Hot Cities\", land=:darkgreen,\n          water=:lightblue, area=5000, proj=:Win, figsize=15)\n    plot!(\"@hotspots.txt\", symbol=\"kvolcano\", markerline=:thinnest, fill=:red)\n\n    # Overlay a few bullseyes at NY, Cairo, and Perth\n    cities = [-74 40.45 1.0; 31.15 30.03 1.0; 115.49 -31.58 1.0; -56.16 -34.9 1.0]\n    plot!(cities, S=\"k@bullseye\", show=true)","category":"page"},{"location":"gallery/historic/ex20/","page":"Custom plot symbols","title":"Custom plot symbols","text":"See also GMT ex20","category":"page"},{"location":"gallery/historic/ex48/#Line-networks,-map-embellishments,-and-curved-titles","page":"Line networks, map embellishments, and curved titles","title":"Line networks, map embellishments, and curved titles","text":"","category":"section"},{"location":"gallery/historic/ex48/","page":"Line networks, map embellishments, and curved titles","title":"Line networks, map embellishments, and curved titles","text":"    loc = [-157.8583  21.3069   61 300\n        -149.5585 -17.5516 -120 120\n            139.6917  35.6895   56 170\n            -70.6693 -33.4489  215 322\n            151.2070 -33.8675  -10 145\n        -118.2437  34.0522  142 306]\n    par = [[\"HNL\" \"BC\" \"0.6i\"]; [\"PPT\" \"TC\" \"0.6i\"]; [\"HND\" \"RB\" \"0.3i\"];\n           [\"SCL\" \"TL\" \"0.25i\"]; [\"SYD\" \"TR\" \"0.85i\"]; [\"LAX\" \"BL\" \"0.80i\"]]\n\n    makecpt(cmap=:lightgray, range=\"-12000,12000\")\n    grdimage(\"@etopo10m_48.nc\", region=:global360, shade=(azim=45, norm=\"t2\"),\n             proj=(name=:ortho, center=(205,-10)), figsize=18)\n    near_area = sphtriangulate(loc, voronoi=:v)\n    t_cpt = makecpt(cmap=:categorical, range=(0,6,1))\n    plot!(near_area, close=true, cmap=t_cpt, alpha=65)\n    plot!(loc, marker=:W, ms=\"2000k\", fill=\"white@40\")\n    coast!(land=:black, area=500, frame=(annot=:auto, ticks=:auto, grid=:auto))\n    # Make a 15 degrees by 250 km spiderweb grid around each airport\n    # First to the arcs of different radii\n    for k in 500:250:2000\n        plot!(loc, marker=\"W\" * \"$k\" * \"k+a\", ml=0.5)\n    end\n    # Then do every 15 degree radial lines but in multiples of 15. Also place labels.\n    daz=15\n\n    for k = 1:size(loc,1)\n        az1 = ceil(loc[k,3]  / daz) * daz\n        az2 = floor(loc[k,4] / daz) * daz\n        # Generate the radial lines at 15 deg and plot them as geovectors\n        a15 = az1:daz:az2\n        t = zeros(length(a15), 4);\tt .+= [loc[k,1] loc[k,2] 0 2000];\tt[:,3] = a15\n        arrows!(t, geovec=0.1, pen=0.5)\n        text!(text_record(loc[k:k,1:2], par[k,1]),\n              offset=(corners=true, shift=par[k,3], line=(0.5,:white)),\n              font=16, justify=par[k,2], noclip=true)\n        text!(text_record(loc[k:k,1:2], par[k,1]),\n              offset=(corners=true, shift=par[k,3], line=0.25),\n              font=16, justify=par[k,2], noclip=true, fill=:white, pen=0.25)\n    end\n\n    # Plot trimmed lines and overlay airport locations\n    lines!(loc, connection=:network,\n           pen=(lw=1.5, arrow=(len=0.5,fill=:red,shape=0.5), offset=\"250k\"))\n    plot!(loc, symbol=\"E-500\", fill=:orange, ml=0.25)\n    # Make an arc of radius 12 cm from 45 to 135 degrees around map\n    # center and use it to place text\n    path = [cosd.(45:135) sind.(45:135)] .* 12\n    # Move up 8 cm so origin is at the map center\n    lines!(path, region=(-9.0,9.0,0,15), proj=:linear, figscale=1.0,\n           decorated=(quoted=true, n_labels=1, font=32, curved=true,\n                      const_label=\"IMPORTANT PACIFIC AIRPORTS\"),\n           pen=(:faint,:white), noclip=true, y_off=8, show=true","category":"page"},{"location":"gallery/historic/ex48/","page":"Line networks, map embellishments, and curved titles","title":"Line networks, map embellishments, and curved titles","text":"See also GMT ex48","category":"page"},{"location":"gallery/scripts_agu/flower/#Filled-flower-with-pattern","page":"Filled flower with pattern","title":"Filled flower with pattern","text":"","category":"section"},{"location":"gallery/scripts_agu/flower/","page":"Filled flower with pattern","title":"Filled flower with pattern","text":"Draw a flower filled from a pattern in a .jpg file.","category":"page"},{"location":"gallery/scripts_agu/flower/","page":"Filled flower with pattern","title":"Filled flower with pattern","text":"t = GMT.linspace(0,2pi,360);\nx = cos.(4*t) .* cos.(t);\ny = cos.(4*t) .* sin.(t);\n\nlines([-0.7 -0.25 0], [-1.5 -0.8 0], # The flower stem\n      limits=(-1,1,-1.5,1),          # Fig limits\n      lw=9,                          # Stem's line width in points\n      lc=:darkgreen,                 # Stem's line color\n      bezier=true,                   # Smooth the stem polyne as a Bezier curve\n      figsize=(14,0),                # Fig size. Second arg = 0 means compute the height keeping aspect ratio\n      frame=:none)                   # Do not plot the frame\nplot!(x, y,\n      fill=(pattern=\"C:/progs_cygw/GMTdev/gmt5/master/test/psxy/tiling2.jpg\",  # Fill pattern file\n      dpi=200),                      # The pattern DPI\n      show=true)                     # Show the result","category":"page"},{"location":"gallery/scripts_agu/flower/","page":"Filled flower with pattern","title":"Filled flower with pattern","text":"As one-liners (to facilitate copy-paste):","category":"page"},{"location":"gallery/scripts_agu/flower/","page":"Filled flower with pattern","title":"Filled flower with pattern","text":"t=GMT.linspace(0,2pi,360);\nx = cos.(4*t) .* cos.(t);\ny = cos.(4*t) .* sin.(t);\nlines([-0.7 -0.25 0], [-1.5 -0.8 0], limits=(-1,1,-1.5,1), lw=9, lc=:darkgreen, bezier=true, frame=:none, figsize=(14,0))\nplot!(x, y, fill=(pattern=\"C:/progs_cygw/GMTdev/gmt5/master/test/psxy/tiling2.jpg\", dpi=200), savefig=\"flower.png\", show=true)","category":"page"},{"location":"gallery/scripts_agu/flower/","page":"Filled flower with pattern","title":"Filled flower with pattern","text":"<img src=\"../figs/flower.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/historic/ex45/#Trend-modeling","page":"Trend modeling","title":"Trend modeling","text":"","category":"section"},{"location":"gallery/historic/ex45/","page":"Trend modeling","title":"Trend modeling","text":"\t# Basic LS line y = a + bx\n\tmodel = trend1d(\"@MaunaLoa_CO2.txt\", output=:xm, n_model=:p1)\n\tplot(\"@MaunaLoa_CO2.txt\", region=(1958,2016,310,410), frame=(axes=:WSen, bg=:azure1),\n         xaxis=(annot=:auto, ticks=:auto), yaxis=(annot=:auto, ticks=:auto, suffix=\" ppm\",\n         marker=:circle, ms=0.05, fill=:red, figsize=(15,5), x_off=4)\n\tplot!(model, pen=(0.5,:blue))\n\ttext!(text_record(\"m@-2@-(t) = a + b@~\\\\327@~t\"), font=12, region_justify=:TL,\n          offset=(away=true, shift=0.25), fill=:lightyellow )\n\t# Basic LS line y = a + bx + cx^2\n\tmodel = trend1d(\"@MaunaLoa_CO2.txt\", output=:xm, n_model=:p2)\n\tplot!(\"@MaunaLoa_CO2.txt\", frame=:same, ms=0.05, fill=:red, y_off=6)\n\tplot!(model, pen=(0.5,:blue))\n\ttext!(text_record(\"m@-3@-(t) = a + b@~\\\\327@~t + c@~\\\\327@~t@+2@+\"),\n          font=12, region_justify=:TL, offset=(away=true, shift=0.25), fill=:lightyellow)\n\t# Basic LS line y = a + bx + cx^2 + seasonal change\n\tmodel = trend1d(\"@MaunaLoa_CO2.txt\", output=:xmr, n_model=\"p2,f1+o1958+l1\")\n\tplot!(\"@MaunaLoa_CO2.txt\", frame=:same, ms=0.05, fill=:red, y_off=6)\n\tplot!(model, pen=(0.25,:blue))\n\ttext!(text_record(\"m@-5@-(t) = a + b@~\\\\327@~t + c@~\\\\327@~t@+2@+ +\n                       d@~\\\\327@~cos(2@~p@~t) + e@~\\\\327@~sin(2@~p@~t)\"),\n          font=12, region_justify=:TL, offset=(away=true, shift=0.25),\n          fill=:lightyellow)\n\t# Plot residuals of last model\n\tplot!(model, region=(1958,2016,-4,4), frame=(axes=:WSen, bg=:azure1,\n          title=\"The Keeling Curve [CO@-2@- at Mauna Loa]\"),\n          xaxis=(annot=:auto, ticks=:auto), yaxis=(annot=:auto, ticks=:auto, suffix=\" ppm\"),\n          ms=0.05, fill=:red, incol=\"0,2\", y_off=6)\n\ttext!(text_record(\"@~e@~(t) = y(t) - m@-5@-(t)\"), font=12, region_justify=:TL,\n          offset=(away=true, shift=0.25), fill=:lightyellow, show=1)","category":"page"},{"location":"gallery/historic/ex45/","page":"Trend modeling","title":"Trend modeling","text":"See also GMT ex45","category":"page"},{"location":"gallery/scripts_agu/colored_bars/#Make-a-bar-plot-where-colors-are-proportional-to-bar-height","page":"Make a bar plot where colors are proportional to bar height","title":"Make a bar plot where colors are proportional to bar height","text":"","category":"section"},{"location":"gallery/scripts_agu/colored_bars/","page":"Make a bar plot where colors are proportional to bar height","title":"Make a bar plot where colors are proportional to bar height","text":"bar(rand(15),              # Generate the dataset\n    color=:rainbow,        # The color scale\n    figsize=(14,8),        # The fig size (14 x 8 cm)\n    title=\"Colored bars\",  # The fig title\n    show=true)             # Show the result","category":"page"},{"location":"gallery/scripts_agu/colored_bars/","page":"Make a bar plot where colors are proportional to bar height","title":"Make a bar plot where colors are proportional to bar height","text":"As a one-liner (to facilitate copy-paste):","category":"page"},{"location":"gallery/scripts_agu/colored_bars/","page":"Make a bar plot where colors are proportional to bar height","title":"Make a bar plot where colors are proportional to bar height","text":"bar(rand(15), color=:rainbow, figsize=(14,8), title=\"Colored bars\", show=true)","category":"page"},{"location":"gallery/scripts_agu/colored_bars/","page":"Make a bar plot where colors are proportional to bar height","title":"Make a bar plot where colors are proportional to bar height","text":"<img src=\"../figs/colored_bars.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"gallery/scripts_agu/matangles/#Matangles","page":"Matangles","title":"Matangles","text":"","category":"section"},{"location":"gallery/scripts_agu/matangles/","page":"Matangles","title":"Matangles","text":"Plot matangle symbols with vector heads.","category":"page"},{"location":"gallery/scripts_agu/matangles/","page":"Matangles","title":"Matangles","text":"# Plot the matangle symbol with location and angle params in input array.\nplot([0.5 1 1.75 5 85], region=(0,5,0,5), figsize=12,\n        marker=(matang=true, arrow=(length=0.75, start=true, stop=true, half=:right)),\n        ml=(0.5,:red), fill=:blue)\n# Now add another matangle symbol but transmit the angle parameters via the\n# keyword. Note that in this case the arrow attributes are wrapped in a NamedTuple\nplot!([2.5 2.5], marker=(:matang, [2 50 350], (length=0.75, start=true, stop=true, half=:left)),\n        ml=(0.5,:red), fill=:blue, show=true)","category":"page"},{"location":"gallery/scripts_agu/matangles/","page":"Matangles","title":"Matangles","text":"<img src=\"../figs/matangles.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/scripts_agu/spiders/#Spiders","page":"Spiders","title":"Spiders","text":"","category":"section"},{"location":"gallery/scripts_agu/spiders/","page":"Spiders","title":"Spiders","text":"Plot Pies, Wedges or Web (spiders). They are all synonims. We show here three different ways of plotting this symbol (depending of its complexity)","category":"page"},{"location":"gallery/scripts_agu/spiders/","page":"Spiders","title":"Spiders","text":"plot([0.5 0.5 30 100], limits=(0,6,0,3), figscale=2.5, frame=\"afg\",\n     marker=:wedge, ms=5, fill=:lightyellow, ml=2)\nplot!([2.5 0.5 30 100], marker=:wedge, ms=5, fill=:yellow)\nplot!([0.5 1.75 30 100], marker=(web=true, size=5, arc=0.7, pen=(0.5,:red)), ml=1)\nplot!([2.5 1.75 30 100], marker=(web=true, size=5, radial=15),\n      fill=:lightyellow, ml=0.5)\n# But we can also send the Web angle info via marker and use a Tuple as argument.\nplot!([4.5 1.75], marker=(:web, [30 330], (size=5, arc=0.7, radial=15, pen=0.25)),\n      fill=:pink, ml=1, show=true)","category":"page"},{"location":"gallery/scripts_agu/spiders/","page":"Spiders","title":"Spiders","text":"<img src=\"../figs/spiders.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"frames/#Draw-Frames","page":"Draw frames examples","title":"Draw Frames","text":"","category":"section"},{"location":"frames/#Geographic-basemaps","page":"Draw frames examples","title":"Geographic basemaps","text":"","category":"section"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"Geographic base maps may differ from regular plot axes in that some projections support a “fancy” form of axis and is selected by the MAP_FRAME_TYPE setting. The annotations will be formatted according to the FORMAT_GEO_MAP template and MAPDEGREESYMBOL setting. A simple example of part of a base map is shown in Figure Geographic map border.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"using GMT\n\nbasemap(limits=(-1,2,0,0.4), proj=:Mercator, figsize=10,\n        frame=(axes=:S, annot=1, ticks=\"15m\",grid=\"5m\"))\nt = [-1.0 0 0 3.33\n      0.25 0 0 0.833\n      1.25 0 0 0.28];\narrows!(t, arrow=(length=\"2p\",start=true,stop=true,angle=60), lw=0.5,\n        fill=:black, noclip=true, y_off=-0.9)\n\nT = text_record([-0.5 0.05; 0.375 0.05; 1.29166666 0.05], [\"annotation\", \"frame\", \"grid\"]);\ntext!(T, font=9, justify=:CB, show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_geo_1\")","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"The machinery for primary and secondary annotations axes can be utilized for geographic base maps. This may be used to separate degree annotations from minutes- and seconds-annotations. For a more complicated base map example using several sets of intervals, including different intervals and pen attributes for grid lines and grid crosses.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"basemap(region=(-2,1,0,0.35), proj=:Mercator, figsize=10,\n        frame=(axes=:wSe, annot=\"15m\", ticks=\"5m\",grid=\"5m\"),\n        axis2=(annot=1, ticks=\"30m\", grid=\"15m\"),\n        conf=(MAP_FRAME_TYPE=\"fancy+\", MAP_GRID_PEN_PRIMARY=\"thinnest,black,.\",\n              MAP_GRID_CROSS_SIZE_SECONDARY=0.25, MAP_FRAME_WIDTH=0.2,\n              MAP_TICK_LENGTH_PRIMARY=0.25, FORMAT_GEO_MAP=\"ddd:mm:ssF\",\n              FONT_ANNOT_PRIMARY=\"+8\", FONT_ANNOT_SECONDARY=12))\n# Draw Arrows and text\nt = [-1.875    0 0 0.85\n     -0.45833  0 0 0.3\n      0.541666 0 0 0.3]\narrows!(t, arrow=(length=0.08, start=true, stop=true, justify=:center),\n        lw=0.5, fill=:black, y_offset=-1, no_clip=true)\nT = text_record([-2.1 0.025; -1.875 0.05; -0.45833 0.05; 0.541666 0.05],\n                [\"10p RM P:\", \"6p CB annotation\", \"6p CB frame\", \"6p CB grid\"])\ntext!(T, font=\"\", justify=\"\", no_clip=true)\nt = [-1.5 0 0 3.4; -0.25 0 0 1.7; 0.625 0 0 0.85]\narrows!(t, arrow=(length=0.08, start=true, stop=true, justify=:center),\n        lw=0.5, fill=:black, y_offset=-0.6, no_clip=true)\n\nT = text_record([-2.1 0.025; -1.5  0.05; -0.25 0.05; 0.625 0.05],\n                [\"10p RM S:\", \"9p CB annotation\", \"9p CB frame\", \"9p CB grid\"])\ntext!(T, font=\"\", justify=\"\", no_clip=true, 'show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_geo_2\")","category":"page"},{"location":"frames/#Cartesian-linear-axes","page":"Draw frames examples","title":"Cartesian linear axes","text":"","category":"section"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"For non-geographic axes, the MAP_FRAME_TYPE setting is implicitly set to plain. Other than that, cartesian linear axes are very similar to geographic axes. The annotation format may be controlled with the FORMAT_FLOAT_OUT parameter. By default, it is set to “%g”, which is a C language format statement for floating point numbers, and with this setting the various axis routines will automatically determine how many decimal points should be used by inspecting the stride settings. If FORMAT_FLOAT_OUT is set to another format it will be used directly (.e.g, “%.2f” for a fixed, two decimals format). Note that for these axes you may use the unit setting to add a unit string to each annotation.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"basemap(region=(0,12,0,1), figsize=(12,1),\n        frame=(annot=4, ticks=2, grid=1, xlabel=\"Frequency\", suffix=\"%\"),\n        axis2=(axes=\"S\",))\nt = [0 0 0 4.0; 6.0 0 0 2.0; 9.0 0 0 1.0];\narrows!(t, arrow=(length=\"2p\",start=true,stop=true,angle=60),\n        lw=0.5, fill=:black, y_offset=0.25, no_clip=true)\nT = text_record([2 0.2; 7 0.2; 9.5 0.2], [\"annotation\", \"frame\", \"grid\"]);\ntext!(T, font=9, justify=:CB, clearance=(0.025,0.025), fill=:white, show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_linear\")","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"There are occasions when the length of the annotations are such that placing them horizontally (which is the default) may lead to overprinting or too few annotations. One solution is to request slanted annotations for the x-axis via the slanted keyword in frame.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"basemap(region=(2000,2020,35,45), frame=(axes=:S, annot=2, ticks=:auto, slanted=-30),\n        show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_slanted\")","category":"page"},{"location":"frames/#Cartesian-log10-axes","page":"Draw frames examples","title":"Cartesian log10 axes","text":"","category":"section"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"Due to the logarithmic nature of annotation spacings, the stride parameter takes on specific meanings. The following concerns are specific to log axes (see Figure Logarithmic projection axis):","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"stride must be 1, 2, 3, or a negative integer -n. Annotations/ticks will then occur at 1, 1-2-5, or 1,2,3,4,...,9, respectively, for each magnitude range. For -n the annotations will take place every n‘th magnitude.\nAppend l to stride. Then, log10 of the annotation is plotted at every integer log10 value (e.g., x = 100 will be annotated as “2”) [Default annotates x as is].\nAppend p to stride. Then, annotations appear as 10 raised to log10 of the value (e.g., 10-5).","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"gmt(\"set MAP_GRID_PEN_PRIMARY thinnest,.\")\nbasemap(region=(1,1000,0,1), proj=:logx, figsize=(8,0.7),\n        frame=(axes=:S, annot=1, ticks=2, grid=3, scale=:pow, xlabel=\"Axis Label\"))\nbasemap!(frame=(axes=:S, annot=1, ticks=2, grid=3, scale=:log,\n                xlabel=\"Axis Label\"), y_offset=2.2)\nbasemap!(frame=(axes=:S, annot=1, ticks=2, grid=3,\n                xlabel=\"Axis Label\"), y_offset=2.2, show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_log\")","category":"page"},{"location":"frames/#Cartesian-exponential-axes","page":"Draw frames examples","title":"Cartesian exponential axes","text":"","category":"section"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"Normally, stride will be used to create equidistant (in the user’s unit) annotations or ticks, but because of the exponential nature of the axis, such annotations may converge on each other at one end of the axis. To avoid this problem, you can append p to stride, and the annotation interval is expected to be in transformed units, yet the annotation itself will be plotted as un-transformed units. E.g., if stride = 1 and power = 0.5 (i.e., sqrt), then equidistant annotations labeled 1, 4, 9, ... will appear.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"gmt(\"set MAP_GRID_PEN_PRIMARY thinnest,.\")\nasemap(region=(0,100,0,0.9), proj=\"powx,0.5\", figsize=(10, 0.65),\n       frame=(axes=:S, annot=3, ticks=2, grid=1, scale=:pow, xlabel=\"Axis Label\"))\nbasemap!(frame=(axes=:S, annot=20, ticks=10, grid=5, xlabel=\"Axis Label\"),\n         y_offset=2.2, show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_pow\")","category":"page"},{"location":"frames/#Cartesian-time-axes","page":"Draw frames examples","title":"Cartesian time axes","text":"","category":"section"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"What sets time axis apart from the other kinds of plot axes is the numerous ways in which we may want to tick and annotate the axis. Not only do we have both primary and secondary annotation items but we also have interval annotations versus tick-mark annotations, numerous time units, and several ways in which to modify the plot. We will demonstrate this flexibility with a series of examples. While all our examples will only show a single x-axis (south, selected via -BS), time-axis annotations are supported for all axes.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"Our first example shows a time period of almost two months in Spring 2000. We want to annotate the month intervals as well as the date at the start of each week. Note the leading hyphen in the FORMATDATEMAP removes leading zeros from calendar items (e.g., 03 becomes 3).","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"basemap(region=\"2000-4-1T/2000-5-25T/0/1\", figsize=(12,0.5),\n        frame=(axes=:S, annot=7, annot_unit=:day_week, ticks=1, ticks_unit=:day_date),\n        axis2=(annot=1, annot_unit=:month),\n        conf=(FORMAT_DATE_MAP=\"-o\", FONT_ANNOT_PRIMARY=\"+9p\"), show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_time1\")","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"The next example shows two different ways to annotate an axis portraying 2 days in July 1969:","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"gmtset(FORMAT_DATE_MAP=\"\\\"o dd\\\"\", FORMAT_CLOCK_MAP=\"hh:mm\", FONT_ANNOT_PRIMARY=9)\nbasemap(region=\"1969-7-21T/1969-7-23T/0/1\", figsize=(12,0.5),\n        frame=(axes=:S, annot=6, annot_unit=:hour, ticks=1, ticks_unit=:hour2),\n        axis2=(annot=1, annot_unit=:ISOweekday))\nbasemap!(frame=(axes=:S, annot=6, annot_unit=:H, ticks=1, ticks_unit=:hour2),\n         axis2=(annot=1, annot_unit=:date), y_offset=1.7, show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"The lower example chooses to annotate the weekdays (by specifying a1K) while the upper example choses dates (by specifying a1D). Note how the clock format only selects hours and minutes (no seconds) and the date format selects a month name, followed by one space and a two-digit day-of-month number.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_time2\")","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"The lower example chooses to annotate the weekdays (by specifying a1K) while the upper example choses dates (by specifying a1D). Note how the clock format only selects hours and minutes (no seconds) and the date format selects a month name, followed by one space and a two-digit day-of-month number.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"The third example presents two years, annotating both the years and every 3rd month.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"basemap(region=(\"1997T\",\"1999T\",0,1), figsize=(12,0.25),\n        frame=(axes=:S, annot=3, annot_unit=:month, ticks=1, ticks_unit=:month2),\n        xaxis2=(annot=1, annot_unit=:Y),\n        conf=(FORMAT_DATE_MAP=\"o\", FORMAT_TIME_PRIMARY_MAP=\"Character\", FONT_ANNOT_PRIMARY=\"+9p\"),\n        show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"Note that while the year annotation is centered on the 1-year interval, the month annotations must be centered on the corresponding month and not the 3-month interval. The FORMAT_DATE_MAP selects month name only and FORMAT_TIME_PRIMARY_MAP selects the 1-character, upper case abbreviation of month names using the current language (selected by GMT_LANGUAGE).","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_time3\")","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"The fourth example only shows a few hours of a day, using relative time by specifying t in the region option while the TIME_UNIT is d (for days). We select both primary and secondary annotations, ask for a 12-hour clock, and let time go from right to left:","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"basemap(region=(\"0.2t\",\"0.35t\",0,1), figsize=(-12,0.25),\n        frame=(axes=:S, annot=\"15m\", ticks=\"5m\"), axis2=(annot=1, annot_unit=:hour),\n        conf=(FORMAT_CLOCK_MAP=\"-hham\", FONT_ANNOT_PRIMARY=\"+9p\", TIME_UNIT=\"d\"),\n        show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_time4\")","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"The fifth example shows a few weeks of time (Figure Cartesian time axis, example 5). The lower axis shows ISO weeks with week numbers and abbreviated names of the weekdays. The upper uses Gregorian weeks (which start at the day chosen by TIME_WEEK_START); they do not have numbers.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"basemap(region=\"1969-7-21T/1969-8-9T/0/1\", figsize=(12,0.25),\n        frame=(axes=:S, annot=1, annot_unit=:ISOweekday),\n        axis2=(annot=1, annot_unit=:ISOweek),\n        conf=(FORMAT_DATE_MAP=:u, FORMAT_TIME_PRIMARY_MAP=:Character, FORMAT_TIME_SECONDARY_MAP=:full, FONT_ANNOT_PRIMARY=9))\nbasemap!(frame=(axes=:S, annot=3, annot_unit=:ISOweekday, ticks=1, ticks_unit=:weekday),\n         axis2=(annot=1, annot_unit=:Gregorian_week),\n         conf=(FORMAT_DATE_MAP=:o, TIME_WEEK_START=:Sunday, FORMAT_TIME_SECONDARY_MAP=:Character),\n         y_offset=1.7, show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_time5\")","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"Our sixth example shows the first five months of 1996, and we have annotated each month with an abbreviated, upper case name and 2-digit year. Only the primary axes information is specified.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"basemap(region=(\"1996T\",\"1996-6T\",0,1), figsize=(12,0.25),\n        frame=(axes=:S, annot=1, annot_unit=:month, ticks=1, ticks_unit=:day_date),\n        conf=(FORMAT_DATE_MAP=\"\\\"o yy\\\"\", FORMAT_TIME_PRIMARY_MAP=\"Abbreviated\"),\n        show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_time6\")","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"Our seventh and final example illustrates annotation of year-days. Unless we specify the formatting with a leading hyphen in FORMAT_DATE_MAP we get 3-digit integer days. Note that in order to have the two years annotated we need to allow for the annotation of small fractional intervals; normally such truncated interval must be at least half of a full interval.","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"using GMT\nbasemap(region=(\"2000-12-15T\",\"2001-1-15T\",0,1), figsize=(12,0.25),\n        frame=(axes=:S, annot=5, annot_unit=:date, ticks=1, ticks_unit=:day_date),\n        axis2=(annot=1, annot_unit=:year),\n        conf=(FORMAT_DATE_MAP=\"jjj\", TIME_INTERVAL_FRACTION=0.05, FONT_ANNOT_PRIMARY=\"+9p\"),\n        show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_time7\")","category":"page"},{"location":"frames/#Custom-axes","page":"Draw frames examples","title":"Custom axes","text":"","category":"section"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"    basemap(region=(416,542,0,6.2831852), figsize=(-12,5),\n            frame=(frame=(:left_full, :bot_full), fill=:lightblue),\n            xaxis=(annot=25, ticks=5, grid=25, suffix=\" Ma\"),\n            yaxis=(custom=(pos=[0 1 2 2.71828 3 3.1415926 4 5 6 6.2831852],\n                type=[\"a\", \"a\", \"f\", \"ag e\", \"f\", \"ag @~p@~\", \"f\", \"f\", \"f\", \"ag 2@~p@~\"]),),)\n\n    basemap!(frame=(axes=(:left_full, :bot_full),),\n            xaxis2=(custom=(pos=[416.0, 443.7, 488.3, 542],\n                            type=[\"ig Devonian\", \"ig Silurian\", \"ig Ordovician\", \"ig Cambrian\"]),),\n            par=(MAP_ANNOT_OFFSET_SECONDARY=\"10p\", MAP_GRID_PEN_SECONDARY=\"2p\"), show=true)","category":"page"},{"location":"frames/","page":"Draw frames examples","title":"Draw frames examples","text":"(Image: \"B_time7\")","category":"page"},{"location":"gallery/historic/ex12/#Optimal-triangulation-of-data","page":"Optimal triangulation of data","title":"Optimal triangulation of data","text":"","category":"section"},{"location":"gallery/historic/ex12/","page":"Optimal triangulation of data","title":"Optimal triangulation of data","text":"    table_5 = gmtread(\"@table_5.11\", table=true)    # The data used in this example\n    net_xy = triangulate(table_5, network=true);\n    plot(net_xy, region=(0,6.5,-0.2,6.5), frame=(axes=:WSNe, annot=2, ticks=1),\n         lw=:thinner, figsize=(7.8, 8), x_off=2.3, y_off=11.8)\n    plot!(table_5, marker=:circle, ms=0.3, fill=:white, MarkerLine=:thinnest)\n    text!(table_5, attrib=(font=(6,), rec_number=0))\n\n    # Then draw network and print the node values\n    plot!(net_xy, frame=(axes=:eSNw, annot=2, ticks=1), lw=:thinner, x_off=8.4)\n    plot!(table_5, marker=:circle, ms=0.08, fill=:black)\n    text!(table_5, attrib=(font=(6,), justify=:LM), fill=:white, pen=\"\",\n          clearance=0.03, offset=(0.2,0), noclip=true)\n\n    # Then contour the data and draw triangles using dashed pen\n    # Use \"gmtinfo\" and \"makecpt\" to make a color palette,\n    # but since gmtinfo -T reports a leading \"-T\" we need to strip it\n    T = gmtinfo(table_5, nearest_multiple=(dz=25, col=2))\n    makecpt(color=:jet, range=T[1].text[1][3:end])  # Make it also the current cmap\n    contour!(table_5, frame=(axes=:WSne, annot=2, ticks=1), pen=:thin,\n             mesh=(:thinnest,:dashed), labels=(dist=2.5,), x_off=-8.4, y_off=-9.3)\n    contour!(table_5, frame=(axes=:eSnw, annot=2, ticks=1), colorize=true, x_off=8.4)\n    text!(text_record([8 20], \"Delaunay Triangulation\"), region=(0,20,0,28),\n          attrib=(font=(30,\"Helvetica-Bold\"), justify=:CB), proj=:linear,\n          figscale=1, x_off=-8.4, show=true)","category":"page"},{"location":"gallery/historic/ex12/","page":"Optimal triangulation of data","title":"Optimal triangulation of data","text":"See also GMT ex12","category":"page"},{"location":"gallery/historic/ex15/#Gridding,-contouring,-and-masking-of-unconstrained-areas","page":"Gridding, contouring, and masking of unconstrained areas","title":"Gridding, contouring, and masking of unconstrained areas","text":"","category":"section"},{"location":"gallery/historic/ex15/","page":"Gridding, contouring, and masking of unconstrained areas","title":"Gridding, contouring, and masking of unconstrained areas","text":"    ship_d = gmtread(\"@ship_15.xyz\", table=true)\n    region = gmtinfo(ship_d, inc=1)\n\n    R = region[1].text[1][3:end]\n    Gship  = nearneighbor(ship_d, region=R, inc=\"10m\", S=\"40k\")\n    grdcontour(Gship, frame=(axes=:WSne, annot=2), cont=250, annot=1000,\n               labels=(dist=5,), proj=:merc, figsize=7.5)\n\n    ship_10m = blockmedian(ship_d, region=R, inc=\"10m\")\n    Gship = surface(ship_10m, region=R, inc=\"10m\")\n    mask!(ship_d, region=R, inc=\"10m\", fill=:lightgray, tiles=true, x_off=9.1)\n    grdcontour!(Gship, cont=250, annot=1000, labels=(dist=5,),\n                range=(-8000,0), frame=:same)\n\n    mask!(ship_10m, region=R, inc=\"10m\", x_off=-9.1, y_off=9.5, frame=:same)\n    grdcontour!(Gship, cont=250, annot=1000, labels=(dist=5,), range=(-8000,0))\n    mask!(end_clip_path=true)   \n\n    Gship_clipped = grdclip(Gship, above=\"-1/NaN\")\n    grdcontour!(Gship_clipped, cont=250, annot=1000, labels=(dist=5,),\n                range=(-8000,0), x_off=9.1)\n    coast!(land=:gray, shore=:thinnest, frame=:same)\n    info = grdinfo(Gship, C=\"n\", minmax_pos=true)\n    plot!(info, marker=:star, ms=0.4, i=\"10,11\", lw=:thick)\n    text!(text_record([-0.3 3.6], \"Gridding with missing data\"), region=(0,3,0,4),\n          font=(24,\"Helvetica-Bold\"), justify=:CB, no_clip=true, figscale=\"1i\",\n          proj=:linear, show=1)","category":"page"},{"location":"gallery/historic/ex15/","page":"Gridding, contouring, and masking of unconstrained areas","title":"Gridding, contouring, and masking of unconstrained areas","text":"See also GMT ex15","category":"page"},{"location":"gallery/scripts_agu/histo_step/#Stepped-patch-histogram","page":"Stepped patch histogram","title":"Stepped patch histogram","text":"","category":"section"},{"location":"gallery/scripts_agu/histo_step/","page":"Stepped patch histogram","title":"Stepped patch histogram","text":"Draw a histogram as a stepped patch","category":"page"},{"location":"gallery/scripts_agu/histo_step/","page":"Stepped patch histogram","title":"Stepped patch histogram","text":"D1 = histogram(randn(1000), I=:o, bin=0.1);  # Create histogrammed data with bin = 0.1 (I=:o to create the dataset)\nD2 = histogram(randn(500),  I=:o, bin=0.1);\n\nlines(D1,                    # The data\n      steps=(x=true,),       # Make steps a xx\n      close=(bot=\"\",),       # Close polygon at the bottom\n      fill=(pattern=20, bg=:green, dpi=200),    # Set the pattern code, the background color and dpi\n      figsize=(15,10))       # Set fig size of 15x10 cm\nlines!(D2,                   # Second dataset\n      steps=(x=true,),       \n      close=(bot=\"\",),\n      fill=(pattern=82,bg=:blue,dpi=100),\n      title=\"Stepped patch histogram\",\n      show=true)            # Show the result","category":"page"},{"location":"gallery/scripts_agu/histo_step/","page":"Stepped patch histogram","title":"Stepped patch histogram","text":"As one-liners (to facilitate copy-paste):","category":"page"},{"location":"gallery/scripts_agu/histo_step/","page":"Stepped patch histogram","title":"Stepped patch histogram","text":"D1 = histogram(randn(1000), I=:o, bin=0.1);\nD2 = histogram(randn(500),  I=:o, bin=0.1);\nlines(D1,  steps=(x=true,), close=(bot=\"\",), fill=(pattern=20,bg=:green,dpi=200), figsize=(15,10))\nlines!(D2, steps=(x=true,), close=(bot=\"\",), fill=(pattern=82,bg=:blue,dpi=100), title=\"Stepped patch histogram\", show=true)","category":"page"},{"location":"gallery/scripts_agu/histo_step/","page":"Stepped patch histogram","title":"Stepped patch histogram","text":"<img src=\"../figs/histo_step.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"gallery/historic/ex28/#Mixing-UTM-and-geographic-data-sets","page":"Mixing UTM and geographic data sets","title":"Mixing UTM and geographic data sets","text":"","category":"section"},{"location":"gallery/historic/ex28/","page":"Mixing UTM and geographic data sets","title":"Mixing UTM and geographic data sets","text":"\t# Set up a color table\n\tKilauea_cpt = makecpt(cmap=:copper, range=(0, 1500))\n\t# Lay down the UTM topo grid using a 1:160,000 scale\n\tgrdimage(\"@Kilauea.utm.nc\", frame=:none, shade=:default, proj=:linear,\n             figscale=\"1:160000\", par=(FORMAT_FLOAT_OUT=\"%.10g\", FONT_ANNOT_PRIMARY=9))\n\t# Overlay geographic data and coregister by using correct region and gmt(\"projection with the same scale\n\tcoast!(region=\"@Kilauea.utm.nc\", proj=:UTM5Q, figscale=\"1:160000\",\n           res=:full, water=:lightblue, shore=0.5, frame=(axes=:NE, annot=\"5m\", grid=\"5m\"),\n           par=(FONT_ANNOT_PRIMARY=12, FORMAT_GEO_MAP=\"ddd:mmF\"))\n\ttext!(text_record([-155.27222 19.43889], \"KILAUEA\"), font=(12,\"Helvetica-Bold\"), justify=:CB)\n\tbasemap!(map_scale=(inside=true, anchor=:RB, scale_at_lat=\"19:23N\", fancy=true,\n                        length=\"5k\", label=\"1:160,000\", units=true, offset=0.5),\n             par=(FONT_LABEL=10, FONT_ANNOT_PRIMARY=9))\n\t# Annotate in km but append ,000m to annotations to get customized meter labels\n\tbasemap!(region=\"@Kilauea.utm.nc+Uk\", proj=:linear, figscale=\"1:160\",\n             frame=(axes=:WSne, annot=5, grid=5, suffix=\"@:8:000m@::\"),\n             par=(FONT_ANNOT_PRIMARY=10, MAP_GRID_CROSS_SIZE_PRIMARY=0.25, FONT_LABEL=10), show=1)","category":"page"},{"location":"gallery/historic/ex28/","page":"Mixing UTM and geographic data sets","title":"Mixing UTM and geographic data sets","text":"See also GMT ex28","category":"page"},{"location":"arrows/#arrows","page":"arrows","title":"arrows","text":"","category":"section"},{"location":"arrows/","page":"arrows","title":"arrows","text":"arrows(cmd0::String=\"\", arg1=nothing; kwargs...)","category":"page"},{"location":"arrows/","page":"arrows","title":"arrows","text":"Reads (x,y,a,b) data and make arrow plots. The input can either be a file name of a file with at least four columns, but optionally more, or an Mx2 Array or GMTdatset object with the same characteristics in terms of columns number.","category":"page"},{"location":"arrows/","page":"arrows","title":"arrows","text":"This module is a subset of plot to make it simpler to draw arrow plots. So not all (fine) controlling parameters are not listed here. For the finest control, user should consult the plot module.","category":"page"},{"location":"arrows/#Parameters","page":"arrows","title":"Parameters","text":"","category":"section"},{"location":"arrows/","page":"arrows","title":"arrows","text":"B or axes or frame\nSet map boundary frame and axes attributes. Default is to draw and annotate left and bottom axes. More at frame\nJ or proj : proj=<parameters>\nSelect map projection. Default is linear and 14 cm width. More at proj\nR or region or limits : – limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more \n Specify the region of interest. Default limits are computed from data extents. More at limits\nG or markerfacecolor or MarkerFaceColor or mc or fill\n Select color or pattern for filling of vector heads [Default is no fill]. See Setting color  for extend color selection (including colormap generation).\nW or pen=pen\n Set pen attributes for the arrow stem [Defaults: width = default, color = black,  style = solid]. See Pen attributes\narrow\n Direction (in degrees counter-clockwise from horizontal) and length must be found in columns 3 and 4,  and size, if not specified on the command-line, should be present in column 5. The size is the length of  the vector head. Vector stem width is set by pen. By default, a vector head of 0.5 cm is set but see  Vector Attributes for overwriting this default and specifying other attributes.\nU or time_stamp : – time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n","category":"page"},{"location":"arrows/","page":"arrows","title":"arrows","text":"V or verbose : – verbose=true | verbose=level\n Select verbosity level. More at verbose\nX or x_off or x_offset : – x_off=[] | x_off=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : – y_off=[] | y_off=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off","category":"page"},{"location":"arrows/#Examples","page":"arrows","title":"Examples","text":"","category":"section"},{"location":"arrows/","page":"arrows","title":"arrows","text":"Plot a single arrow with head and tail.","category":"page"},{"location":"arrows/","page":"arrows","title":"arrows","text":"    arrows([0 8.2 0 6], limits=(-1,4,7,9), arrow=(len=2,start=:arrow,stop=:tail,shape=0.5),\n           figsize=(12,4), axes=:a, pen=\"4p\", show=true)","category":"page"},{"location":"arrows/","page":"arrows","title":"arrows","text":"Let us see the effect of the scale factor in quiver plots (components given in u,v). Plot a single vector with length 0f ~7 cm (sqrt(50)). Notice that map limits and map size are equal to 5.","category":"page"},{"location":"arrows/","page":"arrows","title":"arrows","text":"   arrows([0.0 0 5 5], limits=(0,5,0,5), figsize=5, frame=(annot=:a, grid=1),\n          arrow=(len=0.5,stop=1,uv=1), show=true)","category":"page"},{"location":"arrows/","page":"arrows","title":"arrows","text":"now, we increase the fig size to 10 cm and because the vector magnitude is half ot it (= 7) we see that the vector is now plot from 0 to ~3.54 figure units. In fact, the vector has exactly the same size as in previous example but the figure is now twice as large.","category":"page"},{"location":"arrows/","page":"arrows","title":"arrows","text":"   arrows([0.0 0 5 5], limits=(0,5,0,5), figsize=10, frame=(annot=1, ticks=0.5, grid=1),\n          arrow=(len=0.5,stop=1,uv=1), show=true)","category":"page"},{"location":"arrows/","page":"arrows","title":"arrows","text":"and finally we will change the vector size again but this time by applying a factor scale of 0.5. The vector is now ~1.77 figure units long.","category":"page"},{"location":"arrows/","page":"arrows","title":"arrows","text":"   arrows([0.0 0 5 5], limits=(0,5,0,5), figsize=10, frame=(annot=0.5, ticks=0.25, grid=0.5),\n          arrow=(len=0.5,stop=1,uv=0.5), show=true)","category":"page"},{"location":"gallery/isc/","page":"Advanced ISC example","title":"Advanced ISC example","text":"Analyzing and Visualizing Geospatial Data","category":"page"},{"location":"gallery/historic/ex42/#Antarctica-and-stereographic-data","page":"Antarctica and stereographic data","title":"Antarctica and stereographic data","text":"","category":"section"},{"location":"gallery/historic/ex42/","page":"Antarctica and stereographic data","title":"Antarctica and stereographic data","text":"\t# Data obtained via website and converted to netCDF thus:\n\t# curl http://www.antarctica.ac.uk//bas_research/data/access/bedmap/download/bedelev.asc.gz\n\t# gunzip bedelev.asc.gz\n\t# grdreformat bedelev.asc BEDMAP_elevation.nc=ns -V\n\tmakecpt(cmap=:earth, range=(-7000,4000))\n\tgrdimage(\"@BEDMAP_elevation.nc\", frame=:none, proj=:linear,\n             figscale=\"1:60000000\", nan_alpha=true)\n\tcoast!(region=(-180,180,-90,-60), frame=\"afg\", shore=0.25,\n    proj=(name=:stere, center=(0,-90), parallel=-71), figscale=\"1:60000000\")\n\tcolorbar!(pos=(inside=true, anchor=:RM, length=(6.4,0.5),\n              offset=(1.25,0), justify=:LM, neon=true), box=(pen=true, inner=true),\n              xaxis=(annot=1000, label=:ELEVATION), ylabel=:m)\n\t# GSHHG\n\tcoast!(land=:lightblue, water=:royalblue2, frame=\"none\", x_off=5, y_off=12)\n\tcoast!(land=:lightbrown, frame=\"afg\", area=\"+ag\")\n\tlegend!(region=(-180,180,-90,-60), box=(pen=true, inner=true),\n            pos=(inside=true, anchor=:LM, width=4.3, justify=:RM, offset=(1.25,0)),\n            text_record([\n                        \"H 18p,Times-Roman Legend\"\n                        \"D 0.1i 1p\"\n                        \"S 0.15i s 0.2i blue  0.25p 0.3i Ocean\"\n                        \"S 0.15i s 0.2i lightblue  0.25p 0.3i Ice front\"\n                        \"S 0.15i s 0.2i lightbrown  0.25p 0.3i Grounding line\"]))\n\t# Fancy line\n\tplot!(region=(0,7.5,0,10), proj=:linear, figscale=2.5, frame=:bare, lw=2,\n          x_off=-6.35, y_off=-13.3,\n            [0 5.55\n            2.5 5.55\n            5.0 4.55\n            7.5 4.55])\n\n\ttext!(text_record([0 5.2; 0 9.65], [\"BEDMAP\", \"GSHHG\"]), font=18, justify=:BL,\n          offset=(away=true, shift=(0.25,0)), show=true)","category":"page"},{"location":"gallery/historic/ex42/","page":"Antarctica and stereographic data","title":"Antarctica and stereographic data","text":"See also GMT ex42","category":"page"},{"location":"gallery/historic/ex02/#Image-presentations","page":"Image presentations","title":"Image presentations","text":"","category":"section"},{"location":"gallery/historic/ex02/","page":"Image presentations","title":"Image presentations","text":"\t# Purpose:\tMake two color images based gridded data\n\t# GMT progs:\tgmtset, grd2cpt, grdgradient, grdimage, makecpt, colorbar, pstext\n\n\tgmtset(FONT_TITLE=30, MAP_ANNOT_OBLIQUE=0)\n\tg_cpt = makecpt(color=:rainbow, T=(-2,14,2))\n\tgrdimage(\"@HI_geoid_02.nc\", region=(bb=(160,220,20,30), diag=true),\n\t         proj=(name=:omercp, center=[190 25.5], parallels=[292 69]),\n\t         color=g_cpt, dpi=50, frame=(annot=10,), x_off=3.8, y_off=3.2, figsize=12)\n\tcolorbar!(g_cpt, pos=(anchor=:RM, offset=(1.5,0), triangles=true, neon=true),\n\t          xaxis=(annot=2, label=:GEOID), yaxis=(label=:m,))\n\tt_cpt = grd2cpt(\"@HI_topo_02.nc\", cmap=:relief, continuous=true)\n\tgrdimage!(\"@HI_topo_02.nc\", frame=(title=\"H@#awaiian@# T@#opo and @#G@#eoid@#\", annot=10),\n\t          shade=\"+a0\", dpi=50, color=t_cpt, y_off=11, par=(:MAP_TITLE_OFFSET, 1.25))\n\tcolorbar!(t_cpt, pos=(anchor=:RM, offset=(1.5,0), neon=true), shade=0.3,\n\t          xaxis=(annot=2, label=:TOPO), yaxis=(label=:km,))\n\tT = text_record([-0.4 7.5; -0.4 3.0], [\"a)\", \"b)\"])\n\ttext!(T, region=(0,21.6,0,29.94), attrib=(font=(30,\"Helvetica-Bold\"), justify=:CB),\n\t      y_off=12, proj=:linear, scale=1, show=1)","category":"page"},{"location":"gallery/historic/ex02/","page":"Image presentations","title":"Image presentations","text":"See also GMT ex02","category":"page"},{"location":"monolitic/#Monolithic","page":"Monolithic","title":"Monolithic","text":"","category":"section"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"In this mode all GMT options are put in a single text string that is passed, plus the data itself when it applies, to the gmt() command. This function is invoked with the syntax (where the brackets mean optional parameters):","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"[output objects] = gmt(\"modulename optionstring\" [, input objects]);","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"where modulename is a string with the name of a GMT module (e.g., surface, grdimage, psmeca, or even a custom extension), while the optionstring is a text string with the options passed to this module. If the module requires data inputs from the Julia environment, then these are provided as optional comma-separated arguments following the option string. Should the module produce output(s) then these are captured by assigning the result of gmt to one or more comma-separated variables. Some modules do not require an option string or input objects, or neither, and some modules do not produce any output objects.","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"In addition, it can also use two i/o modules that are irrelevant on the command line: the read and write modules. These modules allow to import and export any of the GMT data types to and from external files. For instance, to import a grid from the file relief.nc we run","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"G = gmt(\"read -Tg relief.nc\");","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"We use the -T option to specify grid (g), image (i), PostScript (p), color palette (c), dataset (d) or textset (t). Results kept in Julia can be written out at any time via the write module, e.g., to save the grid Z to a file we use","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"gmt(\"write model_surface.nc\", Z);","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Because GMT data tables often contain headers followed by many segments, each with their individual segment headers, it is best to read such data using the read module since native Julia import functions risk to choke on such headers.","category":"page"},{"location":"monolitic/#How-input-and-output-are-assigned","page":"Monolithic","title":"How input and output are assigned","text":"","category":"section"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Each GMT module knows what its primary input and output objects should be. Some modules only produce output (e.g., psbasemap makes a basemap plot with axes annotations) while other modules only expect input and do not return any items back (e.g., the write module writes the data object it is given to a file). Typically, (i.e., on the command line) users must carefully specify the input filenames and sometimes give these via a module option. Because users of this wrapper will want to provide input from data already in memory and likewise wish to assign results to variables, the syntax between the command line and Julia commands necessarily must differ. For example, here is a basic GMT command that reads the time-series raw_data.txt and filters it using a 15-unit full-width (6 sigma) median filter:","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"gmt filter1d raw_data.txt –Fm15 > filtered_data.txt","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Here, the input file is given on the command line but input could instead come via the shell’s standard input stream via piping. Most GMT modules that write tables will write these to the shell’s output stream and users will typically redirect these streams to a file (as in our example) or pipe the output into another process. When using GMT.jl there are no shell redirections available. Instead, we wish to pass data to and from the Julia environment. If we assume that the content in raw_data.txt exists in a array named raw_data and we wish to receive the filtered result as a segment array named filtered, we would run the command","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"filtered = gmt(\"filter1d -Fm15\", raw_data);","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"This illustrates the main difference between command line and Julia usage: Instead of redirecting output to a file we return it to an internal object (here, a segment array) using standard Julia assignments of output.","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"For data types where piping and redirection of output streams are inappropriate (including most grid file formats) the GMT modules use option flags to specify where grids should be written. Consider a GMT command that reads (x, y, z) triplets from the file depths.txt and produces an equidistant grid using a Green’s function-based spline-in-tension gridding routine:","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"gmt greenspline depths.txt -R-50/300/200/600 -I5 -D1 -St0.3 -Gbathy.nc","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Here, the result of gridding Cartesian data (-D1) within the specified region (an equidistant lattice from x from -50 to 300 and y from 200 to 600, both with increments of 5) using moderately tensioned cubic splines (-St0.3) is written to the netCDF file bathy.nc. When using GMT.jl we do not want to write a file but wish to receive the resulting grid as a new Julia variable. Again, assuming we already loaded in the input data, the equivalent command is","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"bathy = gmt(\"greenspline -R-50/300/200/600 -I5 -D1 -St0.3\", depths);","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Note that -G is no longer specified among the options. In this case the wrapper uses the GMT API to determine that the primary output of greenspline is a grid and that this is specified via the -G option. If no such option is given (or given without specifying a filename), then we instead return the grid via memory, provided a left-side assignment is specified. GMT only allows this behavior when called via an external API such as this wrapper: Not specifying the -G option on the command line would result in an error message. However, it is perfectly fine to specify the option -Gbathy.nc in Julia – it simply means you are saving the result to a file instead of returning it to Julia.","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Some GMT modules can produce more than one output (here called a secondary outputs) or can read more than one input type (i.e., secondary inputs). Secondary inputs or outputs are always specified by explicit module options on the command line, e.g., -Fpolygon.txt. In these cases, the gmt() enforces the following rules: When a secondary input is passed as an object then we must specify the corresponding option flag but provide no file argument (e.g., just -F in the above case). Likewise, for secondary output we supply the option flag and add additional objects to the left-hand side of the assignment. All secondary items, whether input or output, must appear after all primary items, and if more than one secondary item is given then their order must match the order of the corresponding options in option string.","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Here are two examples contrasting the GMT command line versus gmt() usage. In the first example we wish to determine all the data points in the file all_points.txt that happen to be located inside the polygon specified in the file polygon.txt. On the command line this would be achieved by","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"gmt select points.txt -Fpolygon.txt > points_inside.txt","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"while in Julia (assuming the points and polygon already reside in memory) we would run","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"inside = gmt(\"gmtselect -F\", points, polygon);","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Here, the points object must be listed first since it is the primary data expected.","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Our second example considers the joining of line segments into closed polygons. We wish to create one file with all closed polygons and another file with any remaining disjointed lines. Not expecting perfection, we allow segment end-points closer than 0.1 units to be connected. On the command line we would run","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"gmt connect all_segments.txt -Cclosed.txt -T0.1 > rest.txt","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"where all_segments.txt are the input lines, closed.txt is the file that will hold closed polygons made from the relevant lines, while any remaining lines (i.e., open polygons) are written to standard output and redirected to the file rest.txt. Equivalent Julia usage would be","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"all = gmt(\"read -Td all_segments.txt\");\nrest, closed = gmt(\"gmtconnect -T0.1 -C\", all);","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Note the primary output (here rest) must be listed before any secondary outputs (here closed) in the left-hand side of the assignment.","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"So far, the gmt() function has been able to understand where inputs and outputs objects should be inserted, provided we follow the rules introduced above. However, there are two situations where more information must be provided. The first situation involves two GMT modules that allow complete freedom in how arguments are passed. These are gmtmath and grdmath, our reverse polish notation calculators for tables and grids, respectively. While the command-line versions require placement of arguments in the right order among the desired operators, the gmt() necessarily expects all inputs at the end of the function call. Hence we must assist the command by placing markers where the input arguments should be used; the marker we chose is the question mark (?). We will demonstrate this need using an example of grdmath. Imagine that we have created two separate grids: kei.nc contains an evaluation of the radial z = bei(r) Kelvin-Bessel function while cos.nc contains a cylindrical undulation in the x-direction. We create these two grids on the command line by","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"gmt grdmath -R-4/4/-4/4 -I256+ X Y HYPOT KEI = kei.nc\ngmt grdmath -R -I256+ X COS = cos.nc","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Later, we decide we need pi plus the product of these two grids, so we compute","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"gmt grdmath kei.nc cos.nc MUL PI ADD = answer.nc","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"In Julia the first two commands are straightforward:","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"kei = gmt(\"grdmath -R-4/4/-4/4 -I256+ X Y HYPOT KEI\");\nC   = gmt(\"grdmath -R -I256+ X COS\");","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"but when time comes to perform the final calculation we cannot simply do","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"answer = gmt(\"grdmath MUL PI ADD\", kei, C);","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"since grdmath would not know where kei and C should be put in the context of the operators MUL and ADD. We could probably teach grdmath to discover the only possible solution since the MUL operator requires two operands but none are listed on the command line. The logical choice then is to take kei and C as operands. However, in the general case it may not be possible to determine a unique layout, but more importantly it is simply too confusing to separate all operators from their operands (other than constants) as we would lose track of the mathematical operation we are performing. For this reason, we will assist the module by inserting question marks where we wish the module to use the next unused input object in the list. Hence, the valid command becomes","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"answer = gmt(\"grdmath ? ? MUL PI ADD\", kei, C);","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"Of course, all these calculations could have been done at once with no input objects but often we reuse results in different contexts and then the markers are required. The second situation arises if you wish to use a grid as argument to the -R option (i.e., to set the current region to that of the grid). On the command line this may look like","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"gmt pscoast -Reurope.nc -JM5i –P -Baf -Gred > map.ps","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"However, in Julia we cannot simply supply -R with no argument since that is already an established shorthand for selecting the previously specified region. The solution is to supply –R?. Assuming our grid is called europe then the Julia command would become","category":"page"},{"location":"monolitic/","page":"Monolithic","title":"Monolithic","text":"map = gmt(\"pscoast -R? -JM5i -P -Baf -Gred\", europe);","category":"page"},{"location":"gallery/historic/ex14/#Gridding-of-data-and-trend-surfaces","page":"Gridding of data and trend surfaces","title":"Gridding of data and trend surfaces","text":"","category":"section"},{"location":"gallery/historic/ex14/","page":"Gridding of data and trend surfaces","title":"Gridding of data and trend surfaces","text":"    plot(\"@table_5.11\", limits=(0,7,0,7), frame=(axes=:WSNe, annot=2, ticks=1),\n         marker=:circle, ms=0.15, fill=:black, figsize=(8,8), y_off=17)\n    text!(\"@table_5.11\", offset=(0.1,0), font=6,  justify=:LM, noclip=true)\n    mean_xyz = blockmean(\"@table_5.11\", region=(0,7,0,7), inc=1);\n\n    # Then draw gmt blockmean cells\n    basemap!(region=(0.5,7.5,0.5,7.5), frame=(grid=1,), x_off=8.3)\n    plot!(mean_xyz, limits=(0,7,0,7), frame=(axes=:eSNw, annot=2, ticks=1),\n          marker=:square, ms=0.15, fill=:black)\n    # Label data values using one decimal\n    text!(mean_xyz, font=6, justify=:LM, zvalues=\"%.1f\", offset=(0.15,0),\n          fill=:white, clearance=0.03, pen=true, noclip=true)\n\n    # Then gmt surface and contour the data\n    Gdata = surface(mean_xyz, R=\"\", inc=1);\n    grdcontour!(Gdata, frame=(axes=:WSne, annot=2, ticks=1), cont=25, annot=50,\n                labels=(dist=7,), smooth=4, x_off=-8.3, y_off=-9)\n    plot!(mean_xyz, marker=:square, ms=0.12, fill=:black)\n\n    # Fit bicubic trend to data and compare to gridded gmt surface\n    Gtrend = grdtrend(Gdata, N=10, T=true);\n    track  = project(C=(0,0), E=(7,7), G=0.1, flat_earth=true);\n    grdcontour!(Gtrend, frame=(axes=:wSne, annot=2, ticks=1), cont=25, annot=50,\n                smooth=4, labels=(line=\"CT/CB\",), x_off=8.3)\n    plot!(track, pen=(:thick, :dot))\n\n    # Sample along diagonal\n    data  = grdtrack(track, G=Gdata, outcol=\"2,3\");\n    trend = grdtrack(track, G=Gtrend, outcol=\"2,3\");\n    t = gmtinfo(data=(trend, data), inc=(0.5,25));\n    plot!(data, region=t[1].text[1][3:end], lw=:thick, xaxis=(axes=:WSne, annot=1),\n          yaxis=(annot=50,), proj=:linear, figsize=(16.3,4), x_off=-8.3, y_off=-4.8)\n    plot!(trend, pen=(:thinner, :dashed), show=1)","category":"page"},{"location":"gallery/historic/ex14/","page":"Gridding of data and trend surfaces","title":"Gridding of data and trend surfaces","text":"See also GMT ex14","category":"page"},{"location":"text/#text","page":"text","title":"text","text":"","category":"section"},{"location":"text/","page":"text","title":"text","text":"text(cmd0::String=\"\", arg1=nothing; kwargs...)","category":"page"},{"location":"text/","page":"text","title":"text","text":"Plot or typeset text on maps","category":"page"},{"location":"text/#Description","page":"text","title":"Description","text":"","category":"section"},{"location":"text/","page":"text","title":"text","text":"text plots text strings of variable size, font type, and orientation. Various map projections are provided, with the option to draw and annotate the map boundaries. Greek characters, subscript, superscript, and small caps are supported as follows: The sequence @~ toggles between the selected font and Greek (Symbol). @%\\ no\\ % sets the font to no; @%% resets the font to the starting font, @- toggles subscripts on/off, @+ toggles superscript on/off, @# toggles small caps on/off, @;\\ color; changes the font color (@;; resets it), @:\\ size: changes the font size (@:: resets it), and @_ toggles underline on/off. @@ prints the @ sign. @e, @o, @a, @E, @O, @A give the accented Scandinavian characters. Composite characters (overstrike) may be indicated with the @!<char1><char2> sequence, which will print the two characters on top of each other. To learn the octal codes for symbols not available on the keyboard and some accented European characters, see Section Char-esc-seq and Appendix Chart-Octal-Codes-for-Chars in the GMT Technical Reference and Cookbook. Note that PS_CHAR_ENCODING must be set to an extended character set in your gmt.conf file in order to use the accented characters. Using the fill or pen options, a rectangle underlying the text may be plotted (does not work for strings with sub/super scripts, symbols, or composite characters, except in paragraph mode (paragraph)). ","category":"page"},{"location":"text/#Required-Arguments","page":"text","title":"Required Arguments","text":"","category":"section"},{"location":"text/","page":"text","title":"text","text":"textfile\n  This is one file containing 1 or more records with (x, y\\ [, font, angle, justify], text). The attributes in brackets can alternatively be set directly via attrib. If no files are given, text will read standard input. font is a font specification with format [size,][\\ font,][color\\ ]where size is text size in points, font is the font to use, and color sets the font color. To draw outline fonts you append =\\ pen to the font specification. The angle is measured in degrees counter-clockwise from horizontal, and justify sets the alignment. If font is not an integer, then it is taken to be a text string with the desired font name (see list for available fonts). The alignment refers to the part of the text string that will be mapped onto the (x,\\ y) point. Choose a 2 character combination of L, C, R (for left, center, or right) and T, M, B for top, middle, or bottom. e.g., BL for lower left.\ntextrecord\n  This a GMTdataset type that can be optained either with the text_record(mat, txt), where mat is a MxN with the   x,y(,z) coordinates and txt a string vector with the desired text, or with the mat2ds(mat, txt) function,   where the arguments have the same meaning.\n([text], x=?, y=?)\n  As a third alternative provide the inpute data in a form of a string vector and x and y vector coordinates,   or just a x=mat where mat is MxN matix.","category":"page"},{"location":"text/#Optional-Arguments","page":"text","title":"Optional Arguments","text":"","category":"section"},{"location":"text/","page":"text","title":"text","text":"A or azimuths : – azimuths=true\n  Angles are given as azimuths; convert them to directions using the current projection. \nB or axes or frame\n Set map boundary frame and axes attributes. More at frame\n-C or clearance : – clearance=true | clearance=(margin=(dx,dy), round=true, concave=true, comvex=true)\n  Adjust the clearance between the text and the surrounding box [15%]. Only used if pen or fill are specified. Append the unit you want (c\\ m, i\\ nch, or p\\ oint; if not given we consult   PROJ_LENGTH_UNIT) or % for a percentage of the font size. Optionally, use options round (rounded rectangle) or, for paragraph mode only, concave or convex to set the shape of the textbox when using fill and/or pen. Default gets a straight rectangle.\nD or offset : – offset=([away=true, corners=true,] shift=(dx,dy) [,line=pen])\n  Offsets the text from the projected (x, y) point by shift=(dx, dy). If dy is not specified then it is set equal to dx. Use offset=(away=true,) to offset the text away from the point instead (i.e., the text justification will determine the direction of the shift). Using offset=(corners=true,) will shorten diagonal offsets at corners by sqrt(2). Optionally, use offset=(line=true,) which will draw a line from the original point to the shifted point; use offset=(line=pen,) to change the pen attributes for this line.\nF or attrib : – attrib=(angle=val, font=font, justify=code, region_justify=code, header=true, label=true, rec_number=first, text=text, zvalues=format)\n  By default, text will be placed horizontally, using the primary annotation font attributes (FONT_ANNOT_PRIMARY), and centered on the data point. Use this option to override these defaults by specifying up to three text attributes (font, angle, and justification). Use font=font to set the font (size,fontname,color). For example font=18 or font=(18, \"Helvetica-Bold\", :red); if no font info is given then the input file must have this information in one of its columns. Use angle=val to set the angle; if no angle is given then the input file must have this as a column. Alternatively, use Angle=val to force text-baselines to convert into the -90/+90 range.  Use justify=code to set the justification; if no justification is given then the input file must have this as a column. Items read from the data should be in the same order as specified with the F option. Example: font=(18, \"Helvetica-Bold\", :red), justify=\"\", angle=\"\" selects a 12p red Helvetica-Bold font and expects to read the justification and angle from the file, in that order, after x, y and before text.   In addition, the region_justify justification lets us use x,y coordinates extracted from the region string instead of providing them in the input file. For example region_justify=:TL gets the x_min, y_max from the region string and plots the text at the Upper Left corner of the map. Normally,the text to be plotted comes from the data record. Instead, use header=true or label=true to select the text as the most recent segment header or segment label, respectively in a multisegment input file, rec_number=first to use the record number (counting up from first), text=text to set a fixed text string, or zvalues to format incoming z values to a string using the supplied format (zvalues=\"\" uses FORMAT_FLOAT_MAP). Note: If threeD is in effect then the z value used for formatting is in the 4th, not 3rd column.   Exceptionally, this option can be broken up in its individual pieces by dropping the attrib keyword. \nG or fill : – fill=color | fill=:c\n  Sets the shade or color used for filling the text box [Default is no fill]. Alternatively, use fill=:c to plot the text and then use the text dimensions (and clearance) to build clip paths and turn clipping on. This clipping can then be turned off later with clip C. To not plot the text but activate clipping, use fill=:C instead.\nJ or proj : proj=<parameters>\n Select map projection. More at proj\nL or list : – list=true\n  Lists the font-numbers and font-names available, then exits.\nM or paragraph : – paragraph=true\n  Paragraph mode. Files must be multiple segment files. Segments are separated by a special record whose first character must be flag [Default is >]. Starting in the 3rd column, we expect to find information pertaining to the typesetting of a text paragraph (the remaining lines until next segment header). The information expected is (x y [font angle justify\\ ] linespace parwidth parjust), where x y font angle justify are defined above (font, angle, and justify can be set via F), while linespace and parwidth are the linespacing and paragraph width, respectively. The justification of the text paragraph is governed by parjust which may be l\\ (eft), c\\ (enter), r\\ (ight), or j\\ (ustified). The segment header is followed by one or more lines with paragraph text. Text may contain the escape sequences discussed above. Separate paragraphs with a blank line. Note that here, the justification set via justify applies to the box alignment since the text justification is set by parjust.\nN or noclip or no_clip : noclip=true\n  Do NOT clip text at map boundaries [Default will clip]. \nQ or change_case : – change_case=:lower | change_case=:upper\n  Change all text to either change_case=:lower or change_case=:upper case [Default leaves all text as is].\nR or region or limits : limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more   Specify the region of interest. More at limits\nS or shade : shade=true | shade=(dx,dy) | shade=shade\n  Plot an offset background shaded region beneath the text box. Here, (dx,dy) indicates the shift relative to   the text box in points [4p, 4p] and shade sets the fill color to use for shading [gray50]. Requires the   fill option.\nU or time_stamp : time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n Draw GMT time stamp logo on plot. More at timestamp\nV or verbose : verbose=true | verbose=level\n Select verbosity level. More at verbose\nW or pen : – pen=pen\n  Sets the pen used to draw a rectangle around the text string (see clearance) [Default is width = default, color = black, style = solid].\nX or x_off or x_offset : x_off=[] | x_off=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : y_off=[] | y_off=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off\nZ or threeD : – threeD=true\n  For 3-D projections: expect each item to have its own level given in the 3rd column, and noclip is implicitly set. (Not implemented for paragraph mode). ","category":"page"},{"location":"text/#Limitations","page":"text","title":"Limitations","text":"","category":"section"},{"location":"text/","page":"text","title":"text","text":"In paragraph mode, the presence of composite characters and other escape sequences may lead to unfortunate word splitting. Also, if a font is requested with an outline pen it will not be used in paragraph mode. Note if any single word is wider than your chosen paragraph width then the paragraph width is automatically enlarged to fit the widest word.","category":"page"},{"location":"text/#Examples","page":"text","title":"Examples","text":"","category":"section"},{"location":"text/","page":"text","title":"text","text":"To plot just the red outlines of the (lon lat text strings) stored in the file text.txt on a Mercator plot with the given specifications, use","category":"page"},{"location":"text/","page":"text","title":"text","text":"text(\"text.txt\", region=(-30,30,-10,20), proj=:merc, figscale=0.25, font=(18,:Helvetica,\"-=0.5p\",:red), frame=(annot=5,), show=true)","category":"page"},{"location":"text/","page":"text","title":"text","text":"To plot just the \"Hello World\" and let the program estimate the region, do","category":"page"},{"location":"text/","page":"text","title":"text","text":"text([\"Hello World\"], x=2.0, y=2.0, show=true)","category":"page"},{"location":"gallery/historic/ex32/#Draping-an-image-over-topography","page":"Draping an image over topography","title":"Draping an image over topography","text":"","category":"section"},{"location":"gallery/historic/ex32/","page":"Draping an image over topography","title":"Draping an image over topography","text":"    # Here we get and convert the flag of Europe directly from the web through grdconvert using\n    # GDAL support. We take into account the dimension of the flag (1000x667 pixels)\n    # for a ratio of 3x2.\n\n    # gmt grdconvert \\\n    #   http://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Flag_of_Europe.svg/1000px-Flag_of_Europe.svg.png=gd \\\n    #   euflag.nc=ns\n    # gmt grdedit euflag.nc -fg $Rflag\n\n    # Now get the topography for the same area from GTOPO30 and store it as@topo_32.nc.\n    # The DEM file comes from http://eros.usgs.gov/#/Find_Data/Products_and_Data_Available/gtopo30/w020n90\n    # We make a gradient grid as well, which we will use to \"illuminate\" the flag.\n\n    # gmt grdcut W020N90.DEM $Rflag -Gtopo_32.nc=ns\n\n    # The color map assigns \"Reflex Blue\" to the lower half of the 0-255 range and\n    # \"Yellow\" to the upper half.\n    makecpt(color=[0 51 153; 255 204 0], range=\"0,127,255\", nobg=true)\n\n    grdview(\"@topo_32.nc\", region=[3 9 50 54 10 790], proj=:merc, figsize=13, drapefile=\"@euflag.nc\", shade=(azim=(0, 270), norm=\"e0.6\"), surftype=(nan_alpha=true,), zsize=1, frame=:none, view=(157.5, 30))\n\n    # We now add borders. Because we have a 3-D plot, we want them to be plotted \"at elevation\".\n    # So we write out the borders, pipe them through grdtack and then plot them with psxyz.\n\n    t = coast!(res=:full, dump=true, borders=1);\n    t = grdtrack(\"@topo_32.nc\", t, skip_NaN=:a);\n    plot3d!(t, JZ=1, pen=(1,:white))\n\n    # Finally, we add dots and names for three cities.\n    # Again, gmt grdtrack is used to put the dots \"at elevation\".\n    fid = open(\"cities.txt\", \"w\")\n    println(fid, \"05:41:27 50:51:05 Maastricht\")\n    println(fid, \"04:21:00 50:51:00 Bruxelles\")\n    println(fid, \"07:07:03 50:43:09 Bonn\")\n    close(fid)\n    t = grdtrack(\"@topo_32.nc\", \"cities.txt\")\n    plot3d!(t, JZ=\"\", marker=:circle, ms=\"7p\", ml=(1,:white), fill=:red)\n    text!(\"cities.txt\", font=(12,\"Helvetica-Bold\",:red), justify=:RM, offset=(away=true, shift=(0.25, 0)), show=true)\n    rm(\"cities.txt\");","category":"page"},{"location":"gallery/historic/ex32/","page":"Draping an image over topography","title":"Draping an image over topography","text":"See also GMT ex32","category":"page"},{"location":"gallery/scripts_agu/bars3_peaks/#Make-a-3D-bar-plot-with-colors-in-function-of-bar's-height","page":"Make a 3D bar plot with colors in function of bar's height","title":"Make a 3D bar plot with colors in function of bar's height","text":"","category":"section"},{"location":"gallery/scripts_agu/bars3_peaks/","page":"Make a 3D bar plot with colors in function of bar's height","title":"Make a 3D bar plot with colors in function of bar's height","text":"Create a 'peaks' grid","category":"page"},{"location":"gallery/scripts_agu/bars3_peaks/","page":"Make a 3D bar plot with colors in function of bar's height","title":"Make a 3D bar plot with colors in function of bar's height","text":"G = GMT.peaks();      # The grid\ncmap = grd2cpt(G);    # Colormap with the grid's data range","category":"page"},{"location":"gallery/scripts_agu/bars3_peaks/","page":"Make a 3D bar plot with colors in function of bar's height","title":"Make a 3D bar plot with colors in function of bar's height","text":"Plot that grid as 3D prisms. Here we use the default fig width of 12 cm","category":"page"},{"location":"gallery/scripts_agu/bars3_peaks/","page":"Make a 3D bar plot with colors in function of bar's height","title":"Make a 3D bar plot with colors in function of bar's height","text":"bar3(G,               # 'G' is the grid created above\n     lw=:thinnest,    # Line thickness (0.25 pt)\n     color=cmap,      # Paint the prisms with colormap computed from grid\n     show=true)       # Show the result","category":"page"},{"location":"gallery/scripts_agu/bars3_peaks/","page":"Make a 3D bar plot with colors in function of bar's height","title":"Make a 3D bar plot with colors in function of bar's height","text":"As one-liners (to facilitate copy-paste):","category":"page"},{"location":"gallery/scripts_agu/bars3_peaks/","page":"Make a 3D bar plot with colors in function of bar's height","title":"Make a 3D bar plot with colors in function of bar's height","text":"G = GMT.peaks();    cmap = grd2cpt(G);\nbar3(G, lw=:thinnest, color=cmap, show=true)","category":"page"},{"location":"gallery/scripts_agu/bars3_peaks/","page":"Make a 3D bar plot with colors in function of bar's height","title":"Make a 3D bar plot with colors in function of bar's height","text":"<img src=\"../figs/bars3_peaks.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"gallery/historic/ex25/#Global-distribution-of-antipodes","page":"Global distribution of antipodes","title":"Global distribution of antipodes","text":"","category":"section"},{"location":"gallery/historic/ex25/","page":"Global distribution of antipodes","title":"Global distribution of antipodes","text":"\tusing Printf\n\tGwetdry = grdlandmask(region=:global360, inc=\"30m\", res=:crude,\n\t                      area=500, N=\"-1/1/1/1/1\", reg=true);\n\t# Manipulate so -1 means ocean/ocean antipode, +1 = land/land, and 0 elsewhere\n\tGkey = gmt(\"grdmath -fg ? DUP 180 ROTX FLIPUD ADD 2 DIV =\", Gwetdry);\n\t# Calculate percentage area of each type of antipode match.\n\tGscale = gmt(\"grdmath -Rg -I30m -r Y COSD 60 30 DIV 360 MUL DUP MUL PI DIV DIV 100 MUL =\");\n\tGtmp   = gmt(\"grdmath -fg ? -1 EQ 0 NAN =\", Gkey);\n\tGtmp = Gtmp * Gscale;\n\n\tkey    = grd2xyz(Gtmp, skip_NaN=true, flags=:TLf);\n\tocean  = gmt(\"gmtmath -bi1f -Ca -S ? SUM UPPER RINT =\", key);\n\tGtmp   = gmt(\"grdmath -fg ? 1 EQ 0 NAN =\", Gkey)\n\tGtmp.z = Gtmp.z .* Gscale.z\n\tkey    = grd2xyz(Gtmp, skip_NaN=true, flags=:TLf)\n\tland   = gmt(\"gmtmath -bi1f -Ca -S ? SUM UPPER RINT =\", key)\n\tGtmp   = gmt(\"grdmath -fg ? 0 EQ 0 NAN\", Gkey)\n\tGtmp   = Gtmp * Gscale;\n\tkey    = grd2xyz(Gtmp, skip_NaN=true, flags=:TLf)\n\tmixed  = gmt(\"gmtmath -bi1f -Ca -S ? SUM UPPER RINT =\", key)\n\n\t# Generate corresponding color table\n\tC = makecpt(color=\"blue,gray,red\", range=(-1.5,1.5,1))\n\t# But unfortunately this palette is not correct, so lets patch it\n\tC.colormap[1,1:2] .= 0;\t\tC.colormap[1,3] = 1;\n\tC.colormap[3,2:3] .= 0;\t\tC.colormap[3,1] = 1;\n\n\t# Create the final plot and overlay coastlines\n\tgrdimage(Gkey, proj=(name=:EckertVI, center=180), figsize=20,\n\t         frame=(axes=:WsNE, title=\"Antipodal comparisons\"), xaxis=(annot=60,),\n\t\t\t yaxis=(annot=30,), y_off=3, interpol=:n, portrait=false)\n\tcoast!(shore=:thinnest, area=500)\n\t# Place an explanatory legend below\n\tlegend!(pos=(anchor=:BC, width=15), box=(pen=:thick,), y_off=-0.5,\n\t        par=(:FONT_ANNOT_PRIMARY,10),\n\t        text_record([\"N 3\"\n\t        @sprintf(\"S 0.15i s 0.2i red  0.25p 0.3i Terrestrial Antipodes [%d %%]\", land[1].data[1])\n\t        @sprintf(\"S 0.15i s 0.2i blue 0.25p 0.3i Oceanic Antipodes [%d %%]\", ocean[1].data[1])\n\t        @sprintf(\"S 0.15i s 0.2i gray 0.25p 0.3i Mixed Antipodes [%d %%]\", mixed[1].data[1])]), show=1)","category":"page"},{"location":"gallery/historic/ex25/","page":"Global distribution of antipodes","title":"Global distribution of antipodes","text":"See also GMT ex25","category":"page"},{"location":"gallery/scripts_agu/scatter_cart/#Variable-symbol-size/color-Cartesian-scatter-plot","page":"Variable symbol size/color Cartesian scatter plot","title":"Variable symbol size/color Cartesian scatter plot","text":"","category":"section"},{"location":"gallery/scripts_agu/scatter_cart/","page":"Variable symbol size/color Cartesian scatter plot","title":"Variable symbol size/color Cartesian scatter plot","text":"Draw a Cartesian scatter plot with variable symbol size, color and transparency","category":"page"},{"location":"gallery/scripts_agu/scatter_cart/","page":"Variable symbol size/color Cartesian scatter plot","title":"Variable symbol size/color Cartesian scatter plot","text":"scatter(rand(100),rand(100),   # Generate data\n        markersize=rand(100),  # Symbol sizes\n        marker=:c,             # Plot circles\n        color=:ocean,          # Color scale\n        zcolor=rand(100),      # Assign color to each symbol\n        alpha=50,              # Set transparency to 50%\n        title=\"Scatter\",       # Fig title\n        figsize=12,            # Set fig size of 12 cm\n        show=true)             # Show the result","category":"page"},{"location":"gallery/scripts_agu/scatter_cart/","page":"Variable symbol size/color Cartesian scatter plot","title":"Variable symbol size/color Cartesian scatter plot","text":"As a one-liner (to facilitate copy-paste):","category":"page"},{"location":"gallery/scripts_agu/scatter_cart/","page":"Variable symbol size/color Cartesian scatter plot","title":"Variable symbol size/color Cartesian scatter plot","text":"scatter(rand(100),rand(100), markersize=rand(100), marker=:c, color=:ocean, zcolor=rand(100), figsize=12, alpha=50, title=\"Scatter\", show=true)","category":"page"},{"location":"gallery/scripts_agu/scatter_cart/","page":"Variable symbol size/color Cartesian scatter plot","title":"Variable symbol size/color Cartesian scatter plot","text":"<img src=\"../figs/scatter_cart.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"grdimage/#grdimage","page":"grdimage","title":"grdimage","text":"","category":"section"},{"location":"grdimage/","page":"grdimage","title":"grdimage","text":"grdimage(cmd0::String=\"\"; kwargs...)","category":"page"},{"location":"grdimage/","page":"grdimage","title":"grdimage","text":"Project grids or images and plot them on maps","category":"page"},{"location":"grdimage/#Description","page":"grdimage","title":"Description","text":"","category":"section"},{"location":"grdimage/","page":"grdimage","title":"grdimage","text":"Reads one 2-D grid and produces a gray-shaded (or colored) map by plotting rectangles centered on each grid node and assigning them a gray-shade (or color) based on the z-value. Alternatively, grdimage reads three 2-D grid files with the red, green, and blue components directly (all must be in the 0-255 range). Optionally, illumination may be added by providing a file with intensities in the (-1,+1) range or instructions to derive intensities from the input data grid. Values outside this range will be clipped. Such intensity files can be created from the grid using grdgradient and, optionally, modified by grdhisteq. A third alternative is available when GMT is build with GDAL support. Pass img which can be an image file (geo-referenced or not). In this case the images can optionally be illuminated with the file provided via the shade option. Here, if image has no coordinates then those of the intensity file will be used.","category":"page"},{"location":"grdimage/","page":"grdimage","title":"grdimage","text":"When using map projections, the grid is first resampled on a new rectangular grid with the same dimensions. Higher resolution images can be obtained by using the -E option. To obtain the resampled value (and hence shade or color) of each map pixel, its location is inversely projected back onto the input grid after which a value is interpolated between the surrounding input grid values. By default bi-cubic interpolation is used. Aliasing is avoided by also forward projecting the input grid nodes. If two or more nodes are projected onto the same pixel, their average will dominate in the calculation of the pixel value. Interpolation and aliasing is controlled with the -n option.","category":"page"},{"location":"grdimage/","page":"grdimage","title":"grdimage","text":"The region option can be used to select a map region larger or smaller than that implied by the extent of the grid. ","category":"page"},{"location":"grdimage/#Required-Arguments","page":"grdimage","title":"Required Arguments","text":"","category":"section"},{"location":"grdimage/","page":"grdimage","title":"grdimage","text":"J or proj : – proj=<parameters>\n Select map projection. More at proj","category":"page"},{"location":"grdimage/#Optional-Arguments","page":"grdimage","title":"Optional Arguments","text":"","category":"section"},{"location":"grdimage/","page":"grdimage","title":"grdimage","text":"-A or img_out or image_out : – img_out=fname\n Save an image in a raster format instead of PostScript. Use extension .ppm for a Portable Pixel Map format.  For GDAL-aware versions there are more choices: Use fname to select the image file name and extension.  If the extension is one of .bmp, .gif, .jpg, .png, or .tif then no driver information is required. For other  output formats you must append the required GDAL driver. The driver is the driver code name used by GDAL;  see your GDAL installation's documentation for available drivers. Append a +c<options> string where options  is a list of one or more concatenated number of GDAL -co options. For example, to write a GeoPDF with the  TerraGo format use \"=PDF+cGEO_ENCODING=OGC_BP\". Notes: (1) If a tiff file (.tif) is selected then we will  write a GeoTiff image if the GMT projection syntax translates into a PROJ4 syntax, otherwise a plain tiff  file is produced. (2) Any vector elements will be lost.\nB or axes or frame\n Set map boundary frame and axes attributes. More at frame\nC or color or cmap : – color=cpt\n Where cpt is a GMTcpt type or a cpt file name (for grd_z only). Alternatively, supply the name of  a GMT color master dynamic CPT [jet] to automatically determine a continuous CPT from the grid's z-range;  you may round up/down the z-range by adding +i zinc. Yet another option is to specify  color=\"color1,color2 [,color3 ,...]\" or color=((r1,g1,b1),(r2,g2,b2),...) to build a linear continuous  CPT from those colors automatically. In this case color1 etc can be a (r,g,b) triplet, a color name, or  an HTML hexadecimal color (e.g. #aabbcc ) (see Setting color). When not explicitly set, but a  color map is needed, we will either use the current color map, if available (set by a previous call to  makecpt), or the default jet color map.\ncoast : – coast=true | coast=(...)\n Call the coast module to overlay coastlines and/or countries. The short form coast=true just  plots the coastlines with a black, 0.5p thickness line. To access all options available in the coast  module passe them in the named tuple (...).\ncolorbar : – colorbar=true | colorbar=(...)\n Call the colorbar module to add a colorbar. The short form colorbar=true automatically adds a  color bar on the right side of the image using the current color map stored in the global scope. To  access all options available in the colorbar module passe them in the named tuple (...).\nD or img_in or image_in : – img_in=true | img_in=:r\n GMT will automatically detect standard image files (Geotiff, TIFF, JPG, PNG, GIF, etc.) and will read  those via GDAL. For very obscure image formats you may need to explicitly set img_in, which specifies  that the grid is in fact an image file to be read via GDAL. Use img_in=:r to assign the region specified  by region to the image. For example, if you have used region=global then the image will be assigned  a global domain. This mode allows you to project a raw image (an image without referencing coordinates).\nE or dpi : – dpi=xx | dpi=:i\n Sets the resolution of the projected grid that will be created if a map projection other than Linear or  Mercator was selected [100]. By default, the projected grid will be of the same size (rows and columns)  as the input file. Specify dpi=:i to use the PostScript image operator to interpolate the image at the  device resolution.\nG : – G=\"+b\" | G=\"+f\"\n This option only applies when a resulting 1-bit image otherwise would consist of only two colors: black (0)  and white (255). If so, this option will instead use the image as a transparent mask and paint the mask with  the given color. Use G=\"+b\" to paint the background pixels (1) or G=\"+f\" for the foreground pixels  [Default].\nI or shade or intensity : – shade=grid | shade=azim | shade=(azimuth=az, norm=params, auto=true)\n Provide the name of a grid with intensities in the (-1,+1) range, or a constant intensity to apply everywhere  (affects the ambient light). Alternatively, derive an intensity grid from the input data grid grd_z via a  call to grdgradient; use shade=az or shade=(azimuth=az norm=params) to specify azimuth  and intensity arguments for that module or just give shade=true to select the default arguments  (azim=-45,nom=:t1). If you want a more specific intensity scenario then run grdgradient separately first.\nM or monochrome : – monochrome=true\n  Force conversion to monochrome image using the (television) YIQ transformation. Cannot be used with nan_alpha.\nN or noclip : – noclip=true\n  Do not clip the image at the map boundary (only relevant for non-rectangular maps).\nQ or nan_alpha or alpha_color: nan_alpha=true or alpha\\\u0013_color=true|(r,g,b)\n  Make grid nodes with z = NaN transparent. If input is an image alpha_color picks one color (default is   black) and makes it transparent (requires GMT6.2 and above).\nR or region or limits : – limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more   Specify the region of interest. More at limits\nU or time_stamp : – time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n Draw GMT time stamp logo on plot. More at timestamp\nV or verbose : – verbose=true | verbose=level\n Select verbosity level. More at verbose\nX or x_off or x_offset : – x_off=[] | x_off=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : – y_off=[] | y_off=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off\nn or interp or interpol : – interp=params\n Select interpolation mode for grids. More at interp\np or view or perspective : – view=(azim, elev)\n Selects perspective view and sets the azimuth and elevation of the viewpoint. More at perspective\nt or transparency or alpha: – alpha=50\n Set PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].  Works only for the PDF and PNG formats.","category":"page"},{"location":"grdimage/#Examples","page":"grdimage","title":"Examples","text":"","category":"section"},{"location":"grdimage/","page":"grdimage","title":"grdimage","text":"To make a map of the global bathymetry (automatically download it if needed) using the Winkel projection, add coast lines and a color bar, do:","category":"page"},{"location":"grdimage/","page":"grdimage","title":"grdimage","text":"    grdimage(\"@earth_relief_20m.grd\", proj=:Winkel, colorbar=true,\n             coast=true, show=true)","category":"page"},{"location":"scatter3/#scatter3","page":"scatter3","title":"scatter3","text":"","category":"section"},{"location":"scatter3/","page":"scatter3","title":"scatter3","text":"scatter3(cmd0::String=\"\", arg1=[]; kwargs...)","category":"page"},{"location":"scatter3/","page":"scatter3","title":"scatter3","text":"Reads (x,y,z) triplets and plot symbols at those locations on a map. This module is a subset of plot to make it simpler to draw scatter plots. So many (fine) controlling parameters are not listed here. For a finer control, user should consult the plot module.","category":"page"},{"location":"scatter3/#Parameters","page":"scatter3","title":"Parameters","text":"","category":"section"},{"location":"scatter3/","page":"scatter3","title":"scatter3","text":"B or axes or frame\nSet map boundary frame and axes attributes. Default is to draw and annotate left, bottom and verical axes and just draw left and top axes. More at frame\nJ or proj : – proj=<parameters>\nSelect map projection. Default is linear and 14 cm width. More at proj\nR or region or limits : – limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more \n Specify the region of interest. Default limits are computed from data extents. More at limits\nG or markerfacecolor or MarkerFaceColor or mc or fill\n Select color or pattern for filling of symbols [Default is black cubes]. Note that plot will search for fill  and pen settings in all the segment headers (when passing a GMTdaset or file of a multi-segment dataset)  and let any values thus found over-ride the command line settings (but those must provided in the terse GMT  syntax). See Setting color for extend color selection (including color map generation).\nS or symbol or marker or Marker or shape : –  Default is cube with size of 7 points\nsymbol=symbol string\n A full GMT compact string.\nsymbol=(symb=..., size=..., unit=...)\n Where symb is one Symbols like :circle, size is  symbol size in cm, unless unit is specified i.e. :points\nIn alternative to the symbol keyword, user can select the symbol name with either marker or shape  and symbol size with markersize, ms or just size. The value of these keywords can be either numeric  (symb meaning size in cm) or string if an unit is appended, e.g.  markersize=5p. This form of symbol  selection allows also to specify a variable symbol size. All it's need for this is that the keywrd's value  be an array with the same number of elements as the number of data points. \np or view\n Default is viewpoin from an azimuth of 200 and elevation of 30 degrees. Specify the viewpoint in terms  of azimuth and elevation. The azimuth is the horizontal rotation about the z-axis as measured in degrees  from the positive y-axis. That is, from North. This option is not yet fully expanded. Current alternatives  are:\nview=...\n A full GMT compact string with the full set of options.\nview=(azim,elev)\n A two elements tuple with azimuth and elevation","category":"page"},{"location":"scatter3/#Examples","page":"scatter3","title":"Examples","text":"","category":"section"},{"location":"scatter3/","page":"scatter3","title":"scatter3","text":"A scatter of ten points plotted as black cubes of 7 points size using the default perspective of 200,30","category":"page"},{"location":"scatter3/","page":"scatter3","title":"scatter3","text":"    scatter3(rand(10,10,3), show=true)","category":"page"},{"location":"scatter3/#See-also","page":"scatter3","title":"See also","text":"","category":"section"},{"location":"scatter3/","page":"scatter3","title":"scatter3","text":"The GMT man page","category":"page"},{"location":"gallery/historic/ex34/#Using-country-polygons-for-plotting-and-shading","page":"Using country polygons for plotting and shading","title":"Using country polygons for plotting and shading","text":"","category":"section"},{"location":"gallery/historic/ex34/","page":"Using country polygons for plotting and shading","title":"Using country polygons for plotting and shading","text":"    coast(region=(-6,20,35,52), DCW=(country=\"FR,IT\", fill=(inv_pattern=8, dpi=300)),\n          land=:lightgray, proj=:Mercator, figsize=11, x_off=5)\n    # Extract a subset of ETOPO2m for this part of Europe\n    makecpt(cmap=:globe, range=(-5000,5000,50), continuous=true)\n    grdimage!(\"@FR+IT.nc\", shade=(azim=15, norm=\"e0.75\"), y_off=11,\n              frame=(axes=:WsnE, annot=:auto, title=\"Franco-Italian Union, 2042-45\"))\n    coast!(DCW=(country=\"FR,IT\", fill=\"red@60\"), show=true)","category":"page"},{"location":"gallery/historic/ex34/","page":"Using country polygons for plotting and shading","title":"Using country polygons for plotting and shading","text":"See also GMT ex34","category":"page"},{"location":"gallery/historic/ex23/#All-great-circle-paths-lead-to-Rome","page":"All great-circle paths lead to Rome","title":"All great-circle paths lead to Rome","text":"","category":"section"},{"location":"gallery/historic/ex23/","page":"All great-circle paths lead to Rome","title":"All great-circle paths lead to Rome","text":"    lon  = 12.50\n    lat  = 41.99\n    Gdist = gmt(\"grdmath -Rg -I1 12.5 41.99 SDIST\")\n\n    coast(region=:global, land=:lightgreen, ocean=:blue, area=1000,\n         frame=(grid=30, title=\"Distances from Rome to the World\"),\n         shore=:thinnest, proj=(name=:Hammer, center=90),\n         figsize=20, portrait=false)\n    grdcontour!(Gdist, annot=(int=1000, labels=(curved=true, unit=\"\\\" km\\\"\",\n                font=\"white\")), labels=(line=\"Z-/Z+\",), smooth=8, cont=500,\n                pen=((contour=true,pen=\"thinnest,white,-\"),\n                (annot=true, pen=\"thin,white\")) )\n\n    # Location info for 5 other cities + label justification\n    cities = [105.87 21.02; 282.95  -12.1; 178.42 -18.13; 237.67 47.58; 28.20 -25.75];\n    just_names = [\"LM HANOI\", \"LM LIMA\", \"LM SUVA\", \"RM SEATTLE\", \"LM PRETORIA\"];\n    D = text_record(cities, just_names)\n\n    # For each of the cities, plot great circle arc to Rome with gmt psxy\n    plot!([lon lat; 105.87 21.02], lw=:thickest, lc=:red)\n    plot!([lon lat; 282.95 -12.1], lw=:thickest, lc=:red)\n    plot!([lon lat; 178.42 -18.13],lw=:thickest, lc=:red)\n    plot!([lon lat; 237.67 47.58], lw=:thickest, lc=:red)\n    plot!([lon lat; 28.20 -25.75], lw=:thickest, lc=:red)\n\n    # Plot red squares at cities and plot names:\n    plot!(cities, marker=:square, ms=0.2, fill=:red, markerline=:thinnest)\n    text!(D, offset=(away=true, shift=(0.15,0)), font=(12,\"Courier-Bold\",:red),\n          justify=true, no_clip=true)\n\n    # Place a yellow star at Rome\n    plot!([12.5 41.99], marker=:star, ms=0.5, fill=:yellow, ml=:thin)\n\n    # Sample the distance grid at the cities and use the distance in km for labels\n    dist = grdtrack(Gdist, D);\n    text!(dist, offset=(0, -0.5), noclip=true, fill=:white, pen=true, clearance=0.05,\n          font=(12,\"Helvetica-Bold\"), justify=:CT, zvalues=\"%.0f\", show=true)","category":"page"},{"location":"gallery/historic/ex23/","page":"All great-circle paths lead to Rome","title":"All great-circle paths lead to Rome","text":"See also GMT ex23","category":"page"},{"location":"subplot/#subplot","page":"subplot","title":"subplot","text":"","category":"section"},{"location":"subplot/","page":"subplot","title":"subplot","text":"subplot(fim=nothing; stop=false, kwargs...)","category":"page"},{"location":"subplot/","page":"subplot","title":"subplot","text":"subplot module is used to split the current figure into a rectangular layout of subplots that each may contain a single self-contained figure. A subplot setup is started with the subplot directive that defines the layout of the subplots, while positioning to a particular subplot for plotting is done via the subplot(:set, ...) directive. The subplot process is completed via the subplot(:end) or subplot(:show) directives.","category":"page"},{"location":"subplot/","page":"subplot","title":"subplot","text":"subplot : – subplot=(:set, :end, show; grid=..., dims=..., panels_size=..., autolabel=..., clearance=..., axes=..., proj=..., margins=..., region=..., layout, title=..., figname=..., name=..., savefig=..., fmt=...)","category":"page"},{"location":"subplot/#Required-Arguments","page":"subplot","title":"Required Arguments","text":"","category":"section"},{"location":"subplot/","page":"subplot","title":"subplot","text":"grid : grid=\"nrows x ncols\" | grid=(nrows, ncols)\n  Specifies the number of rows and columns of subplots.  Each row will have the same number of subplots.   Note1: Use NO spaces with the first form. i.e. grid=\"2x2\" and NOT grid=\" 2 x 2\"\n  Note2: You are not required to place a plot in each subplot.","category":"page"},{"location":"subplot/","page":"subplot","title":"subplot","text":"F or dims ir dimensions or size or sizes : – dims=(panels=(w,h), size=(w,h), frac=(), clearance=(dx,dy), outline=pen, fill=color, divlines=pen)\n  Specify the dimensions of the figure. There are two different ways to do this:\nWith the keyword size Specify overall figure dimensions\n\nWith the keyword panels specify the dimensions of a single subplot.\nsize\n  Specify the final figure dimensions. The subplot dimensions are then calculated from the figure dimensions after accounting for the space that optional tick marks, annotations, labels, and margins occupy between subplots. As for other figures, annotations, ticks, and labels along the outside perimeter are not counted as part of the figure dimensions. To specify different subplot dimensions for each row (or column), append frac with value given as a tuple of width nd height fractions. For example dims=(size=(10,10), frac=((3,1),(1,2))) will make the first column three times as wide as the second, while the second row will be twice as tall as the first row. A single number means constant widths (or heights) [Default]. If prefered, instead of size and/or frac as tuples, the width=x, height=y, fwidth=(...), fheight=(...) form is also allowed. \npanels\n  Specify the dimensions of each subplot directly. Then, the figure dimensions are computed from the subplot dimensions after adding the space that optional tick marks, annotations, labels, and margins occupy between subplots. As for other figures, annotations, ticks, and labels along the outside perimeter are not counted as part of the figure dimensions. To specify different subplot dimensions for each row (or column), append a comma-separated list of widths, a slash, and then the comma-separated list of heights. A single number means constant widths (or heights) [Default]. For example dims=(panels=((5,8),8),) will make the first column 5 cm wide and the second column 8 cm wide, with all having a constant height of 8 cm. The number of values must either be one (constant across the rows or columns) or exactly match the number of rows (or columns). For geographic maps, the height of each subplot depends on your map region and projection. There are two options: (1) Specify both limits and projection and we use these to compute the height of each subplot. All subplots must share the same region and projection and you specify a zero height, or (2) you can select height based on trial and error to suit your plot layout.\nOptionally, you may draw the outline (outline=pen) or paint (fill=color) the figure rectangle behind the subplots, add dividing lines between panels (divlines=pen), and even expand it via clearance=(dx.dy). These are most useful if you supply axes=:none, meaning no ticks or annotations will take place in the subplots. See Setting color and Pen attributes for extend color and pen selections.\nBut when only want to set panels with a constant size one can use the simpler form subplot(grid=..., panels_size=8, ...), i.e. without sing the dims=(panels=()) form. panels_size, panel_size and panel_sizes are all aliases.","category":"page"},{"location":"subplot/#Optional-Arguments","page":"subplot","title":"Optional Arguments","text":"","category":"section"},{"location":"subplot/","page":"subplot","title":"subplot","text":"A or autolabel : – autolabel=(Anchor=tag, anchor=tag, label=\"\", clearance=(dx,dy), fill=color, pen=pen, offset=, roman=Bool, Roman=Bool, vertical=Bool)\n  Specify automatic tagging of each subplot. Use label= either a number or letter (as a string) [Default \"a\"].   This sets the tag of the first, top-left subplot and others follow sequentially. Surround the number or letter by parentheses on any side if these should be typeset as part of the tag.   Use anchor or Anchor =refpoint to specify where the tag should be placed in the subplot [TL, meaning TopLeft].   Note: anchor sets the justification of the tag to refpoint (suitable for interior tags)   while Anchor instead selects the mirror opposite (suitable for exterior tags).\nAppend clearance=dx or clearance=(dx,dy) to set the clearance between the tag and a surrounding text box requested via fill or pen [3p/3p, i.e., 15% of the FONT_TAG size dimension].\nAppend fill=color to paint the tag's text box with color [no painting].\nAppend offset=dx or offset=(dx,dy) to offset the tag's reference point in the direction implied by the justification [4p/4p, i.e., 20% of the FONT_TAG size].\nAppend pen=pen to draw the outline of the tag's text box using selected pen [no outline].\nAppend roman=true to typeset your tag numbers using lowercase Roman numerals.\nAppend Roman=true for uppercase Roman numerals [Arabic numerals].\nAppend vertical=true to increase tag numbers vertically down columns [horizontally across rows].\nB or axes or frame\n Set map boundary frame and axes attributes. More at frame\nC or clearance : – clearance=(left=val, right=val, bott=val, bottom=val, top=val))\n  Reserve a space of dimension val between the margin and the subplot on the specified side, using side values from left=val, right=val, bottom=val, or top=val. No side means all sides. Can specify more than one side. Such space will be left untouched by the main map plotting but can be accessed by modules that plot scales, bars, text, etc. Settings specified under begin directive apply to all subplots, while settings under set only apply to the selected (active) subplot.  Note: Common options x_off and y_off are not available during subplots; use clearance instead.\nJ or proj : proj=<parameters>\n Select map projection. More at proj\n-M or margins : – margins=val\n  This is margin space that is added between neighboring subplots (i.e., the interior margins) in addition   to the automatic space added for tick marks, annotations, and labels. The margins can be specified as   a single value (for same margin on all sides), a pair of values separated by slashes   (for setting separate horizontal and vertical margins), or the full set of four slash-separated margins   (for setting separate left, right, bottom, and top margins). The actual gap created is always a sum of   the margins for the two opposing sides (e.g., east plus west or south plus north margins) [Default is   half the primary annotation font size, giving the full annotation font size as the default gap].\nR or region or limits : limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more   This is useful when all subplots share a common plot domain. In this module, the chosen region will also  become the default for any data region needed by computational modules. More at limits\nSC or col_axes : – col_axes=(top=\"\", bott=\"\", bottom=\"\", label=\"\", grid=pen))\n\nSR or row_axes : – rowaxes=(left=\"\", right=\"\", label=\"\", parallel=\"\", rowtitle=\"t\", toprowtitle=\"\", grid=pen))\n  Set subplot layout for shared axes. May be set separately for rows (row_axes) and columns (col_axes).\n  Considerations for col_axes:\n  Use when all subplots in a column share a common x-range. The first (i.e., top) and the last (i.e., bottom) rows will have x annotations; append top=\"\" or bott=\"\" to select only one of those two rows [both].\nAppend label=\"\" if annotated x-axes should have a label [none]; optionally append the label if it is the same for the entire subplot. Labels and titles that depends on which row or column are specified as usual via a subplot's own axes setting.\n\nConsiderations for row_axes:\n  Use when all subplots in a row share a common y-range. The first (i.e., left) and the last (i.e., right) columns will have y-annotations; append left=\"\" or right=\"\" to select only one of those two columns [both].\nAppend left=\"\" if annotated y-axes will have a label [none]; optionally, append the label if it is the same for the entire subplot.\nAppend row_title to make space for subplot titles for each row; use toprowtitle for top row titles only [no subplot titles].\nAppend parallel=\"\" to make all annotations axis-parallel [horizontal]; if not used you may have to set clearance to secure extra space for long horizontal annotations.\nAppend grid=pen to draw horizontal and vertical lines between interior panels using selected pen [no lines].\nT or title : – title=\"Heading\"\n  While individual subplots can have titles (see -S or axes), the entire figure may also have a   overarching heading [no heading]. Font is determined by setting FONT_HEADING.","category":"page"},{"location":"subplot/#Synopsis-(set-mode)","page":"subplot","title":"Synopsis (set mode)","text":"","category":"section"},{"location":"subplot/","page":"subplot","title":"subplot","text":"subplot(:set, panel=..., fixedlabel=\"Label\", clearance=...)\n","category":"page"},{"location":"subplot/","page":"subplot","title":"subplot","text":"Before you start plotting you must first select the active subplot. Note: If any figsize or figscale option is passed with auto as width or scale when plotting subplots, then the dimensions of the map are automatically determined by the subplot size and your region. For Cartesian plots: If you want the scale to apply equally to both dimensions then you must specify proj=:linear, figscale=\"auto\" [The default figsize=\"auto\" will fill the subplot by using unequal scales].","category":"page"},{"location":"subplot/#Optional-Arguments-2","page":"subplot","title":"Optional Arguments","text":"","category":"section"},{"location":"subplot/","page":"subplot","title":"subplot","text":"panel=(row,col)\n  Sets the current subplot until further notice. Note: First row or col is 1 not 0 like in plain GMT. If not given we go to the next subplot by order specified via autolabel=(vertical=true,). As an alternative, you may bypass the set mode and instead supply the common option panel=(row,col) to the first plot command you issue in that subplot. GMT maintains information about the current figure and subplot. Also, you may give the one-dimensional index instead which starts at 1 and follows the row or column order set via autolabel=(vertical=true,). panel=\"next\" or panel=\"\" are alternative index syntaxes\nA or fixedlabel : – fixedlabel=\"Label\"\n  Overrides the automatic labeling with the given string. No modifiers are allowed. Placement, justification, etc. are all inherited from how autolablel was specified.\nC or clearance : – clearance=(left=val, right=val, bott=val, bottom=val, top=val))\n  Reserve a space of dimension clearance between the margin and the subplot on the specified side. This setting has the same syntax and overrides the common clearances set by clearance outside the subplot(:set, ...) command.","category":"page"},{"location":"subplot/","page":"subplot","title":"subplot","text":"Any number of plotting command can now take place and all output will be directed to the selected subplot. There are a few other rules that need to be followed:\n(1) The subplot machinery expects the first plotting command in a new subplot window to take care of plotting the base frame. The particulars of this frame may have been specified by the row|col_axes option. In either case, should you need to set or override frame and axes parameters then you must specify these axes options with this first plot command.\n(2) The subplot machinery automatically uses the x_off and y_off options under the hood so these options are not available while a subplot is active.","category":"page"},{"location":"subplot/#Synopsis-(end-mode)","page":"subplot","title":"Synopsis (end mode)","text":"","category":"section"},{"location":"subplot/","page":"subplot","title":"subplot","text":"subplot(:end) or subplot(:show)\n","category":"page"},{"location":"subplot/","page":"subplot","title":"subplot","text":"This command finalizes the current subplot, including any placement of tags, and updates the gmt.history to reflect the dimensions and linear projection required to draw the entire figure outline. This allows subsequent commands, such as colorbar, to use pos=... to place bars with reference to the complete figure dimensions. We also reset the current plot location to where it was prior to the subplot. The keyword :end just finishes the plot silently whislst with :show the plot is displayed automatically.","category":"page"},{"location":"subplot/","page":"subplot","title":"subplot","text":"V or verbose : verbose=true | verbose=level\n Select verbosity level. More at verbose\nX or x_off or x_offset : xoff=[] | *xoff=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : yoff=[] | *yoff=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off","category":"page"},{"location":"subplot/#Examples","page":"subplot","title":"Examples","text":"","category":"section"},{"location":"subplot/","page":"subplot","title":"subplot","text":"To make a minimalistic 3x3 basemap layout called panels.pdf, try::","category":"page"},{"location":"subplot/","page":"subplot","title":"subplot","text":"    subplot(grid=\"3x3\", panels_size=(5,7), region=(0, 100, 0, 80), frame=:WSen, autolabel=1, margins=\"6p\", name=\"panels.pdf\")\n        gmtset(MAP_FRAME_TYPE=:plain)\n\n        basemap(panel=1)\n        basemap(panel=2, proj=:linear)\t\t# Same as above\n        basemap(panel=\"next\", proj=:linear, figsize=\"auto,auto\")\n\n        basemap(panel=\"\", proj=:linear, figsize=\"auto,auto\", axesswap=:x)\n        basemap(panel=\"\", proj=:linear, figsize=\"auto,auto\", axesswap=:y)\n        basemap(panel=\"\", proj=:linear, figsize=\"auto,auto\", axesswap=:xy)\n\n        basemap(panel=(3,1), proj=:linear, figscale=\"auto,auto\", axesswap=:x)\n        basemap(panel=\"next\", proj=:geog, figsize=\"auto,auto\")\n        basemap(panel=\"next\", proj=:geog, figsize=\"auto\")\n    subplot(:show)","category":"page"},{"location":"subplot/","page":"subplot","title":"subplot","text":"and a 2x2 with some symbols and showing more ways of setting the panel sizes and selection","category":"page"},{"location":"subplot/","page":"subplot","title":"subplot","text":"    subplot(grid=(2,2), panels_size=8, region=(0, 100, 0, 80), margins=\"5p\", autolabel=true, col_axes=(bott=true,), row_axes=(left=true,), axes=\"wstr\", name=\"panels.pdf\")\n        subplot(:set)\n        basemap(region=(0,80,0,50))\n        subplot(:set)\n        plot([50 40], marker=:circle, mc=:red)\n        subplot(:set)\n        plot([50 40], marker=:square, mc=:green)\n        subplot(:set, panel=(2,2))\n        plot([50 40], marker=:star, mc=:blue)\n    subplot(:show)","category":"page"},{"location":"subplot/#Restriction","page":"subplot","title":"Restriction","text":"","category":"section"},{"location":"subplot/","page":"subplot","title":"subplot","text":"Currently, nesting of subplots is not implemented. With the geog projection one cannot set the fist axes to geog and the other to whatever because only last dimension is assigned that label. The solution to fine control here is to use the GMT syntax given as a string","category":"page"},{"location":"#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Modules = [GMT, Drawing, Gdal]\nOrder   = [:function, :type, :module]","category":"page"},{"location":"#Functions","page":"Index","title":"Functions","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Modules = [GMT, Drawing, Gdal]\nOrder   = [:function, :type, :module]","category":"page"},{"location":"#GMT.arrows","page":"Index","title":"GMT.arrows","text":"arrows(cmd0::String=\"\", arg1=nothing; arrow=(...), kwargs...)\n\nPlots an arrow field. When the keyword arrow=(...) or vector=(...) is used, the direction (in degrees counter-clockwise from horizontal) and length must be found in columns 3 and 4, and size, if not specified on the command-line, should be present in column 5. The size is the length of the vector head. Vector stem width is set by option pen or line_attrib.\n\nThe vecmap=(...) variation is similar to above except azimuth (in degrees east of north) should be given instead of direction. The azimuth will be mapped into an angle based on the chosen map projection. If length is not in plot units but in arbitrary user units (e.g., a rate in mm/yr) then you can use the input_col option to scale the corresponding column via the +sscale modifier.\n\nThe geovec=(...) or geovector=(...) keywords plot geovectors. In geovectors azimuth (in degrees east from north) and geographical length must be found in columns 3 and 4. The size is the length of the vector head. Vector width is set by pen or line_attrib. Note: Geovector stems are drawn as thin filled polygons and hence pen attributes like dashed and dotted are not available. For allowable geographical units, see the units=() option.\n\nThe full arrow options list can be consulted at Vector Attributes\n\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nW | pen | line_attrib :: [Type => Str]\nSet pen attributes for lines or the outline of symbols   (http://docs.generic-mapping-tools.org/latest/plot.html#w)\n\nExample:\n\narrows([0 8.2 0 6], limits=(-2,4,0,9), arrow=(len=2,stop=1,shape=0.5,fill=:red), axis=:a, pen=\"6p\", show=true)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.bar","page":"Index","title":"GMT.bar","text":"bar(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads a file or (x,y) pairs and plots vertical bars extending from base to y.\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nfill :: [Type => Str –\nSelect color or pattern for filling the bars   (http://docs.generic-mapping-tools.org/latest/plot.html#g)\nbase | bottom :: [Type => Str | Num]\t\tkey=value\nBy default, base = ymin. Use this option to change that value. If base is not appended then we read it.   from the last input data column.\nsize | width :: [Type => Str | Num]\t\tkey=value\nThe size or width is the bar width. Append u if size is in x-units. When width is used the default is plot-distance units.\n\nExample:\n\nbar(sort(randn(10)), fill=:black, axis=:auto, show=true)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.bar3","page":"Index","title":"GMT.bar3","text":"bar3(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nRead a grid file, a grid or a MxN matrix and plots vertical bars extending from base to z.\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nfill :: [Type => Str]\t\tkey=color\nSelect color or pattern for filling the bars   (http://docs.generic-mapping-tools.org/latest/plot.html#g)\nbase :: [Type => Str | Num]\t\tkey=value\nBy default, base = ymin. Use this option to change that value. If base is not appended then we read it.\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\n\nExample:\n\nG = gmt(\"grdmath -R-15/15/-15/15 -I0.5 X Y HYPOT DUP 2 MUL PI MUL 8 DIV COS EXCH NEG 10 DIV EXP MUL =\");\nbar3(G, lw=:thinnest, show=true)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.basemap","page":"Index","title":"GMT.basemap","text":"basemap(cmd0::String=\"\"; kwargs...)\n\nPlot base maps and frames.\n\nFull option list at psbasemap\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nA | polygon :: [Type => Str | []]\nNo plotting is performed. Instead, we determine the geographical coordinates of the polygon   outline for the (possibly oblique) rectangular map domain.    (http://docs.generic-mapping-tools.org/latest/basemap.html#a)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nD | inset | inset_box :: [Type => Str]\nDraw a simple map insert box on the map. Requires -F.   (http://docs.generic-mapping-tools.org/latest/basemap.html#d)\nF | box :: [Type => Str]\nWithout further options, draws a rectangular border around any map insert (D), map scale (L)   or map rose (T)   (http://docs.generic-mapping-tools.org/latest/basemap.html#f)\nJz | zscale | zsize :: [Type => String]\nL | map_scale :: [Type => Str]\nDraw a map scale.   (http://docs.generic-mapping-tools.org/latest/basemap.html#l)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nTd | rose :: [Type => Str]\nDraws a map directional rose on the map at the location defined by the reference and anchor points.   (http://docs.generic-mapping-tools.org/latest/basemap.html#t)\nTm | compass :: [Type => Str]\nDraws a map magnetic rose on the map at the location defined by the reference and anchor points.   (http://docs.generic-mapping-tools.org/latest/basemap.html#t)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.blendimg!-Tuple{GMTimage{UInt8, 3}, GMTimage{UInt8, 2}}","page":"Index","title":"GMT.blendimg!","text":"blendimg!(color::GMTimage, shade::GMTimage; new=false)\n\nBlend the RGB color GMTimage with the shade intensity image (normally obtained with gdaldem) The new argument determines if we return a new RGB image or update the color argument.\n\nThe blending method is the one explained in https://gis.stackexchange.com/questions/255537/merging-hillshade-dem-data-into-color-relief-single-geotiff-with-qgis-and-gdal/255574#255574\n\nReturns\n\nA GMT RGB Image\n\nblendimg!(img1::GMTimage, img2::GMTimage; new=false, transparency=0.5)\n\nBlend two 2D UInt8 or 2 RGB images using transparency. \n\ntransparency The default value, 0.5, gives equal weight to both images. 0.75 will make img weight 3/4 of the total sum, and so forth.\nnew If true returns a new GMTimage object, otherwise it cahnges the img content.\n\nReturns\n\nA GMT intensity Image\n\n\n\n\n\n","category":"method"},{"location":"#GMT.blockmean","page":"Index","title":"GMT.blockmean","text":"blockmean(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nBlock average (x,y,z) data tables by L2 norm.\n\nFull option list at blockmean\n\nParameters\n\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/blockmean.html#i)\nA | fields :: [Type => Str]\nSelect which fields to write to individual grids. Append comma-separated codes for available   fields: z (the mean data z, but see -S), s (standard deviation), l (lowest value),   h (highest value) and w (the output weight; requires -W). [Default is just z].   (http://docs.generic-mapping-tools.org/latest/blockmean.html#a)\nC | center :: [Type => Bool]\nUse the center of the block as the output location [Default uses the mean location]. Not used when -A   (http://docs.generic-mapping-tools.org/latest/blockmean.html#c)\nE | extend :: [Type => Str | []]\nProvide Extended report which includes s (the standard deviation about the mean), l, the lowest   value, and h, the high value for each block. Output order becomes x,y,z,s,l,h[,w]. [Default   outputs x,y,z[,w]. See -W for w output. If -Ep is used we assume weights are 1/(sigma squared)   and s becomes the propagated error of the mean.   (http://docs.generic-mapping-tools.org/latest/blockmean.html#e)\nG | outgrid :: [Type => Str | []]\nWrite one or more fields directly to grids on disk; no table data are return. If more than one   fields are specified via A then grdfile must contain the format flag %s so that we can embed the   field code in the file names. If not provided but A is used, return 1 or more GMTgrid type(s).   (http://docs.generic-mapping-tools.org/latest/blockmean.html#g)\nS :: [Type => Str | Symb] \nUse S=:n to report the number of points inside each block, S=:s to report the sum of all z-values    inside a block, S=:w to report the sum of weights [Default (or S=:m reports mean value].   (http://docs.generic-mapping-tools.org/latest/blockmean.html#s)\nnpts | counts :: [Type => Any] \nReport the number of points inside each block\nsum :: [Type => Any] \nReport the sum of all z-values inside each block\nsum_weights :: [Type => Any] \nReport the the sum of weights\nW | weights :: [Type => Str | []]\nUnweighted input and output have 3 columns x,y,z; Weighted i/o has 4 columns x,y,z,w. Weights can   be used in input to construct weighted mean values for each block.   (http://docs.generic-mapping-tools.org/latest/blockmean.html#w)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.blockmedian","page":"Index","title":"GMT.blockmedian","text":"blockmedian(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nBlock average (x,y,z) data tables by L1 norm.\n\nFull option list at blockmedian\n\n\n\n\n\n","category":"function"},{"location":"#GMT.blockmode","page":"Index","title":"GMT.blockmode","text":"blockmode(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nBlock average (x,y,z) data tables by mode estimation.\n\nFull option list at blockmode\n\n\n\n\n\n","category":"function"},{"location":"#GMT.buffergeo-Tuple{String}","page":"Index","title":"GMT.buffergeo","text":"buffergeo(D::GMTdataset; width=0, unit=:m, np=120, flatstart=false, flatend=false, epsg::Integer=0, tol=0.01)\n\nor\n\nbuffergeo(line::Matrix; width=0, unit=:m, np=120, flatstart=false, flatend=false, proj::String=\"\", epsg::Integer=0, tol=0.01)\n\nor\n\nbuffergeo(fname::String; width=0, unit=:m, np=120, flatstart=false, flatend=false, proj::String=\"\", epsg::Integer=0, tol=0.01)\n\nComputes a buffer arround a poly-line. This calculation is performed on a ellipsoidal Earth (or other planet) using the GeographicLib (via PROJ4) so it should be very accurate.\n\nParameters\n\nD | line | fname: - the geometry. This can either be a GMTdataset (or vector of it), a Mx2 matrix, the name                         of file that can be read as a GMTdataset by gmtread() or a GDAL AbstractDataset object\nwidth:  - the buffer width to be applied. Expressed meters (the default), km or Miles (see unit)\nunit:   - If width is not in meters use one of unit=:km, or unit=:Nautical or unit=:Miles\nnp:     - Number of points into which circles are descretized (Default = 120)\nflatstart - When computing buffers arround poly-lines make the start flat (no half-circle)\nflatend   - Same as flatstart but for the buffer end\nproj  - If line data is in Cartesians but with a known projection pass in a PROJ4 string to allow computing the buffer\nepsg  - Same as proj but using an EPSG code\ntol   - At the end simplify the buffer line with a Douglas-Peucker procedure. Use TOL=0 to NOT do the line           simplification, or use any other value in degrees. Default computes it as 0.5% of buffer width.\n\nReturns\n\nA GMT dataset or a vector of it (when input is Vector{GMTdataset})\n\nExample: Compute a buffer with 50000 m width\n\nD = buffergeo([0 0; 10 10; 15 20], width=50000);\n\n\n\n\n\n","category":"method"},{"location":"#GMT.circgeo-Tuple{Real, Real}","page":"Index","title":"GMT.circgeo","text":"circgeo(lon, lat; radius=X, proj=\"\", s_srs=\"\", epsg=0, dataset=false, unit=:m, np=120, shape=\"\")\n\nor\n\ncircgeo(lonlat; radius=X, proj=\"\", s_srs=\"\", epsg=0, dataset=false, unit=:m, np=120, shape=\"\")\n\nArgs:\n\nlonlat:   - longitude, latitude (degrees). If a Mx2 matrix, returns as many segments as number of rows.               Use this to compute multiple shapes at different positions. In this case output type is\n\n\t\t\talways a vector of GMTdatasets.\n\nradius:   - The circle radius in meters (but see unit) or circumscribing circle for the other shapes\nproj or s_srs:  - the given projection whose ellipsoid we move along. Can be a proj4 string or an WKT\nepsg:     - Alternative way of specifying the projection [Default is WGS84]\ndataset:  - If true returns a GMTdataset instead of matrix (with single shapes)\nunit:     - If radius is not in meters use one of unit=:km, or unit=:Nautical or unit=:Miles\nnp:       - Number of points into which the circle is descretized (Default = 120)\nshape:    - Optional string/symbol with \"triangle\", \"square\", \"pentagon\" or \"hexagon\" (or just the first char)               to compute one of those geometries instead of a circle. np is ignored in these cases.\n\nReturns\n\ncirc - A Mx2 matrix or GMTdataset with the circle coordinates\n\nExample: Compute circle about the (0,0) point with a radius of 50 km\n\nc = circgeo([0.,0], radius=50, unit=:k)\n\n\n\n\n\n","category":"method"},{"location":"#GMT.clip","page":"Index","title":"GMT.clip","text":"clip(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads (length,azimuth) pairs from file and plot a windclip diagram.\n\nFull option list at psclip\n\nParameters\n\nC | endclippath :: [Type => Bool]\nMark end of existing clip path. No input file is needed.   (http://docs.generic-mapping-tools.org/latest/psclip.html#c)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nA | inc :: [Type => Str or []]\nBy default, geographic line segments are connected as great circle arcs. To connect them as straight lines, use A    (http://docs.generic-mapping-tools.org/latest/psclip.html#a)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nJz | zscale | zsize :: [Type => String]\nN | invert :: [Type => Bool]\nInvert the sense of the test, i.e., clip regions where there is data coverage.   (http://docs.generic-mapping-tools.org/latest/psclip.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nT | clip_limits :: [Type => Bool]\nRather than read any input files, simply turn on clipping for the current map region.   (http://docs.generic-mapping-tools.org/latest/psclip.html#t)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.coast","page":"Index","title":"GMT.coast","text":"coast(cmd0::String=\"\"; kwargs...)\n\nPlot continents, shorelines, rivers, and borders on maps. Plots grayshaded, colored, or textured land-masses [or water-masses] on maps and [optionally] draws coastlines, rivers, and political boundaries. A map projection must be supplied.\n\nFull option list at coast\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nA | area :: [Type => Str or Number]\nFeatures with an area smaller than minarea in km^2 or of   hierarchical level that is lower than minlevel or higher than   max_level will not be plotted.   (http://docs.generic-mapping-tools.org/latest/coast.html#a)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | river_fill :: [Type => Str]\nSet the shade, color, or pattern for lakes and river-lakes.   (http://docs.generic-mapping-tools.org/latest/coast.html#c)\nD | res | resolution :: [Type => Str]\t\tArg = clihfa\nSelects the resolution of the data set to use ((f)ull, (h)igh, (i)ntermediate, (l)ow, (c)rude), or (a)uto).   (http://docs.generic-mapping-tools.org/latest/coast.html#d)\nE | DCW :: [Type => Str]\nSelect painting or dumping country polygons from the Digital Chart of the World.   (http://docs.generic-mapping-tools.org/latest/coast.html#e)\nTuple(\"code\", Str); Tuple(code, number); Tuple(\"code\" [,\"fill\"], (pen)); Tuple((...),(...),...)\nex: (\"PT\",(0.5,\"red\",\"–\")); ((\"PT\",\"gblue\",(0.5,\"red\"),(\"ES\",(0.5,\"yellow\")))\nDCW=:PT; DCW=(:PT, 1); DCW=(\"PT\", :red)\nF | box :: [Type => Str]\nDraws a rectangular border around the map scale or rose.   (http://docs.generic-mapping-tools.org/latest/coast.html#f)\nG | land :: [Type => Str]\nSelect filling or clipping of “dry” areas.   (http://docs.generic-mapping-tools.org/latest/coast.html#g)\nI | rivers :: [Type => Str]\nDraw rivers. Specify the type of rivers and [optionally] append pen attributes.   (http://docs.generic-mapping-tools.org/latest/coast.html#i)\nL | map_scale :: [Type => Str]\nDraw a map scale.   (http://docs.generic-mapping-tools.org/latest/coast.html#l)\nM | dump :: [Type => Str]\nDumps a single multisegment ASCII output. No plotting occurs.   (http://docs.generic-mapping-tools.org/latest/coast.html#m)\nN | borders :: [Type => Str]\nDraw political boundaries. Specify the type of boundary and [optionally] append pen attributes   (http://docs.generic-mapping-tools.org/latest/coast.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nclip :: [Type => Str]\t\tArg = landwaterend\nTo clip land do clip=:land, clip=:water clips water. Use end to mark end of existing clip path.   No projection information is needed.   (http://docs.generic-mapping-tools.org/latest/coast.html#q)\nS | water | ocean :: [Type => Str]\nSelect filling or clipping of “wet” areas.   (http://docs.generic-mapping-tools.org/latest/coast.html#s)\nTd | rose` :: [Type => Str]\nDraws a map directional rose on the map at the location defined by the reference and anchor points.   (http://docs.generic-mapping-tools.org/latest/coast.html#t)\nTm | compass :: [Type => Str]\nDraws a map magnetic rose on the map at the location defined by the reference and anchor points.   (http://docs.generic-mapping-tools.org/latest/coast.html#t)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | shore | shorelines | coast  :: [Type => Str]   Draw shorelines [Default is no shorelines]. Append pen attributes.   (http://docs.generic-mapping-tools.org/latest/coast.html#w)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.colorbar","page":"Index","title":"GMT.colorbar","text":"colorbar(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nPlots gray scales or color scales on maps.\n\nFull option list at psscale\n\nD | pos | position :: [Type => Str]\nDefines the reference point on the map for the color scale using one of four coordinate systems.   (http://docs.generic-mapping-tools.org/latest/psscale.html#d)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | color | cmap :: [Type => Str]\t\tArg = cpt master+izinc color1color2*color3*\nGive a CPT name or specify -Ccolor1,color2[,color3,...] to build a linear continuous CPT from those   colors automatically.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#c)\nF | box :: [Type => Str]\nDraws a rectangular border around the scale.   (http://docs.generic-mapping-tools.org/latest/psscale.html#f)\nG | truncate :: [Type => Str]  \nTruncate the incoming CPT so that the lowest and highest z-levels are to zlo and zhi.   (http://docs.generic-mapping-tools.org/latest/psscale.html#g)\nI | shade :: [Type => Number | Str]\nAdd illumination effects.   (http://docs.generic-mapping-tools.org/latest/psscale.html#i)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nJz | zscale | zsize :: [Type => String]\nL | equal | equal_size :: [Type => Str | Bool]\t\tArg = [i][gap]\nGives equal-sized color rectangles. Default scales rectangles according to the z-range in the CPT.   (http://docs.generic-mapping-tools.org/latest/psscale.html#l)\nM | monochrome :: [Type => Bool]\nForce conversion to monochrome image using the (television) YIQ transformation.   (http://docs.generic-mapping-tools.org/latest/psscale.html#m)\nN | dpi :: [Type => Str | Number]\nControls how the color scale is represented by the PostScript language.   (http://docs.generic-mapping-tools.org/latest/psscale.html#n)\nQ | log :: [Type => Str]\nSelects a logarithmic interpolation scheme [Default is linear].   (http://docs.generic-mapping-tools.org/latest/psscale.html#q)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | nolines :: [Type => Bool | []]\nDo not separate different color intervals with black grid lines.\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | zscale :: [Type => Number]\nMultiply all z-values in the CPT by the provided scale.   (http://docs.generic-mapping-tools.org/latest/psscale.html#w)\nZ | zfile :: [Type => Str]\nFile with colorbar-width per color entry.   (http://docs.generic-mapping-tools.org/latest/psscale.html#z)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.contour","page":"Index","title":"GMT.contour","text":"contour(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads a table data and produces a raw contour plot by triangulation.\n\nFull option list at contour\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nA | annot :: [Type => Str | Number]       Arg = -+annot_intlabelinfo\nannot_int is annotation interval in data units; it is ignored if contour levels are given in a file.   (http://docs.generic-mapping-tools.org/latest/contour.html#a)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | cont | contour | contours | levels :: [Type => Str | Number | GMTcpt]  Arg = +cont_int\nContours to be drawn may be specified in one of three possible ways.   (http://docs.generic-mapping-tools.org/latest/contour.html#c)\nD | dump :: [Type => Str]\nDump contours as data line segments; no plotting takes place.   (http://docs.generic-mapping-tools.org/latest/contour.html#d)\nE | index :: [Type => Str | Mx3 array]\nGive name of file with network information. Each record must contain triplets of node   numbers for a triangle.   (http://docs.generic-mapping-tools.org/latest/contour.html#e)\nG | labels :: [Type => Str]\nControls the placement of labels along the quoted lines.   (http://docs.generic-mapping-tools.org/latest/contour.html#g)\nI | fill | colorize :: [Type => Bool]\nColor the triangles using the color scale provided via C.   (http://docs.generic-mapping-tools.org/latest/contour.html#i)\nJz | zscale | zsize :: [Type => String]\nL | mesh :: [Type => Str | Number]\nDraw the underlying triangular mesh using the specified pen attributes (if not provided, use default pen)   (http://docs.generic-mapping-tools.org/latest/contour.html#l)\nN | no_clip :: [Type => Bool]\nDo NOT clip contours or image at the boundaries [Default will clip to fit inside region].   (http://docs.generic-mapping-tools.org/latest/contour.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nQ | cut :: [Type => Str | Number]         Arg = cutunit+z\nDo not draw contours with less than cut number of points.   (http://docs.generic-mapping-tools.org/latest/contour.html#q)\nS | skip :: [Type => Str | []]            Arg = pt\nSkip all input xyz points that fall outside the region.   (http://docs.generic-mapping-tools.org/latest/contour.html#s)\nT | ticks :: [Type => Str]                 Arg = +-+a+dgaplength+llabels\nDraw tick marks pointing in the downward direction every gap along the innermost closed contours.   (http://docs.generic-mapping-tools.org/latest/contour.html#t)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | pen :: [Type => Str | Number]\nSets the attributes for the particular line.   (http://docs.generic-mapping-tools.org/latest/contour.html#w)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nZ | scale :: [Type => Str]\nUse to subtract shift from the data and multiply the results by factor before contouring starts.   (http://docs.generic-mapping-tools.org/latest/contour.html#z)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ndo | nodata_out :: [Type => Str or Number]     Arg = nodata\nExamine all output columns and if any item equals NAN substitute it with   the chosen missing data value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#do-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.contourf","page":"Index","title":"GMT.contourf","text":"contourf(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nPerforms Delaunay triangulation on x,y[,z] data, i.e., it find how the points should be connected to give the most equilateral triangulation possible. \n\nFull option list at triangulate\n\nParameters\n\nA | annot :: [Type => Str | Number]       Arg = -+annot_intlabelinfo\nannot_int is annotation interval in data units; it is ignored if contour levels are given in a file.   (http://docs.generic-mapping-tools.org/latest/contour.html#a)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | cont | contour | contours | levels :: [Type => Str | Number | GMTcpt]  Arg = +cont_int\nContours to be drawn may be specified in one of three possible ways.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#c)\nE | index :: [Type => Str | Mx3 array]\nGive name of file with network information. Each record must contain triplets of node   numbers for a triangle.   (http://docs.generic-mapping-tools.org/latest/contour.html#e)\nG | labels :: [Type => Str]\nControls the placement of labels along the quoted lines.   (http://docs.generic-mapping-tools.org/latest/contour.html#g)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nQ | cut :: [Type => Str | Number]         Arg = cutunit+z\nDo not draw contours with less than cut number of points.   (http://docs.generic-mapping-tools.org/latest/contour.html#q)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | skip :: [Type => Str | []]            Arg = pt\nSkip all input xyz points that fall outside the region (Used when input data is a table).   (http://docs.generic-mapping-tools.org/latest/contour.html#s)\nS | smooth :: [Type => Number]\nUsed to resample the contour lines at roughly every (gridbox_size/smoothfactor) interval.   (Used when input data is a grid)   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#s)\nT | ticks :: [Type => Str]                 Arg = +-+a+dgaplength+llabels\nDraw tick marks pointing in the downward direction every gap along the innermost closed contours.   (http://docs.generic-mapping-tools.org/latest/contour.html#t)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | pen :: [Type => Str | Number]\nSets the attributes for the particular line.   (http://docs.generic-mapping-tools.org/latest/contour.html#w)\nZ | xyz | triplets :: [Type => Bool]\n(http://docs.generic-mapping-tools.org/latest/triangulate.html#z)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\nExamples\n\n    G = GMT.peaks();\n    C = makecpt(T=(-7,9,2));\n\n    contourf(G, show=1)\n    contourf(G, C=[-2, 0, 2, 5], show=1)\n    contourf(G, C, contour=[-2, 0, 2, 5], show=1)\n    contourf(G, C, annot=[-2, 0, 2, 5], show=1)\n    contourf(G, C, annot=2, show=1)\n    contourf(G, C, contour=1, annot=[-2, 0, 2, 5], show=1)\n    contourf(G, C, annot=:none, show=1)\n\n    d = [0 2 5; 1 4 5; 2 0.5 5; 3 3 9; 4 4.5 5; 4.2 1.2 5; 6 3 1; 8 1 5; 9 4.5 5];\n    contourf(d, limits=(-0.5,9.5,0,5), pen=0.25, labels=(line=(:min,:max),), show=1)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.coupe","page":"Index","title":"GMT.coupe","text":"coupe(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nPlot cross-sections of focal mechanisms.\n\nFull option list at pscoupe. Essentially the same as meca plus A. Run gmthelp(coupe) to see the list.\n\n\n\n\n\n","category":"function"},{"location":"#GMT.cpt4dcw-Tuple{String, Vector{var\"#s1665\"} where var\"#s1665\"<:Real}","page":"Index","title":"GMT.cpt4dcw","text":"C = cpt4dcw(codes::String, vals::Vector{<:Real}; kwargs...)\n\nCreate a categorical CPT to use with the output of coast(dcw=...) to make Choropleth maps.\n\ncodes is a comma separated string with two chars country codes (ex: \"PT,ES,FR,IT\")\nvals a vector with same size as number of country codes, with the values used to colorize the countries\n\nOptionally provide a CPT in the kwarg cmap=CPT with a range sufficient to tansform the vals in colors. As an alternative to the above provide a makecpt type range numeric vector to create a CPT. If none of these are provided a default CPT = makecpt(range=(0,255,1)) will be used.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.earthtide","page":"Index","title":"GMT.earthtide","text":"earthtide(cmd0::String=\"\"; kwargs...)\n\nCompute grids or time-series of solid Earth tides.\n\nFull option list at earthtide\n\n\tG = earthtide();\n\timshow(G)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.epsg2proj-Tuple{Integer}","page":"Index","title":"GMT.epsg2proj","text":"epsg2proj(code::Integer)\n\nConvert a EPSG code into the PROJ4 form.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.epsg2wkt-Tuple{Integer}","page":"Index","title":"GMT.epsg2wkt","text":"epsg2wkt(code::Integer, pretty::Bool=false)\n\nConvert a EPSG code into the WKT form. Use pretty=true to return a more human readable text.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.filter1d","page":"Index","title":"GMT.filter1d","text":"filter1d(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nTime domain filtering of 1-D data tables.\n\nFull option list at filter1d\n\nParameters\n\nF | filter_type :: [Type => Str]   Arg = type width[modifiers]\nSets the filter type. Choose among convolution and non-convolution filters. Append the   filter code followed by the full filter width in same units as time column.   (http://docs.generic-mapping-tools.org/latest/filter1d.html#f)\nD | inc :: [Type => Number]        Arg = increment\nincrement is used when series is NOT equidistantly sampled. Then increment will be the abscissae resolution.   (http://docs.generic-mapping-tools.org/latest/filter1d.html#d)\nE | ends :: [Type => Bool | []]\nInclude Ends of time series in output. Default loses half the filter-width of data at each end.   (http://docs.generic-mapping-tools.org/latest/filter1d.html#e)\nL | gap_width :: [Type => Number | Str]      Arg = width\nChecks for Lack of data condition. If input data has a gap exceeding width then no output will be given at that point.   (http://docs.generic-mapping-tools.org/latest/filter1d.html#l)\nN | time_col :: [Type => Int]      Arg = t_col\nIndicates which column contains the independent variable (time). The left-most column   is # 0, the right-most is # (n_cols - 1). [Default is 0].   (http://docs.generic-mapping-tools.org/latest/filter1d.html#n)\nQ | quality :: [Type => Number]    Arg = q_factor\nAssess Quality of output value by checking mean weight in convolution. Enter q_factor between 0 and 1.   (http://docs.generic-mapping-tools.org/latest/filter1d.html#q)\nS | symetry :: [Type => Number]    Arg = symmetry_factor\nChecks symmetry of data about window center. Enter a factor between 0 and 1.   (http://docs.generic-mapping-tools.org/latest/filter1d.html#s)\nT | equi_space :: [Type => List | Str]     Arg = [min/max/]inc[+a|n]\nMake evenly spaced time-steps from min to max by inc [Default uses input times].   (http://docs.generic-mapping-tools.org/latest/filter1d.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.fitcircle","page":"Index","title":"GMT.fitcircle","text":"fitcircle(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nFind mean position and great [or small] circle fit to points on a sphere.\n\nFull option list at fitcircle\n\nParameters\n\nL | norm :: [Type => Int | []]\nSpecify the desired norm as 1 or 2, or use [] or 3 to see both solutions.   (http://docs.generic-mapping-tools.org/latest/fitcircle.html#l)\nF | coord | coordinates :: [Type => Str]\tArg = f|m|n|s|c\nOnly return data coordinates, and append Arg to specify which coordinates you would like.   (http://docs.generic-mapping-tools.org/latest/fitcircle.html#f)\nS | symetry :: [Type => Number]    Arg = symmetry_factor\nAttempt to   (http://docs.generic-mapping-tools.org/latest/fitcircle.html#s)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gadm-Tuple{Any, Vararg{Any, N} where N}","page":"Index","title":"GMT.gadm","text":"gadm(country, subregions...; children=false, names=false, children_raw=false, reportlevels=false)\n\nReturns a GMTdataset for the requested country, or country subregion(s)\n\ncountry: ISO 3166 Alpha 3 country code  \nsubregions: Full official names in hierarchial order (provinces, districts, etc.) To know the names of all administrative children of parent, use the option names\nchildren: When true, function returns all subregions of parent\nchildren_raw: When true, function returns two variables -> parent, children, where children is a GDAL object E.g. when children is set to true and when querying just the country, second return parameter are the states/provinces. If children we return a Vector of GMTdataset with the polygons. If children_raw the second output is a GDAL object much like in GADM.jl (less the Tables.jl) \nreportlevels: just report the number of administrative levels (including the country) and exit.\n\nExamples\n\n# data of India's borders\ndata = gadm(\"IND\")\n\n# uttar -> the limits of the Uttar Pradesh state\nuttar = gadm(\"IND\", \"Uttar Pradesh, children=true)\n\n# uttar -> limits of all districts of the  Uttar Pradesh state\nuttar = gadm(\"IND\", \"Uttar Pradesh\", children=true)\n\n# Names of all states of India\ngadm(\"IND\", names=true)\n\n\n\n\n\n","category":"method"},{"location":"#GMT.gammacorrection-Tuple{GMTimage, Any}","page":"Index","title":"GMT.gammacorrection","text":"gammacorrection(I::GMTimage, gamma; contrast=[0.0, 1.0], brightness=[0.0, 1.0])\n\nApply a gamma correction to a 2D (intensity) GMTimage using the exponent gamma. Optionally set also contrast and/or brightness\n\nReturns\n\nA GMT intensity Image\n\n\n\n\n\n","category":"method"},{"location":"#GMT.gd2gmt-Tuple{Any}","page":"Index","title":"GMT.gd2gmt","text":"O = gd2gmt(dataset; band=1, bands=[], sds=0, pad=0)\n\nConvert a GDAL raster dataset into either a GMTgrid (if type is Int16 or Float) or a GMTimage type Use BAND to select a single band of the dataset. When you know that the dataset contains several bands of an image, use the kwarg BANDS with a vector the wished bands (1, 3 or 4 bands only).\n\nWhen DATASET is a string it may contain the file name or the name of a subdataset. In former case you can use the kwarg SDS to selec the subdataset numerically. Alternatively, provide the full SDS name. For files with SDS with a scale_factor (e.g. MODIS data), that scale is applyied automaticaly.\n\nExamples:\n   G = gd2gmt(\"AQUA_MODIS.20210228.L3m.DAY.NSST.sst.4km.NRT.nc\", sds=1);\nor\n   G = gd2gmt(\"SUBDATASET_1_NAME=NETCDF:AQUA_MODIS.20210228.L3m.DAY.NSST.sst.4km.NRT.nc:sst\");\nor\n   G = gd2gmt(\"NETCDF:AQUA_MODIS.20210228.L3m.DAY.NSST.sst.4km.NRT.nc:sst\");\n\n\n\n\n\n","category":"method"},{"location":"#GMT.gdalread","page":"Index","title":"GMT.gdalread","text":"gdalread(fname::AbstractString, opts=String[]; gdataset=false, kwargs...)\n\nRead a raster or a vector file from a disk file and return the result either as a GMT type (the default) or a GDAL dataset.\n\nfname: Input data. It can be a file name, a GMTgrid or GMTimage object or a GDAL dataset\nopts:  List of options. The accepted options are the ones of the gdal_translate utility.          This list can be in the form of a vector of strings, or joined in a simgle string.\ngdataset: If set to true forces the return of a GDAL dataset instead of a GMT type.\nkwargs: This options accept the GMT region (-R) and increment (-I)\n\nReturns\n\nA GMT grid/image or a GDAL dataset\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gdalshade-Tuple{Any}","page":"Index","title":"GMT.gdalshade","text":"gdalshade(filename; kwargs...)\n\nCreate a shaded relief with the GDAL method (color image blended with shaded intensity).\n\nkwargs hold the keyword=value to pass the arguments to gdaldem hillshade\n\nExample:     I = gdalshade(\"hawaii_south.grd\", C=\"faa.cpt\", zfactor=4);\n\nReturns\n\nA GMT RGB Image\n\n\n\n\n\n","category":"method"},{"location":"#GMT.gdalwrite","page":"Index","title":"GMT.gdalwrite","text":"gdalwrite(data, fname::AbstractString, opts=String[]; kwargs...)\n\nor\n\ngdalwrite(fname::AbstractString, data, opts=String[]; kwargs...)\n\nWrite a raster or a vector file to disk\n\nfname: Output file name. If not explicitly selected via opts the used driver will be picked from the file extension.\ndata:  The data to be saved in file. It can be a GMT type or a GDAL dataset.\nopts:  List of options. The accepted options are the ones of the gdal_translate or ogr2ogr utility.          This list can be in the form of a vector of strings, or joined in a simgle string.\nkwargs: This options accept the GMT region (-R) and increment (-I)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.geod-Tuple{Vector{var\"#s1665\"} where var\"#s1665\"<:Real, Any, Any}","page":"Index","title":"GMT.geod","text":"geod(lonlat, azim, distance; proj::String=\"\", s_srs::String=\"\", epsg::Integer=0, dataset=false, unit=:m)\n\nSolve the direct geodesic problem.\n\nArgs:\n\nlonlat:   - longitude, latitude (degrees). This can be a vector or a matrix with one row only.\nazimuth:  - azimuth (degrees) ∈ [-540, 540)\ndistance: - distance to move from (lat,lon); can be negative, Default is meters but see unit\nproj or s_srs:  - the given projection whose ellipsoid we move along. Can be a proj4 string or an WKT\nepsg:     - Alternative way of specifying the projection [Default is WGS84]\ndataset:  - If true returns a GMTdataset instead of matrix\nunit:     - If distance is not in meters use one of unit=:km, or unit=:Nautical or unit=:Miles\n\nThe distance argument can be a scalar, a Vector, a Vector{Vector} or an AbstractRange. The azimuth can be a scalar or a Vector. \n\nWhen azimuth is a Vector we always return a GMTdataset with the multiple lines. Use this together with a non-scalar distance to get lines with multiple points along the line. The number of points along line does not even need to be the same. For data, give the distance as a Vector{Vector} where each element of distance is a vector with the distances of the points along a line. In this case the number of distance elements must be equal to the number of azimuth. \n\nReturns\n\ndest - destination after moving for [distance] metres in [azimuth] direction.\nazi  - forward azimuth (degrees) at destination [dest].\n\nExample: Compute two lines starting at (0,0) with lengths 111100 & 50000, heading at 15 and 45 degrees.\n\ngeod([0., 0], [15., 45], [[0, 10000, 50000, 111100.], [0., 50000]])[1]\n\n\n\n\n\n","category":"method"},{"location":"#GMT.geodetic2enu-NTuple{6, Any}","page":"Index","title":"GMT.geodetic2enu","text":"Convert from geodetic coordinates to local East, North, Up (ENU) coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.get_segment_ids","page":"Index","title":"GMT.get_segment_ids","text":"ids, ind = get_segment_ids(D, case=0)::Tuple{Vector{String}, Vector{Int}}\n\nWhere D is a GMTdataset of a vector of them, returns the segment ids (first text after the '>') and the idices of those segments.\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmt-Tuple{String, Vararg{Any, N} where N}","page":"Index","title":"GMT.gmt","text":"Call a GMT module. This function is not called directly by the users, except when using the monolithic mode. Usage:\n\ngmt(\"module_name `options`\", args...)\n\n\n\n\n\n","category":"method"},{"location":"#GMT.gmt2gd-Tuple{Any}","page":"Index","title":"GMT.gmt2gd","text":"ds = gmt2gd(GI)\n\nCreate GDAL dataset from the contents of GI that can be either a Grid or an Image\n\nds = gmt2gd(D, save=\"\", geometry=\"\")\n\nCreate GDAL dataset from the contents of D, which can be a GMTdataset, a vector of GMTdataset ir a MxN array. The SAVE keyword instructs GDAL to save the contents as an OGR file. Format is determined by file estension. GEOMETRY can be a string with \"polygon\", where file will be converted to polygon/multipolygon depending on D is a single or a multi-segment object, or \"point\" to convert to a multipoint geometry.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.gmt2kml","page":"Index","title":"GMT.gmt2kml","text":"gmt2kml(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nConvert GMT data tables to KML files for Google Earth\n\nFull option list at gmt2kml\n\nParameters\n\nA | altitude_mode :: [Type => Str]       Arg = agsaltxscale\nSelect one of three altitude modes recognized by Google Earth that determines the altitude (in m)   of the feature: a absolute altitude, g altitude relative to sea surface or ground,   s altitude relative to seafloor or ground.   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#a)\nC | color | cmap :: [Type => Str]\t\tArg = cpt master+izinc color1color2*color3*\nGive a CPT name or specify -Ccolor1,color2[,color3,...] to build a linear continuous CPT from those   colors automatically.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#c)\nD | descript :: [Type => Str]   Arg = descriptfile\nFile with HTML snippets that will be included as part of the main description content for the KML file.   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#d)\nE | extrude :: [Type => Str | []]  Arg = altitude\nExtrude feature down to ground level.   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#e)\nF | feature_type :: [Type => Str]  Arg = estlpw\nSets the feature type. Choose from points (event, symbol, or timespan), line, polygon, or wiggle.   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#f)\nG | fill :: [Type => Str]  Arg = fnfill\nSets color fill (G=:f) or label font color (G=:n).   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#g)\nI | icon :: [Type => Str]      Arg = icon\nSpecify the URL to an alternative icon that should be used for the symbol   [Default is a Google Earth circle].   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#i)\nK | not_finished :: [Type => Bool]\nAllow more KML code to be appended to the output later [finalize the KML file].   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#k)\nL | extended_data :: [Type => Str]      Arg = name1name2\nExtended data given. Append one or more column names separated by commas.   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#l)\nN | feature_name :: [Type => Str | Number]      Arg = tcol name_templatename\nBy default, if segment headers contain a -L”label string” then we use that for the name of the KML feature.   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#n)\nO | overlay :: [Type => Bool]\nAppend KML code to an existing KML file [initialize a new KML file].   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#o)\nQa | wiggles :: [Type => Str]      Arg =  azimuth\nOption in support of wiggle plots (requires F=:w).   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#q)\nQs | wiggle_scale :: [Type => Str | Number]      Arg =  scaleunit\nRequired setting for wiggle plots (i.e., it requires F=:w). Sets a wiggle scale   in z-data units per the user’s units   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#q)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | scale :: [Type => Str]      Arg =  cnscale\nScale icons or labels. Here, S=:c sets a scale for the symbol icon, whereas S=:n sets   a scale for the name labels   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#s)\nT | title :: [Type => Str]    Arg = titlefoldername\nSets the document title [default is unset]. Optionally, append /FolderName;   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#t)\nW | pen :: [Type => Str | []]      Arg =  penattr\nSet pen attributes for lines, wiggles or polygon outlines.   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#w)\nZ | attrib :: [Type => Str]      Arg =  args\nSet one or more attributes of the Document and Region tags.   (http://docs.generic-mapping-tools.org/latest/gmt2kml.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtbegin","page":"Index","title":"GMT.gmtbegin","text":"gmtbegin(name::String=\"\"; fmt)\n\nStart a GMT session in modern mode (GMT >= 6). 'name' contains the figure name with or without extension. If an extension is used  (e.g. \"map.pdf\") it is used to select the image format.\n\nAs an alternative use 'fmt' as a string or symbol containing the format (ps, pdf, png, PNG, tif, jpg, eps).\n\nBy default name=\"GMTplot\" and fmt=\"ps\"\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtconnect","page":"Index","title":"GMT.gmtconnect","text":"gmtconnect(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nConnect individual lines whose end points match within tolerance\n\nFull option list at gmtconnect\n\nParameters\n\nC | closed :: [Type => Str | []]        Arg = [closed]\nWrite all the closed polygons to closed [gmtgmtconnect_closed.txt] and return all other   segments as they are. No gmtconnection takes place.   (http://docs.generic-mapping-tools.org/latest/gmtconnect.html#c)\nD | dump :: [Type => Str | []]   Arg = [template]\nFor multiple segment data, dump each segment to a separate output file   (http://docs.generic-mapping-tools.org/latest/gmtconnect.html#d)\nL | linkfile :: [Type => Str | []]      Arg = [linkfile]\nWrites the link information to the specified file [gmtgmtconnect_link.txt].   (http://docs.generic-mapping-tools.org/latest/gmtconnect.html#l)\nQ | list_file :: [Type => Str | []]      Arg =  [listfile]\nUsed with D to write a list file with the names of the individual output files.   (http://docs.generic-mapping-tools.org/latest/gmtconnect.html#q)\nT | tolerance :: [Type => Str | List]    Arg = [cutoff[unit][/nn_dist]]\nSpecifies the separation tolerance in the data coordinate units [0]; append distance unit.   If two lines has end-points that are closer than this cutoff they will be joined.   (http://docs.generic-mapping-tools.org/latest/gmtconnect.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtconvert","page":"Index","title":"GMT.gmtconvert","text":"gmtconvert(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nConvert, Paste, and/or Extract columns from data tables\n\nFull option list at gmtconvert\n\nParameters\n\nA | h_cat :: [Type => Str | []]\nThe records from the input files should be pasted horizontally, not appended vertically [Default].   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#a)\nC | n_records :: [Type => Str]  Arg = +lmin+umax+i\nOnly output segments whose number of records matches your given criteria:   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#c)\nD | dump :: [Type => Str | []]   Arg = template+oorig\nFor multiple segment data, dump each segment to a separate output file.   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#d)\nE | first_last :: [Type => Str | []]   Arg = flmMstride\nOnly extract the first and last record for each segment of interest.   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#e)\nF | conn_method :: [Type => Str | []]   Arg = cnrvrefpoint\nAlter the way points are connected (by specifying a scheme) and data are grouped (by specifying a method).   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#f)\nI | invert | reverse :: [Type => Str | Bool]      Arg = tsr\nInvert the order of items, i.e., output the items in reverse order, starting with the last   and ending up with the first item.   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#i)\nL | list_only :: -[Type => Bool]\nOnly output a listing of all segment header records and no data records.   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#l)\nN | sort :: [Type => Str | Number]      Arg = -+col\nNumerically sort each segment based on values in column col.   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#n)\nQ | select_num :: [Type => Str]      Arg =  selection\nOnly write segments whose number is included in selection and skip all others.   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#q)\nS | select_hdr :: [Type => Str]      Arg =  search string or regexpi\nOnly output those segments whose header record contains the specified text string.   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#s)\nT | suppress | skip :: [Type => Str | []]    Arg = hd\nSuppress the writing of certain records on output. Append h to suppress segment headers   [Default] or d to suppress duplicate data records. Use T=:hd to suppress both types of records.   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#t)\nW | word2num :: [Type => Str | []]      Arg = +n\nAttempt to gmtconvert each word in the trialing text to a number and append such values   to the numerical output columns.   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#w)\nZ | range :: [Type => Str | []]      Arg =  firstlast\nLimit output to the specified record range. If first is not set it defaults to record 0   (very first record) and if last is not set then it defaults to the very last record.   (http://docs.generic-mapping-tools.org/latest/gmtconvert.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\ns | skiprows | skip_NaN :: [Type => Str]       Arg = colsar\nSuppress output for records whose z-value equals NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#s-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtend","page":"Index","title":"GMT.gmtend","text":"gmtend(show=false, verbose=nothing)\n\nEnds a GMT session in modern mode (GMT >= 6) and optionaly shows the figure\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtfig-Tuple{String}","page":"Index","title":"GMT.gmtfig","text":"function gmtfig(name::String; fmt=nothing, opts=\"\")\n\nSet attributes for the current modern mode session figure. 'name' name of the new (or resumed) figure. It may contain an extension. 'fmt'  figures graphics format (or formats, e.g. fmt=\"eps,pdf\"). Not needed if 'name' has extension 'opts' Sets one or more comma-separated options (and possibly arguments) that can be passed to psconvert when preparing this figure.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.gmtgravmag3d","page":"Index","title":"GMT.gmtgravmag3d","text":"gmtgravmag3d(cmd0::String=\"\"; kwargs...)\n\nCompute the gravity/magnetic anomaly of a 3-D body by the method of Okabe.\n\nFull option list at gmtgravmag3d\n\n\tG = gmtgravmag3d(M=(shape=:prism, params=(1,1,1,5)), I=1.0, R=\"-15/15/-15/15\", H=\"10/60/10/-10/40\");\n\timshow(G)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtinfo","page":"Index","title":"GMT.gmtinfo","text":"gmtinfo(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads files and finds the extreme values in each of the columns.\n\nFull option list at gmtinfo\n\nParameters\n\nA | ranges :: [Type => Str]\nSpecify how the range should be reported.   (http://docs.generic-mapping-tools.org/latest/gmtinfo.html#a)\nC | per_column :: [Type => Bool]\nReport the min/max values per column in separate columns [Default uses <min/max> format].   (http://docs.generic-mapping-tools.org/latest/gmtinfo.html#c)\nD | center :: [Type => Bool]\nModifies results obtained by -I by shifting the region to better align with the center of the data.   (http://docs.generic-mapping-tools.org/latest/gmtinfo.html#d)\nE | get_record :: [Type => Str | []]\nReturns the record whose column col contains the minimum (l) or maximum (h) value.    (http://docs.generic-mapping-tools.org/latest/gmtinfo.html#e)\nF | counts :: [Type => Str | []]\nReturns the counts of various records depending on the appended mode.   (http://docs.generic-mapping-tools.org/latest/gmtinfo.html#f)\nI | inc | increment | spacing :: [Type => Str | Number | Tuple]\nReport the min/max of the first n columns to the nearest multiple of the provided increments   and output results in the form -Rw/e/s/n    (http://docs.generic-mapping-tools.org/latest/gmtinfo.html#i)\nL | common_limits :: [Type => Bool]\nDetermines common limits across tables or segments.   (http://docs.generic-mapping-tools.org/latest/gmtinfo.html#l)\nS | forerrorbars :: [Type => Str | []]\nAdd extra space for error bars. Useful together with I option and when later plotting with plot E.   (http://docs.generic-mapping-tools.org/latest/gmtinfo.html#s)\nT | nearest_multiple :: [Type => Str | Number]    Arg = dz+ccol\nReport the min/max of the first (0’th) column to the nearest multiple of dz and output this as   the string -Tzmin/zmax/dz.   (http://docs.generic-mapping-tools.org/latest/gmtinfo.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtmath-Tuple{String, Vararg{Any, N} where N}","page":"Index","title":"GMT.gmtmath","text":"gmtmath(cmd::String, args...)\n\nCall gmtmath with all commands in a single string 'cmd'. This is not useful in itself as compared to call gmt(\"gmtmath ....\") but it's very useful in 'movie' because it can generate shell scripts from the julai command\n\nFull option list at grdmath\n\n\n\n\n\n","category":"method"},{"location":"#GMT.gmtread-Tuple{String}","page":"Index","title":"GMT.gmtread","text":"gmtread(fname::String; kwargs...)\n\nRead GMT object from file. The object is one of \"grid\" or \"grd\", \"image\" or \"img\", \"data\" or \"table\", \"cmap\" or \"cpt\" and \"ps\" (for postscript), and OGR formats (shp, kml, json). Use a type specificatin to force a certain reading path (e.g. grd=true to read grids) or take the chance of letting the data type be guessed via the file extension. Known extensions are:\n\nGrids:      .grd, .nc\nImages:     .jpg, .png, .tif, .tiff, .bmp, .webp\nDatasets:   .dat, .txt, .csv\nDatasets:   .shp, .kml, .json, .geojson, .gmt, .gpkg\nCPT:        .cpt\nPostScript: .ps, .eps\n\nParameters\n\nSpecify data type (with type=true, e.g. img=true).  Choose among:\n\ngrd | grid :: [Type => Any]\nLoad a grid.\nimg | image :: [Type => Any]\nLoad an image.\ncpt | cmap :: [Type => Any]\nLoad a GMT color palette.\ndata | dataset | table :: [Type => Any]\nLoad a dataset (a table of numbers).\nogr :: [Type => Any]\nLoad a dataset via GDAL OGR (a table of numbers). Many things can happen here.\nps :: [Type => Any]\nLoad a PostScript file\ngdal :: [Type => Any]\nForce reading the file via GDAL. Should only be used to read grids.\nvarname :: [Type => Str]\nWhen netCDF files have more than one 2D (or higher) variables use varname to pick the wished variable.   e.g. varname=:slp to read the variable named 'slp'. This option defaults data type to 'grid'\nlayer | band :: [Type => Str, Number, Array]\n\nWhen files are multiband or nc files with 3D or 4D arrays, we access them via these keywords. layer=4 reads the fourth layer (or band) of the file. But the file can be a grid or an image. If it is a grid layer can be a scalar (to read 3D arrays) or an array of two elements (to read a 4D array).\n\nIf file is an image layer can be a 1 or a 1x3 array (to read a RGB image). Not that in this later case bands do not need to be contiguous. A band=[0,5,2]` composes an RGB out of those bands. See more at http://docs.generic-mapping-tools.org/latest//GMT_Docs.html#modifiers-for-coards-compliant-netcdf-files)\n\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\n\nExample: to read a nc called 'lixo.grd'\n\nG = gmtread(\"lixo.grd\");\n\nto read a jpg image with the bands reversed (this example is currently broken in GMT5. Needs GMT6dev)\n\nI = gmtread(\"image.jpg\", band=[2,1,0]);\n\n\n\n\n\n","category":"method"},{"location":"#GMT.gmtselect","page":"Index","title":"GMT.gmtselect","text":"gmtselect(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nSelect data table subsets based on multiple spatial criteria.\n\nFull option list at gmtselect\n\nParameters\n\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nA | area :: [Type => Str | Number]\nFeatures with an area smaller than minarea in km^2 or of hierarchical level that is   lower than minlevel or higher than max_level will not be plotted.   (http://docs.generic-mapping-tools.org/latest/gmtselect.html#a)\nC | dist2pt | dist :: [Type => Str | NamedTuple]   Arg = pointfile+ddist[unit] | (pts=Array, dist=xx)\nPass all records whose location is within dist of any of the points in the ASCII file pointfile.   If dist is zero then the 3rd column of pointfile must have each point’s individual radius of influence.   (http://docs.generic-mapping-tools.org/latest/gmtselect.html#c)\nD | res | resolution :: [Type => Str]      Arg = c|l|i|h|f\nIgnored unless N is set. Selects the resolution of the coastline data set to use   ((f)ull, (h)igh, (i)ntermediate, (l)ow, or (c)rude).   (http://docs.generic-mapping-tools.org/latest/gmtselect.html#d)\nE | boundary :: [Type => Str | []]            Arg = [fn]\nSpecify how points exactly on a polygon boundary should be considered.   (http://docs.generic-mapping-tools.org/latest/gmtselect.html#e)\nF | polygon :: [Type => Str | GMTdaset | Mx2 array]     Arg = polygonfile\nPass all records whose location is within one of the closed polygons in the multiple-segment   file polygonfile or a GMTdataset type or a Mx2 array defining the polygon.   (http://docs.generic-mapping-tools.org/latest/gmtselect.html#f)\nG | gridmask :: [Type => Str | GRDgrid]        Arg = gridmask\nPass all locations that are inside the valid data area of the grid gridmask.   Nodes that are outside are either NaN or zero.   (http://docs.generic-mapping-tools.org/latest/gmtselect.html#g)\nI | reverse :: [Type => Str | []]    Arg = [cflrsz]\nReverses the sense of the test for each of the criteria specified.   (http://docs.generic-mapping-tools.org/latest/gmtselect.html#i)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nL | dist2line :: [Type => Str | NamedTuple]    Arg = linefile+ddist[unit][+p] | (pts=Array, dist=xx, ortho=_)\nPass all records whose location is within dist of any of the line segments in the ASCII   multiple-segment file linefile.   (http://docs.generic-mapping-tools.org/latest/gmtselect.html#l)\nN | mask :: [Type => Str | List]     Arg = ocean/land/lake/island/pond or wet/dry\nPass all records whose location is inside specified geographical features.   (http://docs.generic-mapping-tools.org/latest/gmtselect.html#n)\nZ | in_range :: [Type => Str | List]     Arg = min[/max][+a][+ccol][+i]\nPass all records whose 3rd column (z; col = 2) lies within the given range or is NaN.   (http://docs.generic-mapping-tools.org/latest/gmtselect.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtset","page":"Index","title":"GMT.gmtset","text":"gmtset(cmd0::String=\"\", kwargs...)\n\nAdjust individual GMT defaults settings in the current directory’s gmt.conf file.\n\nFull option list at gmtset\n\nParameters\n\nD | units :: [Type => Str | []]\nModify the GMT defaults based on the system settings. Append u for US defaults or s for SI defaults.   (http://docs.generic-mapping-tools.org/latest/gmtinfo.html#d)\nG | defaultsfile :: [Type => Str]\nName of specific gmt.conf file to read and modify.    (http://docs.generic-mapping-tools.org/latest/gmtinfo.html#g)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtsimplify","page":"Index","title":"GMT.gmtsimplify","text":"gmtsimplify(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nLine reduction using the Douglas-Peucker algorithm.\n\nFull option list at gmtsimplify\n\nParameters\n\nT | tol | tolerance :: [Type => Str | Number]    Arg = tolerance[unit]\nSpecifies the maximum mismatch tolerance in the user units. If the data is not Cartesian then append the distance unit.   (http://docs.generic-mapping-tools.org/latest/gmtsimplify.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtspatial","page":"Index","title":"GMT.gmtspatial","text":"gmtspatial(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nGeospatial operations on points, lines and polygons.\n\nFull option list at gmtspatial\n\nParameters\n\nA | nn | nearest_neighbor :: [Type => Str]     Arg = [amin_dist][unit]\nPerform spatial nearest neighbor (NN) analysis: Determine the nearest neighbor of each point   and report the NN distances and the point IDs involved in each pair.   (http://docs.generic-mapping-tools.org/latest/gmtspatial.html#a)\nC | clip :: [Type => Bool]\nClips polygons to the map region, including map boundary to the polygon as needed. The result is a closed polygon.   (http://docs.generic-mapping-tools.org/latest/gmtspatial.html#c)\nD | duplicates :: [Type => Str]   Arg = [+ffile][+aamax][+ddmax][+c|Ccmax][+sfact]\nCheck for duplicates among the input lines or polygons, or, if file is given via +f, check if the   input features already exist among the features in file.   (http://docs.generic-mapping-tools.org/latest/gmtspatial.html#d)\nE | handedness :: [Type => Str]  Arg = +|-\nReset the handedness of all polygons to match the given + (counter-clockwise) or - (clockwise). Implies Q+   (http://docs.generic-mapping-tools.org/latest/gmtspatial.html#e)\nF | force_polygons :: [Type => Str | []]   Arg = [l]\nForce input data to become polygons on output, i.e., close them explicitly if not already closed.   Optionally, append l to force line geometry.   (http://docs.generic-mapping-tools.org/latest/gmtspatial.html#f)\nI | intersections :: [Type => Str | []]   Arg = [e|i]\nDetermine the intersection locations between all pairs of polygons.   (http://docs.generic-mapping-tools.org/latest/gmtspatial.html#i)\nN | in_polyg :: [Type => Str]     Arg = pfile[+a][+pstart][+r][+z]\nDetermine if one (or all, with +a) points of each feature in the input data are inside any of   the polygons given in the pfile.   (http://docs.generic-mapping-tools.org/latest/gmtspatial.html#n)\nQ | area or length :: [Type => Str]      Arg = [[-|+]unit][+cmin[/max]][+h][+l][+p][+s[a|d]]\nMeasure the area of all polygons or length of line segments.   (http://docs.generic-mapping-tools.org/latest/gmtspatial.html#q)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | polygons :: [Type => Str]     Arg = h|i|j|s|u\nSpatial processing of polygons.   (http://docs.generic-mapping-tools.org/latest/gmtspatial.html#s)\nT | truncate :: [Type => Str | []]     Arg = [clippolygon]\nTruncate polygons against the specified polygon given, possibly resulting in open polygons.   (http://docs.generic-mapping-tools.org/latest/gmtspatial.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtsplit","page":"Index","title":"GMT.gmtsplit","text":"gmtsplit(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads a series of (x,y[,z]) records [or optionally (x,y,z,d,h)] and splits this into separate lists of (x,y[,z]) series, such that each series has a nearly constant azimuth through the x,y plane.\n\nFull option list at gmtsplit\n\nParameters\n\nA | azim_tol :: [Type => Str | Array]  \nWrite out only those segments which are within +/- tolerance degrees of azimuth in heading,   measured clockwise from North, [0 - 360].   (http://docs.generic-mapping-tools.org/latest/gmtsplit.html#a)\nC | course_change :: [Type => Number]\nTerminate a segment when a course change exceeding course_change degrees of heading is detected.   (http://docs.generic-mapping-tools.org/latest/gmtsplit.html#c)\nD | min_dist | min_distance :: [Type => Number]\nDo not write a segment out unless it is at least minimum_distance units long.   (http://docs.generic-mapping-tools.org/latest/gmtsplit.html#d)\nF | filter :: [Type => Str | Array]\nFilter the z values and/or the x,y values, assuming these are functions of d coordinate.   xyfilter and zfilter are filter widths in distance units.   (http://docs.generic-mapping-tools.org/latest/gmtsplit.html#f)\nQ | xyzdh :: [Type => Str]\nSpecify your desired output using any combination of xyzdh, in any order.   (http://docs.generic-mapping-tools.org/latest/gmtsplit.html#q)\nS | dh | dist_head :: [Type => Bool]\nBoth d and h are supplied. In this case, input contains x,y,z,d,h. [Default expects (x,y,z) input,   and d,h are computed from delta x, delta y.   (http://docs.generic-mapping-tools.org/latest/gmtsplit.html#s)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ndo | nodata_out :: [Type => Str or Number]     Arg = nodata\nExamine all output columns and if any item equals NAN substitute it with   the chosen missing data value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#do-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtvector","page":"Index","title":"GMT.gmtvector","text":"gmtvector(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nTime domain filtering of 1-D data tables.\n\nFull option list at gmtvector\n\nParameters\n\nA | single_vec :: [Type => Str]   Arg = m[conf]|vector\nSpecify a single, primary vector instead of reading tables.   (http://docs.generic-mapping-tools.org/latest/gmtvector.html#a)\nC | cartesian :: [Type => Str | []]        Arg = [i|o]\nSelect Cartesian coordinates on input and output.   (http://docs.generic-mapping-tools.org/latest/gmtvector.html#c)\nE | geod2geoc :: [Type => Bool]\nConvert input geographic coordinates from geodetic to geocentric and output geographic   coordinates from geocentric to geodetic.   (http://docs.generic-mapping-tools.org/latest/gmtvector.html#e)\nN | normalize :: [Type => Bool]\nNormalize the resultant vectors prior to reporting the output.   (http://docs.generic-mapping-tools.org/latest/gmtvector.html#n)\nS | secondary_vec :: [Type => Str | List]    Arg = [vector]\nSpecify a single, secondary vector in the same format as the first vector.   (http://docs.generic-mapping-tools.org/latest/gmtvector.html#s)\nT | transform :: [Type => Str | List]     Arg = a|d|D|paz|s|r[arg|R|x]\nSpecify the vector transformation of interest.   (http://docs.generic-mapping-tools.org/latest/gmtvector.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.gmtwhich-Tuple{String}","page":"Index","title":"GMT.gmtwhich","text":"gmtwhich(cmd0::String; kwargs...)\n\nFind full path to specified files\n\nFull option list at gmtwhich\n\nParameters\n\nA | with_permissions :: [Type => Bool]\n\nOnly consider files that the user has permission to read [Default consider all files found].\n(http://docs.generic-mapping-tools.org/latest/gmtwhich.html#a)\n\nC | confirm :: [Type => Bool]\n\nInstead of reporting the paths, print the confirmation Y if the file is found and N if it is not.\n(http://docs.generic-mapping-tools.org/latest/gmtwhich.html#c)\n\nD | report_dir :: [Type => Bool]\n\nInstead of reporting the paths, print the directories that contains the files.\n(http://docs.generic-mapping-tools.org/latest/gmtwhich.html#d)\n\nG | download :: [Type => Str | []]      Arg = clu\n\nIf a file argument is a downloadable file (either a full URL, a @file for downloading from\nthe GMT Site Cache, or @earth_relief_*.grd) we will try to download the file if it is not\nfound in your local data or cache dirs.\n(http://docs.generic-mapping-tools.org/latest/gmtwhich.html#g)\n\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\n\n\n\n\n\n","category":"method"},{"location":"#GMT.gmtwrite-Tuple{String, Any}","page":"Index","title":"GMT.gmtwrite","text":"gmtwrite(fname::String, data; kwargs...)\n\nWrite a GMT object to file. The object is one of \"grid\" or \"grd\", \"image\" or \"img\", \"dataset\" or \"table\", \"cmap\" or \"cpt\" and \"ps\" (for postscript).\n\nWhen saving grids we have a large panoply of formats at our disposal.\n\nParameters\n\nid ::  [Type => Str] \nUse an id code when not not saving a grid into a standard COARDS-compliant netCDF grid. This id   is made up of two characters like ef to save in ESRI Arc/Info ASCII Grid Interchange format (ASCII float).   See the full list of ids at http://docs.generic-mapping-tools.org/latest/grdconvert.html#format-identifier.\n(http://docs.generic-mapping-tools.org/latest/grdconvert.html#g)\nscale | offset :: [Type => Number]\nYou may optionally ask to scale the data and then offset them with the specified amounts.   These modifiers are particularly practical when storing the data as integers, by first removing an offset   and then scaling down the values.\nnan | novalue | invalid | missing :: [Type => Number]\nLets you supply a value that represents an invalid grid entry, i.e., ‘Not-a-Number’.\ngdal :: [Type => Bool]\nForce the use of the GDAL library to write the grid (to be used only with grids).   (http://docs.generic-mapping-tools.org/latest/GMT_Docs.html#grid-file-format-specifications)\ndriver :: [Type => Str]\nWhen saving in other than the netCDF format we must tell the GDAL library what is wished format.   That is done by specifying the driver name used by GDAL itself (e.g., netCDF, GTiFF, etc...).\ndatatype :: [Type => Str] \t\tArg = u8u16i16u32i32float32\nWhen saving with GDAL we can specify the data type from u8|u16|i16|u32|i32|float32 where ‘i’ and ‘u’ denote   signed and unsigned integers respectively.\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\n\nExample: write the GMTgrid 'G' object into a nc file called 'lixo.grd'\n\ngmtwrite(\"lixo.grd\", G);\n\n\n\n\n\n","category":"method"},{"location":"#GMT.grd2cpt","page":"Index","title":"GMT.grd2cpt","text":"grd2cpt(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nMake linear or histogram-equalized color palette table from grid\n\nFull option list at grd2cpt\n\nParameters\n\nA | alpha | transparency :: [Type => Str]\nSets a constant level of transparency (0-100) for all color slices.   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#a)\nC | color | cmap :: [Type => Str]\t\tArg = cpt master+izinc color1color2*color3*\nGive a CPT name or specify -Ccolor1,color2[,color3,...] to build a linear continuous CPT from those   colors automatically.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#c)\nD | bg | background :: [Type => Str | []]\t\t\tArg = [i|o]\nSelect the back- and foreground colors to match the colors for lowest and highest   z-values in the output CPT.    (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#d)\nE | nlevels :: [Type => Int | []]\t\tArg = [nlevels]\nCreate a linear color table by using the grid z-range as the new limits in the CPT.   Alternatively, append nlevels and we will resample the color table into nlevels equidistant slices.   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#e)\nF | color_model :: [Type => Str | []]\t\tArg = [R|r|h|c][+c]]\nForce output CPT to written with r/g/b codes, gray-scale values or color name.   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#f)\nG | truncate :: [Type => Str]             Arg = zlo/zhi\nTruncate the incoming CPT so that the lowest and highest z-levels are to zlo and zhi.   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#g)\nI | inverse | reverse :: [Type => Str]\t    Arg = [c][z]\nReverse the sense of color progression in the master CPT.   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#i)\nL | range :: [Type => Str]\t\t\tArg = minlimit/maxlimit\nLimit range of CPT to minlimit/maxlimit, and don’t count data outside this range when estimating CDF(Z).   Default uses min and max of data.\nM | overrule_bg :: [Type => Bool]\nOverrule background, foreground, and NaN colors specified in the master CPT with the values of   the parameters COLORBACKGROUND, COLORFOREGROUND, and COLOR_NAN.   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#m)\nN | no_bg | nobg :: [Type => Bool]\nDo not write out the background, foreground, and NaN-color fields.   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#n)\nQ | log :: [Type => Bool]\nSelects a logarithmic interpolation scheme [Default is linear].   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#q)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | symetric :: [Type => Str]\t\t\tArg = h|l|m|u\nForce the color table to be symmetric about zero (from -R to +R).   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#s)\nT | range :: [Type => Str]\t\t\tArg = (min,max,inc) or = \"n\"\nSet steps in CPT. Calculate entries in CPT from zstart to zstop in steps of (zinc). Default   chooses arbitrary values by a crazy scheme based on equidistant values for a Gaussian CDF.   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | wrap | categorical :: [Type => Bool | Str | []]      Arg = [w]\nDo not interpolate the input color table but pick the output colors starting at the   beginning of the color table, until colors for all intervals are assigned.   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#w)\nZ | continuous :: [Type => Bool]\nCreates a continuous CPT [Default is discontinuous, i.e., constant colors for each interval].   (http://docs.generic-mapping-tools.org/latest/grd2cpt.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grd2kml","page":"Index","title":"GMT.grd2kml","text":"grd2kml(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nReads a 2-D grid file and makes a quadtree of PNG images and KML wrappers for Google Earth using the selected tile size [256x256 pixels].\n\nFull option list at grd2kml\n\nParameters\n\nC | color | cmap :: [Type => Str]\t\tArg = cpt master+izinc color1color2*color3*\nGive a CPT name or specify -Ccolor1,color2[,color3,...] to build a linear continuous CPT from those   colors automatically.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#c)\nE | url :: [Type => Str]\t\tArg = url\nInstead of hosting the files locally, prepend a site URL. The top-level prefix.kml file   will then use this URL to find the other files it references.``   (http://docs.generic-mapping-tools.org/latest/grd2kml.html#e)\nF | filter :: [Type => Str]\nSpecifies the filter to use for the downsampling of the grid for more distant viewing.   Choose among boxcar, cosine arch, gaussian, or median [Gaussian].   (http://docs.generic-mapping-tools.org/latest/grd2kml.html#e)\nH | sub_pixel :: [Type => Int]         Arg = factor\nImprove the quality of rasterization by passing the sub-pixel smoothing factor to psconvert.   (http://docs.generic-mapping-tools.org/latest/grd2kml.html#h)\nI | shade | shading | intensity :: [Type => Str | GMTgrid]\nGives the name of a grid file or GMTgrid with intensities in the (-1,+1) range,   or a grdgradient shading flags.   (http://docs.generic-mapping-tools.org/latest/grd2kml.html#i)\nL | tile_size :: [Type => Number]\t\t\tArg = tilesize\nSets the fixed size of the image building blocks. Must be an integer that is radix 2.   Typical values are 256 or 512 [256].   (http://docs.generic-mapping-tools.org/latest/grd2kml.html#l)\nN | prefix [Type => Str]\t\t            Arg = prefix\nSets a unique name prefixed used for the top-level KML filename and the directory where all   referenced KML files and PNG images will be written [GMT_Quadtree].   (http://docs.generic-mapping-tools.org/latest/grd2kml.html#n)\nQ | nan_t | nan_alpha :: [Type => Bool]\nMake grid nodes with z = NaN transparent, using the color-masking feature in PostScript Level 3.   (http://docs.generic-mapping-tools.org/latest/grd2kml.html#q)\nT | title :: [Type => Str]\t\t        Arg = title\nSets the title of the top-level document (i.e., its description).   (http://docs.generic-mapping-tools.org/latest/grd2kml.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grd2xyz","page":"Index","title":"GMT.grd2xyz","text":"grd2xyz(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nReads one 2-D grid and returns xyz-triplets.\n\nFull option list at grd2xyz\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nC | row_col :: [Type => Bool]\nReplace the x- and y-coordinates on output with the corresponding column and row numbers.   (http://docs.generic-mapping-tools.org/latest/grd2xyz.html#c)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | weight :: [Type => Str]           Arg = [a|weight]\nWrite out x,y,z,w, where w is the supplied weight (or 1 if not supplied) [Default writes x,y,z only].   (http://docs.generic-mapping-tools.org/latest/grd2xyz.html#w)\nZ | flags :: [Type => Str]\nWrite a 1-column table. Output will be organized according to the specified ordering   convention contained in flags.   (http://docs.generic-mapping-tools.org/latest/grd2xyz.html#z)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\ns | skiprows | skip_NaN :: [Type => Str]       Arg = colsar\nSuppress output for records whose z-value equals NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#s-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdblend","page":"Index","title":"GMT.grdblend","text":"grdblend(cmd0::String=\"\", arg1=nothing, arg2=nothing, kwargs...)\n\nReads a listing of grid files and blend parameters, or up to 2 GTMgrid types, and creates a grid by blending the other grids using cosine-taper weights.\n\nFull option list at grdblend\n\nParameters\n\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/grdblend.html#i)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nG | outgrid outfile | save :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdblend(....) form.   (http://docs.generic-mapping-tools.org/latest/grdblend.html#g)\nC | clobber :: [Type => Str | []]      Arg = flou\nClobber mode: Instead of blending, simply pick the value of one of the grids that covers a node.   (http://docs.generic-mapping-tools.org/latest/grdproject.html#c)\nN | nodata :: [Type => Str | Number]\nNo data. Set nodes with no input grid to this value [Default is NaN].   (http://docs.generic-mapping-tools.org/latest/grdblend.html#n)\nQ | headless :: [Type => Bool]\nCreate plain header-less grid file (for use with external tools). Requires that the output   grid file is a native format (i.e., not netCDF). DO NOT USE WITH G.   (http://docs.generic-mapping-tools.org/latest/grdblend.html#q)\nW | no_blend :: [Type => Str | []]\nDo not blend, just output the weights used for each node [Default makes the blend].   Append z to write the weight*z sum instead.   (http://docs.generic-mapping-tools.org/latest/grdblend.html#w)\nZ | scale :: [Type => Number]\nScale output values by scale before writing to file.   (http://docs.generic-mapping-tools.org/latest/grdblend.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nn | interp | interpolation :: [Type => Str]         Arg = bcln+a+bBC+c+tthreshold\nSelect grid interpolation mode by adding b for B-spline smoothing, c for bicubic interpolation,   l for bilinear interpolation, or n for nearest-neighbor value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#n-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdclip","page":"Index","title":"GMT.grdclip","text":"grdclip(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nClip the range of grid values. will set values < low to below and/or values > high to above. You can also specify one or more intervals where all values should be set to between, or replace individual values.\n\nFull option list at grdclip\n\nParameters\n\ncmd0 :: [Type => Str]\nEither the input file name or the full monolitic options string. Do not use this   when the grid (a GMTgrid type) is passed via the arg1 argument.\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdclip(....) form.   (http://docs.generic-mapping-tools.org/latest/grdclip.html#g)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nabove | high :: [Type => Array | Str]\nTwo elements array with high and above or a string with \"high/above\".   It sets all data[i] > high to above.\nbelow | low :: [Type => Array | Str]\nTwo elements array with low and below or a string with \"low/below\".   It sets all data[i] < low to below.\nbetween :: [Type => Array | Str]\nThree elements array with low high and between or a string with \"low/high/between\".   It sets all data[i] >= low and <= high to between.\nold | new :: [Type => Array | Str]\nTwo elements array with old and new or a string with \"old/new\".   It sets all data[i] == old to new.\nS :: [Type => Str]\nCondense all replacement options above in a single string.   (http://docs.generic-mapping-tools.org/latest/grdclip.html#s)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nExamples:\n  G=gmt(\"grdmath\", \"-R0/10/0/10 -I1 X\");\n  G2=grdclip(G, above=[5 6], low=[2 2], between=\"3/4/3.5\")\nor (note the use of -S for second on options because we can't repeat a kwarg name)\n  G2=grdclip(G, S=\"a5/6 -Sb2/2 -Si3/4/3.5\")\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdcontour","page":"Index","title":"GMT.grdcontour","text":"grdcontour(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads a 2-D grid file or a GMTgrid type and produces a contour map by tracing each contour through the grid.\n\nFull option list at grdcontour\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nA | annot :: [Type => Str or Number]       Arg = -+annot_intlabelinfo\nannot_int is annotation interval in data units; it is ignored if contour levels are given in a file.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#a)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | cont | contour | contours | levels :: [Type => Str | Number | GMTcpt]  Arg = +cont_int\nContours to be drawn may be specified in one of three possible ways.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#c)\nD | dump :: [Type => Str]\nDump contours as data line segments; no plotting takes place.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#d)\nF | force :: [Type => Str | []]\nForce dumped contours to be oriented so that higher z-values are to the left (-Fl [Default]) or right.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#f)\nG | labels :: [Type => Str]\nControls the placement of labels along the quoted lines.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#g)\nJz | zscale | zsize :: [Type => String]\nL | range :: [Type => Str]\nLimit range: Do not draw contours for data values below low or above high.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#l)\nN | fill | colorize :: [Type => Bool]\nFill the area between contours using the discrete color table given by cpt.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nQ | cut :: [Type => Str | Number]\nDo not draw contours with less than cut number of points.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#q)\nS | smooth :: [Type => Number]\nUsed to resample the contour lines at roughly every (gridbox_size/smoothfactor) interval.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#s)\nT | ticks :: [Type => Str]\nDraw tick marks pointing in the downward direction every gap along the innermost closed contours.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#t)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | pen :: [Type => Str | Number]\nSets the attributes for the particular line.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#w)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nZ | scale :: [Type => Str]\nUse to subtract shift from the data and multiply the results by factor before contouring starts.   (http://docs.generic-mapping-tools.org/latest/grdcontour.html#z)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\ndo | nodata_out :: [Type => Str or Number]     Arg = nodata\nExamine all output columns and if any item equals NAN substitute it with   the chosen missing data value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#do-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdcut","page":"Index","title":"GMT.grdcut","text":"grdcut(cmd0::String=\"\", arg1=[], kwargs...)\n\nProduce a new outgrid file which is a subregion of ingrid. The subregion is specified with limits (the -R); the specified range must not exceed the range of ingrid (but see extend).\n\nFull option list at grdcut\n\nParameters\n\nF | clip | cutline :: [Type => Str | GMTdaset | Mx2 array | NamedTuple]\tArg = array|fname[+c] | (polygon=Array|Str, crop2cutline=Bool, invert=Bool)\nSpecify a closed polygon (either a file or a dataset). All grid nodes outside the   polygon will be set to NaN (>= GMT6.2).   (http://docs.generic-mapping-tools.org/latest/grdcut.html#f)\nG | outgrid | outfile | save :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdcut(....) form.   (http://docs.generic-mapping-tools.org/latest/grdcut.html#g)\nimg | usegdal :: [Type => Any]\nForce the cut operation to be done by GDAL. Works for images where GMT fails or even crash.\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nN | extend :: [Type => Str or []]\nAllow grid to be extended if new region exceeds existing boundaries. Append nodata value   to initialize nodes outside current region [Default is NaN].   (http://docs.generic-mapping-tools.org/latest/grdcut.html#n)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | circ_subregion :: [Type => Str]    Arg = nlonlatradiusunit\nSpecify an origin and radius; append a distance unit and we determine the corresponding   rectangular region so that all grid nodes on or inside the circle are contained in the subset.   (http://docs.generic-mapping-tools.org/latest/grdcut.html#s)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nZ | z_subregion :: [Type => Str]       Arg = nN rminmax\nDetermine a new rectangular region so that all nodes outside this region are also outside   the given z-range.   (http://docs.generic-mapping-tools.org/latest/grdcut.html#z)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdedit","page":"Index","title":"GMT.grdedit","text":"grdedit(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nReads the header information in a binary 2-D grid file and replaces the information with values provided on the command line.\n\nIf single input is a G GMTgrid object, it will update the z_min|max values of the G.range member\n\nFull option list at grdedit\n\nParameters\n\nA | adjust :: [Type => Bool]\nIf necessary, adjust the file’s xinc, yinc to be compatible with its domain.   (http://docs.generic-mapping-tools.org/latest/grdedit.html#a)\nC | adjust :: [Type => Bool]\nClear the command history from the grid header.   (http://docs.generic-mapping-tools.org/latest/grdedit.html#c)\nD | header :: [Type => Str]    Arg = +xxname+yyname+zzname+sscale+ooffset+ninvalid+ttitle+rremark\nChange these header parameters.   (http://docs.generic-mapping-tools.org/latest/grdedit.html#d)\nE | header :: [Type => Str]    Arg = ahlrtv\nTransform the grid in one of six ways and (for l|r|t) interchange the x and y information   (http://docs.generic-mapping-tools.org/latest/grdedit.html#e)\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdedit(....) form.   (http://docs.generic-mapping-tools.org/latest/grdedit.html#g)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nN | replace :: [Type => Str | Mx3 array]      Arg = replace=fname  replace=Array\nRead the ASCII (or binary) file table and replace the corresponding nodal values in the   grid with these x,y,z values. Alternatively, provide a Mx3 matrix with values to be changed.    (http://docs.generic-mapping-tools.org/latest/grdedit.html#n)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | wrap :: [Type => Bool]\nFor global, geographical grids only. Grid values will be shifted longitudinally according to   the new borders given in limits (R option).   (http://docs.generic-mapping-tools.org/latest/grdedit.html#s)\nT | toggle :: [Type => Bool]\nMake necessary changes in the header to convert a gridline-registered grid to a pixel-registered   grid, or vice-versa.   (http://docs.generic-mapping-tools.org/latest/grdedit.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdfft","page":"Index","title":"GMT.grdfft","text":"grdfft(cmd0::String=\"\", arg1=nothing, [arg2=nothing,] kwargs...)\n\nTake the 2-D forward Fast Fourier Transform and perform one or more mathematical operations in the frequency domain before transforming back to the space domain.\n\nFull option list at grdfft\n\nParameters\n\nA | azim :: [Type => Number]    Arg = azim\nTake the directional derivative in the azimuth direction measured in degrees CW from north.   (http://docs.generic-mapping-tools.org/latest/grdfft.html#a)\nC | upward :: [Type => Number]    Arg = zlevel\nUpward (for zlevel > 0) or downward (for zlevel < 0) continue the field zlevel meters.   (http://docs.generic-mapping-tools.org/latest/grdfft.html#c)\nD | dfdz :: [Type => Str or Number]\t\tArg = scaleg\nDifferentiate the field, i.e., take d(field)/dz. This is equivalent to multiplying by kr in   the frequency domain (kr is radial wave number).   (http://docs.generic-mapping-tools.org/latest/grdfft.html#d)\nE | radial_power :: [Type => Str]         Arg = rxy+wk+n\nEstimate power spectrum in the radial direction [r]. Place x or y immediately after E to   compute the spectrum in the x or y direction instead.   (http://docs.generic-mapping-tools.org/latest/grdfft.html#e)\nF | filter :: [Type => Str or List–        Arg = rxyparams\nFilter the data. Place x or y immediately after -F to filter x or y direction only; default is   isotropic [r]. Choose between a cosine-tapered band-pass, a Gaussian band-pass filter, or a   Butterworth band-pass filter.   (http://docs.generic-mapping-tools.org/latest/grdfft.html#f)\nG | outgrid | table :: [Type => Str]\nOutput grid file name (or table if radial_power is used). Note that this is optional and to   be used only when saving the result directly on disk. Otherwise, just use the G = grdfft(....) form.   (http://docs.generic-mapping-tools.org/latest/grdfft.html#g)\nI | integrate :: [Type => Str or Number]\t\tArg = scaleg\nIntegrate the field, i.e., compute integraloverz (field * dz). This is equivalent to divide   by kr in the frequency domain (kr is radial wave number).   (http://docs.generic-mapping-tools.org/latest/grdfft.html#i)\nN | inquire :: [Type => Str]         Arg = afmrsnxny+a+dhl+enm+twidth+v+wsuffix+zp\nChoose or inquire about suitable grid dimensions for FFT and set optional parameters. Control the FFT dimension:   (http://docs.generic-mapping-tools.org/latest/grdfft.html#n)\nS | scale :: [Type => Number]\t\t\tArg = scale\nMultiply each element by scale in the space domain (after the frequency domain operations).   (http://docs.generic-mapping-tools.org/latest/grdfft.html#s)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdfill","page":"Index","title":"GMT.grdfill","text":"grdfill(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nReads a grid that presumably has unfilled holes that the user wants to fill in some fashion. Holes are identified by NaN values but this criteria can be changed.\n\nFull option list at grdfill\n\nParameters\n\nA | algo :: [Type => Str]\t\tArg = modearg\nSpecify the hole-filling algorithm to use. Choose from c for constant fill and append the constant value,   n for nearest neighbor (and optionally append a search radius in pixels).    (http://docs.generic-mapping-tools.org/latest/grdfill.html#a)\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdfill(....) form.   (http://docs.generic-mapping-tools.org/latest/grdfill.html#g)\nL | list :: [Type => Str]\tArg = p\nJust list the rectangular subregions west east south north of each hole. No grid fill takes place and   outgrid is ignored. Optionally, append p to instead write closed polygons for all subregions.\nN | nodata :: [Type => Str]\tArg = nodata\nSets the node value that identifies a point as a member of a hole [Default is NaN].   (http://docs.generic-mapping-tools.org/latest/grdfill.html#n)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdfilter","page":"Index","title":"GMT.grdfilter","text":"grdfilter(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nFilter a grid file in the time domain using one of the selected convolution or non-convolution  isotropic or rectangular filters and compute distances using Cartesian or Spherical geometries.\n\nFull option list at grdfilter\n\nParameters\n\nF | filter :: [Type => Str]\nSets the filter type.    (http://docs.generic-mapping-tools.org/latest/grdfilter.html#f)\nD | distflag | distance :: [Type => Number]\nDistance flag tells how grid (x,y) relates to filter width.   (http://docs.generic-mapping-tools.org/latest/grdfilter.html#d)\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdfilter(....) form.   (http://docs.generic-mapping-tools.org/latest/grdfilter.html#g)\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/grdfilter.html#i)\nN | nans :: [Type => Str]\nDetermine how NaN-values in the input grid affects the filtered output. Values are i|p|r   (http://docs.generic-mapping-tools.org/latest/grdfilter.html#n)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nT | toggle :: [Type => Bool]\nToggle the node registration for the output grid so as to become the opposite of the input grid   (http://docs.generic-mapping-tools.org/latest/grdfilter.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdgradient","page":"Index","title":"GMT.grdgradient","text":"grdgradient(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nCompute the directional derivative in a given direction, or to find the direction [and the magnitude] of the vector gradient of the data.\n\nFull option list at grdgradient\n\nParameters\n\nA | azim :: [Type => Str | Number]    Arg = azimazim2\nAzimuthal direction for a directional derivative.    (http://docs.generic-mapping-tools.org/latest/grdgradient.html#a)\nD | find_dir :: [Type => Str]      Arg = acon\nFind the direction of the positive (up-slope) gradient of the data.   (http://docs.generic-mapping-tools.org/latest/grdgradient.html#d)\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdgradient(....) form.   (http://docs.generic-mapping-tools.org/latest/grdgradient.html#g)\nE | lambert :: [Type => Str]    Arg = mspazimelev+aambient+ddiffuse+pspecular+sshine\nCompute Lambertian radiance appropriate to use with grdimage and grdview.   (http://docs.generic-mapping-tools.org/latest/grdgradient.html#e)\nN | norm | normalize :: [Type => Str]     Arg = etamp+ssigma+ooffset\nNormalization. [Default is no normalization.] The actual gradients g are offset and scaled   to produce normalized gradients.   (http://docs.generic-mapping-tools.org/latest/grdgradient.html#n)\nQ | save_stats :: [Type => Str]\t\tArg = crR\nControls how normalization via N is carried out.   (http://docs.generic-mapping-tools.org/latest/grdgradient.html#q)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | slopegrid :: [Type => Str]\nName of output grid file with scalar magnitudes of gradient vectors. Requires D but makes G optional.   (http://docs.generic-mapping-tools.org/latest/grdgradient.html#s)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdhisteq","page":"Index","title":"GMT.grdhisteq","text":"grdhisteq(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nFind the data values which divide a given grid file into patches of equal area. One common use of grdhisteq is in a kind of histogram equalization of an image.\n\nFull option list at grdhisteq\n\nParameters\n\nD | dump :: [Type => Str or []]\nDump level information to file, or standard output if no file is provided.   (http://docs.generic-mapping-tools.org/latest/grdhisteq.html#d)\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdhisteq(....) form.   (http://docs.generic-mapping-tools.org/latest/grdhisteq.html#g)\nN | gaussian :: [Type => Number or []]\nGaussian output.   (http://docs.generic-mapping-tools.org/latest/grdhisteq.html#n)\nQ | quadratic :: [Type => Bool]\nQuadratic output. Selects quadratic histogram equalization. [Default is linear].   (http://docs.generic-mapping-tools.org/latest/grdhisteq.html#q)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdimage","page":"Index","title":"GMT.grdimage","text":"grdimage(cmd0::String=\"\", arg1=nothing, arg2=nothing, arg3=nothing; kwargs...)\n\nProduces a gray-shaded (or colored) map by plotting rectangles centered on each grid node and assigning them a gray-shade (or color) based on the z-value.\n\nFull option list at grdimage\n\nParameters\n\nA | img_out | image_out :: [Type => Str]\nSave an image in a raster format instead of PostScript.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#a)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | color | cmap :: [Type => Str]\t\tArg = cpt master+izinc color1color2*color3*\nGive a CPT name or specify -Ccolor1,color2[,color3,...] to build a linear continuous CPT from those   colors automatically.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#c)\nD | img_in | image_in :: [Type => Str]\nSpecifies that the grid supplied is an image file to be read via GDAL.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#d)\nE | dpi :: [Type => Int]\nSets the resolution of the projected grid that will be created.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#e)\nG | bit_color :: [Type => Int]\n(http://docs.generic-mapping-tools.org/latest/grdimage.html#g)\nI | shade | shading | intensity :: [Type => Bool | Str | GMTgrid]\nGives the name of a grid file or GMTgrid with intensities in the (-1,+1) range,   or a grdgradient shading flags.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#i)\nM | monochrome :: [Type => Bool]\nForce conversion to monochrome image using the (television) YIQ transformation.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#m)\nN | noclip :: [Type => Bool]\nDo not clip the image at the map boundary.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nQ | alpha_color | nan_alpha :: [Type => Bool | Tuple | Str]\tQ = true  Q = (rgb)\n\nMake grid nodes with z = NaN transparent, or pick a color for transparency in a image.\n\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nn | interp | interpolation :: [Type => Str]         Arg = bcln+a+bBC+c+tthreshold\nSelect grid interpolation mode by adding b for B-spline smoothing, c for bicubic interpolation,   l for bilinear interpolation, or n for nearest-neighbor value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#n-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdinfo","page":"Index","title":"GMT.grdinfo","text":"grdinfo(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads a 2-D grid file and reports metadata and various statistics for the (x,y,z) data in the grid file\n\nFull option list at grdinfo\n\nParameters\n\nC | numeric :: [Type => Str | Number]\nFormats the report using tab-separated fields on a single line.   (http://docs.generic-mapping-tools.org/latest/grdinfo.html#c)\nD | tiles :: [Type => Number | Str]  \nDivide a single grid’s domain (or the -R domain, if no grid given) into tiles of size   dx times dy (set via -I).   (http://docs.generic-mapping-tools.org/latest/grdinfo.html#d)\nF :: [Type => Bool]\nReport grid domain and x/y-increments in world mapping format.   (http://docs.generic-mapping-tools.org/latest/grdinfo.html#f)\nG | force_download :: [Type => Bool]\nForce (possible) download and mosaicing of all tiles of tiled global remote grids in order   to report the requested information.   (http://docs.generic-mapping-tools.org/latest/grdinfo.html#g)\nI | nearest :: [Type => Number | Str]     Arg = dxdybir\nReport the min/max of the region to the nearest multiple of dx and dy, and output   this in the form -Rw/e/s/n   (http://docs.generic-mapping-tools.org/latest/grdinfo.html#i)\nL | force_scan :: [Type => Number | Str]\nReport stats after actually scanning the data.   (http://docs.generic-mapping-tools.org/latest/grdinfo.html#l)\nM | minmax_pos :: [Type => Bool]\nFind and report the location of min/max z-values.   (http://docs.generic-mapping-tools.org/latest/grdinfo.html#m)\nQ | cube :: [Type => Bool]\nInput files must be data 3-D netCDF data cube. Not compatible with D, E, F, and Ib (GMT6.2)   (http://docs.generic-mapping-tools.org/latest/grdinfo.html#q)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nT | zmin_max :: [Type => Number | Str]   Determine min and max z-value.   (http://docs.generic-mapping-tools.org/latest/grdinfo.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdinterpolate","page":"Index","title":"GMT.grdinterpolate","text":"grdinterpolate(cmd0::String=\"\", arg1=nothing, arg2=nothing; kwargs...)\n\nInterpolate a 3-D cube, 2-D grids or 1-D series from a 3-D data cube or stack of 2-D grids.\n\nFull option list at grdinterpolate\n\nParameters\n\nD | meta | metadata :: [Type => Str | NamedTuple]  \nGive one or more combinations for values xname, yname, zname (3rd dimension in cube), and dname   (data value name) and give the names of those variables and in square bracket their units   (http://docs.generic-mapping-tools.org/latest/grdinterpolate.html#d)\nE | crossection :: [Type => Str | GMTdtaset | NamedTuple]\nSpecify a crossectinonal profile via a file or from specified line coordinates and modifiers. If a file,   it must be contain a single segment with either lon lat or lon lat dist records. These must be equidistant.    (http://docs.generic-mapping-tools.org/latest/grdinterpolate.html#e)\nF | interp_type :: [Type => Str]   Arg = lacn+1+2\nChoose from l (Linear), a (Akima spline), c (natural cubic spline), and n (no interpolation:   nearest point) [Default is Akima].\nG | outfile | outgrid :: [Type => Str]\nOutput file name. If range only selects a single layer then the data cube collapses to a regular 2-D grid file   (http://docs.generic-mapping-tools.org/latest/grdinterpolate.html#g)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | stack :: [Type => Str | Tuple | Dataset]\tArg = x/y|pointfile[+hheader]\nRather than compute gridded output, create tile/spatial series through the stacked grids at the given point (x/y)   or the list of points in pointfile.    (http://docs.generic-mapping-tools.org/latest/grdinterpolate.html#s)\nT | range :: [Type => Str]\t\t\tArg = [min/max/]inc[+i|n] |-Tfile|list\nMake evenly spaced time-steps from min to max by inc [Default uses input times].   (http://docs.generic-mapping-tools.org/latest/grdinterpolate.html#t)\nZ | levels :: [Type => range]\t\t\tArg = [levels]\nThe levels may be specified the same way as in range. If not given then we default to an integer   levels array starting at 0.   (http://docs.generic-mapping-tools.org/latest/grdinterpolate.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nn | interp | interpolation :: [Type => Str]         Arg = bcln+a+bBC+c+tthreshold\nSelect grid interpolation mode by adding b for B-spline smoothing, c for bicubic interpolation,   l for bilinear interpolation, or n for nearest-neighbor value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#n-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nq | inrow | inrows :: [Type => Str]       Arg = iorows+ccol+afs\nSelect specific data rows to be read (-qi [Default]) or written (-qo) [all].    (http://docs.generic-mapping-tools.org/latest/gmt.html#q-full)\ns | skiprows | skip_NaN :: [Type => Str]       Arg = colsar\nSuppress output for records whose z-value equals NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#s-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\nWhen using two numeric inputs and no G option, the order of the x,y and grid is not important. That is, both of this will work: D = grdinterpolate([0 0], G);  or  D = grdinterpolate(G, [0 0]); \n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdlandmask","page":"Index","title":"GMT.grdlandmask","text":"grdlandmask(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nReads the selected shoreline database and uses that information to decide which nodes in the specified grid are over land or over water.\n\nFull option list at grdlandmask\n\nParameters\n\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/grdlandmask.html#i)\nA | area :: [Type => Str | Number]\nFeatures with an area smaller than minarea in km^2 or of   hierarchical level that is lower than minlevel or higher than   max_level will not be plotted.   (http://docs.generic-mapping-tools.org/latest/grdlandmask.html#a)\nD | res | resolution :: [Type => Str]\nSelects the resolution of the data set to use ((f)ull, (h)igh, (i)ntermediate, (l)ow, and (c)rude).   (http://docs.generic-mapping-tools.org/latest/grdlandmask.html#d)\nE | bordervalues :: [Type => Str | List]    Arg = cborderlborderiborderpborder or bordervalue\nNodes that fall exactly on a polygon boundary should be considered to be outside the polygon   [Default considers them to be inside].   (http://docs.generic-mapping-tools.org/latest/grdlandmask.html#e)\nG | outfile | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdlandmask(....) form.   (http://docs.generic-mapping-tools.org/latest/grdlandmask.html#g)\nN | mask_geog :: [Type => Str | List]    Arg = wetdry or oceanlandlakeislandpond\nSets the values that will be assigned to nodes. Values can be any number, including the textstring NaN   (http://docs.generic-mapping-tools.org/latest/grdlandmask.html#n)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nx | cores | n_threads :: [Type => Str or Number]  Arg = -n\nLimit the number of cores to be used in any OpenMP-enabled multi-threaded algorithms.   (http://docs.generic-mapping-tools.org/latest/gmt.html#x-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdmask","page":"Index","title":"GMT.grdmask","text":"grdmask(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nIt reads one or more pathfiles that each define a closed polygon.\nThe pathfiles simply represent data point locations and the mask is set to the inside or outside value depending on whether a node is within a maximum distance from the nearest data point. \n\nFull option list at grdmask\n\nParameters\n\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/grdmask.html#i)\nA | steps | straight_lines :: [Type => Str | Number]\t\tArg = mpxy\nIf the input data are geographic then the sides in the polygons will be approximated by great circle arcs.   When using this option sides will be regarded as straight lines.   (http://docs.generic-mapping-tools.org/latest/grdmask.html#a)\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdmask(....) form.   (http://docs.generic-mapping-tools.org/latest/grdmask.html#g)\nN | outedgein :: [Type => Str | List]    Arg = zZpPvalues\nSets the out/edge/in that will be assigned to nodes that are outside the polygons, on the edge, or inside.   Values can be any number, including the textstring NaN [Default is 0/0/1].   (http://docs.generic-mapping-tools.org/latest/grdmask.html#n)\nS | search_radius :: [Type => Str | List]    Arg = search_radiusunit xlimylim\nSet nodes to inside, on edge, or outside depending on their distance to the nearest data point.\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nj | spherical_dist | spherical :: [Type => Str]     Arg = efg\nDetermine how spherical distances are calculated in modules that support this.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nn | interp | interpolation :: [Type => Str]         Arg = bcln+a+bBC+c+tthreshold\nSelect grid interpolation mode by adding b for B-spline smoothing, c for bicubic interpolation,   l for bilinear interpolation, or n for nearest-neighbor value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#n-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nx | cores | n_threads :: [Type => Str or Number]  Arg = -n\nLimit the number of cores to be used in any OpenMP-enabled multi-threaded algorithms.   (http://docs.generic-mapping-tools.org/latest/gmt.html#x-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdmath-Tuple{String, Vararg{Any, N} where N}","page":"Index","title":"GMT.grdmath","text":"grdmath(cmd::String, args...)\n\nCall grdmath with all commands in a single string 'cmd'. This is not useful in itself as compared to call gmt(\"grdmath ....\") but it's very useful in 'movie' because it can generate shell scripts from the julai command\n\nFull option list at grdmath\n\n\n\n\n\n","category":"method"},{"location":"#GMT.grdpaste","page":"Index","title":"GMT.grdpaste","text":"grdpaste(cmd0::String=\"\", arg1=nothing, arg2=nothing, kwargs...)\n\nCombine grids grid1 and grid2 into grid3 by pasting them together along their common edge. Both grids must have the same dx, dy and have one edge in common.\n\nFull option list at grdpaste\n\nParameters\n\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdpaste(....) form.   (http://docs.generic-mapping-tools.org/latest/grdpaste.html#g)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdproject","page":"Index","title":"GMT.grdproject","text":"grdproject(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nProject a geographical gridded data set onto a rectangular grid or do the inverse projection.\n\nFull option list at grdproject\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nC | center :: [Type => Str | []]      Arg = dxdy\nLet projected coordinates be relative to projection center [Default is relative to lower left corner].   (http://docs.generic-mapping-tools.org/latest/grdproject.html#c)\nD | inc :: [Type => Str | number]     Arg = xincunit+enyincunit+en\nSet the grid spacing for the new grid. Append m for arc minute, s for arc second.   (http://docs.generic-mapping-tools.org/latest/grdproject.html#d)\nE | dpi :: [Type => Number]\nSet the resolution for the new grid in dots per inch.   (http://docs.generic-mapping-tools.org/latest/grdproject.html#e)\nF | one2one :: [Type => Str]           Arg = cipefkMnu\nForce 1:1 scaling, i.e., output (or input, see -I) data are in actual projected meters [e].   (http://docs.generic-mapping-tools.org/latest/grdproject.html#f)\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdproject(....) form.   (http://docs.generic-mapping-tools.org/latest/grdproject.html#g)\nI | inverse :: [Type => Bool]\nDo the Inverse transformation, from rectangular to geographical.   (http://docs.generic-mapping-tools.org/latest/grdproject.html#i)\nM | projected_unit :: [Type => Str]    Arg = cip\nAppend c, i, or p to indicate that cm, inch, or point should be the projected measure unit.   (http://docs.generic-mapping-tools.org/latest/grdproject.html#m)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nn | interp | interpolation :: [Type => Str]         Arg = bcln+a+bBC+c+tthreshold\nSelect grid interpolation mode by adding b for B-spline smoothing, c for bicubic interpolation,   l for bilinear interpolation, or n for nearest-neighbor value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#n-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdsample","page":"Index","title":"GMT.grdsample","text":"grdsample(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nReads a grid file and interpolates it to create a new grid file with either: a different registration; or a new grid-spacing or number of nodes, and perhaps also a new sub-region\n\nFull option list at grdsample\n\nParameters\n\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdsample(....) form.   (http://docs.generic-mapping-tools.org/latest/grdsample.html#g)\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/grdsample.html#i)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nT | toggle :: [Type => Bool]\nToggle the node registration for the output grid so as to become the opposite of the input grid   (http://docs.generic-mapping-tools.org/latest/grdsample.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nn | interp | interpolation :: [Type => Str]         Arg = bcln+a+bBC+c+tthreshold\nSelect grid interpolation mode by adding b for B-spline smoothing, c for bicubic interpolation,   l for bilinear interpolation, or n for nearest-neighbor value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#n-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nx | cores | n_threads :: [Type => Str or Number]  Arg = -n\nLimit the number of cores to be used in any OpenMP-enabled multi-threaded algorithms.   (http://docs.generic-mapping-tools.org/latest/gmt.html#x-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdtrack","page":"Index","title":"GMT.grdtrack","text":"grdtrack(cmd0::String=\"\", arg1=nothing, arg2=nothing; kwargs...)\n\nInterpolates the grid(s) at the positions in the table and returns the table with the interpolated values added as (one or more) new columns.\n\nFull option list at grdtrack\n\nParameters\n\nA | interp_path :: [Type => Str]\t\tArg = f|p|m|r|R[+l]\nFor track resampling (if crossprofile or profile are set) we can select how this is to be performed.    (http://docs.generic-mapping-tools.org/latest/grdtrack.html#a)\nC | crossprofile :: [Type => Str]\t\tArg = length/ds[/spacing][+a|+v][l|r]\nUse input line segments to create an equidistant and (optionally) equally-spaced set of crossing   profiles along which we sample the grid(s)   (http://docs.generic-mapping-tools.org/latest/grdtrack.html#c)\nD | dfile :: [Type => Str]  \nIn concert with crossprofile we can save the (possibly resampled) original lines to the file dfile   (http://docs.generic-mapping-tools.org/latest/grdtrack.html#d)\nE | profile :: [Type => Str]\nInstead of reading input track coordinates, specify profiles via coordinates and modifiers.   (http://docs.generic-mapping-tools.org/latest/grdtrack.html#e)\nF | critical :: [Type => Str]\nFind critical points along each cross-profile as a function of along-track distance. Requires   crossprofile and a single input grid.   (http://docs.generic-mapping-tools.org/latest/grdtrack.html#e)\nG | grid :: [Type => Str | GMTgrid | Tuple(GMTgrid's)]\n(http://docs.generic-mapping-tools.org/latest/grdtrack.html#g)\nN | no_skip :: [Type => Bool]\n(http://docs.generic-mapping-tools.org/latest/grdtrack.html#n)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | stack :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/grdtrack.html#s)\nT | radius :: [Type => Number, Str | []]\n(http://docs.generic-mapping-tools.org/latest/grdtrack.html#t)\nZ | z_only :: [Type => Bool]\n(http://docs.generic-mapping-tools.org/latest/grdtrack.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nn | interp | interpolation :: [Type => Str]         Arg = bcln+a+bBC+c+tthreshold\nSelect grid interpolation mode by adding b for B-spline smoothing, c for bicubic interpolation,   l for bilinear interpolation, or n for nearest-neighbor value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#n-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\ns | skiprows | skip_NaN :: [Type => Str]       Arg = colsar\nSuppress output for records whose z-value equals NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#s-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\nWhen using two numeric inputs and no G option, the order of the x,y and grid is not important. That is, both of this will work: D = grdtrack([0 0], G);  or  D = grdtrack(G, [0 0]); \n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdtrend","page":"Index","title":"GMT.grdtrend","text":"grdtrend(cmd0::String=\"\", arg1=nothing, arg2=nothing; kwargs...)\n\nreads a 2-D grid file and fits a low-order polynomial trend to these data by [optionally weighted] least-squares.\n\nFull option list at grdtrend\n\nParameters\n\nN | model :: [Type => Str | Number]\nSets the number of model parameters to fit.   (http://docs.generic-mapping-tools.org/latest/grdtrend.html#n)\nD | diff :: [Type => Str | []]\nCompute the difference (input data - trend). Optionaly provide a file name to save result on disk.   (http://docs.generic-mapping-tools.org/latest/grdtrend.html#d)\nT | trend :: [Type => Str | []]\nCompute the trend surface. Optionaly provide a file name to save result on disk.   (http://docs.generic-mapping-tools.org/latest/grdtrend.html#t)\nW | weights :: [Type => Str]\nIf weight.nc exists, it will be read and used to solve a weighted least-squares problem.   (http://docs.generic-mapping-tools.org/latest/grdtrend.html#w)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdvector","page":"Index","title":"GMT.grdvector","text":"grdvector(cmd0::String=\"\", arg1=nothing, arg2=nothing, kwargs...)\n\nTakes two 2-D grid files which represents the x- and y-components of a vector field and produces a vector field plot by drawing vectors with orientation and length according to the information in the files. Alternatively, polar coordinate r, theta grids may be given instead.\n\nFull option list at grdvector\n\nParameters\n\nA | polar :: [Type => Bool]  \nThe grid contain polar (r, theta) components instead of Cartesian (x, y) [Default is Cartesian components].   (http://docs.generic-mapping-tools.org/latest/grdvector.html#a)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nG | fill :: [Type => Str | Number]\nSets color or shade for vector interiors [Default is no fill].   (http://docs.generic-mapping-tools.org/latest/grdvector.html#g)\nI | inc :: [Type => Sytr | Number]\tArg=xdxdy\nOnly plot vectors at nodes every xinc, yinc apart (must be multiples of original grid spacing).   (http://docs.generic-mapping-tools.org/latest/grdvector.html#i)\nN | noclip | no_clip :: [Type => Bool]\nDo NOT clip symbols that fall outside map border    (http://docs.generic-mapping-tools.org/latest/grdvector.html#n)\nQ | vec | vector | arrow :: [Type => Str]\nModify vector parameters. For vector heads, append vector head size [Default is 0, i.e., stick-plot].   (http://docs.generic-mapping-tools.org/latest/grdvector.html#q)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | vec_scale :: [Type => Str | Number]\t\tArg = ilscaleunit\nSets scale for vector plot length in data units per plot distance measurement unit [1].   (http://docs.generic-mapping-tools.org/latest/grdvector.html#s)\nT | sign_scale :: [Type => Bool]\nMeans the azimuths of Cartesian data sets should be adjusted according to the signs of the   scales in the x- and y-directions [Leave alone].   (http://docs.generic-mapping-tools.org/latest/grdvector.html#t)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | pen :: [Type => Str | Number]\nSets the attributes for the particular line.   (http://docs.generic-mapping-tools.org/latest/grdvector.html#w)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nZ | azimuth :: [Type => Bool]\nThe theta grid provided contains azimuths rather than directions (implies -A).   (http://docs.generic-mapping-tools.org/latest/grdvector.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdview","page":"Index","title":"GMT.grdview","text":"grdview(cmd0::String=\"\", arg1=nothing, arg2=nothing, arg3=nothing; kwargs...)\n\nReads a 2-D grid and produces a 3-D perspective plot by drawing a mesh, painting a colored/grayshaded surface made up of polygons, or by scanline conversion of these polygons to a raster image.\n\nFull option list at grdview\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nJz | zscale | zsize :: [Type => String]\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | color | cmap :: [Type => Str]\t\tArg = cpt master+izinc color1color2*color3*\nGive a CPT name or specify -Ccolor1,color2[,color3,...] to build a linear continuous CPT from those   colors automatically.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#c)\nG | drape | drapefile :: [Type => Str | GMTgrid | a Tuple with 3 GMTgrid types]\nDrape the image in drapefile on top of the relief provided by relief_file.   (http://docs.generic-mapping-tools.org/latest/grdview.html#g)\nI | shade | shading | intensity :: [Type => Str | GMTgrid]\t\tArg = GMTgrid  filename\nGives the name of a grid file or GMTgrid with intensities in the (-1,+1) range,   or a grdgradient shading flags.   (http://docs.generic-mapping-tools.org/latest/grdview.html#i)\nN | plane :: [Type => Str | Int]\t\tArg = (level fill)\nDraws a plane at this z-level.   (http://docs.generic-mapping-tools.org/latest/grdview.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nQ | surftype | surf :: [Type => Str | Int] Arg = mesh=Bool surface=Bool image=Bool wterfall=(rowscolsfill)\nSpecify m for mesh plot, s for surface, i for image.   (http://docs.generic-mapping-tools.org/latest/grdview.html#q)\nS | smoothfactor :: [Type => Number]\nUsed to resample the contour lines at roughly every (gridbox_size/smoothfactor) interval..   (http://docs.generic-mapping-tools.org/latest/grdview.html#s)\nT | tiles | no_interp :: [Type => Str | NT]\tArg = (skipskip_nan=Bool outlines=Boolpen)\nPlot image without any interpolation.   (http://docs.generic-mapping-tools.org/latest/grdview.html#t)\nW | pens | pen :: [Type => Str]\tArg = (contour=Boolpen mesh=Boolpen facade=Boolpen)\nDraw contour, mesh or facade. Append pen attributes.   (http://docs.generic-mapping-tools.org/latest/grdview.html#w)\nisgeog :: [Type => Any]\nWhen drapping an image that has projection info over a grid that is in geographics but does not carry any   information about this fact we may need to use this option to help the program finding the common BoundingBox.\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nn | interp | interpolation :: [Type => Str]         Arg = bcln+a+bBC+c+tthreshold\nSelect grid interpolation mode by adding b for B-spline smoothing, c for bicubic interpolation,   l for bilinear interpolation, or n for nearest-neighbor value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#n-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.grdvolume","page":"Index","title":"GMT.grdvolume","text":"grdvolume(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nReads one 2-D grid and returns xyz-triplets.\n\nFull option list at grdvolume\n\nParameters\n\nC | cont | contour :: [Type => Str | List]   Arg = cval or lowhighdelta or rlowhigh or rcval\nFind area, volume and mean height (volume/area) inside the cval contour.   (http://docs.generic-mapping-tools.org/latest/grdvolume.html#c)\nL | base_level :: [Type => Number]          Arg = base\nAlso add in the volume from the level of the contour down to base [Default base is contour].   (http://docs.generic-mapping-tools.org/latest/grdvolume.html#l)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | unit :: [Type => Str]              Arg = efkMnu\nFor geographical grids, append a unit from e|f|k|M|n|u [Default is meter (e)].   (http://docs.generic-mapping-tools.org/latest/grdvolume.html#s)\nT :: [Type => Str]                        Arg = ch\nDetermine the single contour that maximized the average height (= volume/area).   (http://docs.generic-mapping-tools.org/latest/grdvolume.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nZ | scale :: [Type => Str or List]     Arg = factshift\nOptionally subtract shift before scaling data by fact. [Default is no scaling].   (http://docs.generic-mapping-tools.org/latest/grdvolume.html#z)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.greenspline","page":"Index","title":"GMT.greenspline","text":"greenspline(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads randomly-spaced (x,y,z) triples and produces a binary grid file of gridded values z(x,y) by solving:\n\n\t(1 - T) * L (L (z)) + T * L (z) = 0\n\nFull option list at greenspline\n\nParameters\n\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nI | inc :: [Type => Str | Number]\nx_inc [and optionally y_inc] is the grid spacing.   (http://docs.generic-mapping-tools.org/latest/greenspline.html#i)\nA | gradient :: [Type => Str | Array]\t\tArg = gradfile+f12345  (data=Array format=x)\nThe solution will partly be constrained by surface gradients v = v*n, where v is the   gradient magnitude and n its unit vector direction.   (http://docs.generic-mapping-tools.org/latest/greenspline.html#a)\nC | approx | approximate :: [Type => Str | Number]\tArg = nvalue+ffile\nFind an approximate surface fit: Solve the linear system for the spline coefficients by   SVD and eliminate the contribution from all eigenvalues whose ratio to the largest   eigenvalue is less than value.   (http://docs.generic-mapping-tools.org/latest/greenspline.html#c)\nG | grid :: [Type => Str | []]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = greenspline(....) form.   (http://docs.generic-mapping-tools.org/latest/greenspline.html#g)\nD | mode :: [Type => Number]\nSets the distance flag that determines how we calculate distances between data points.   (http://docs.generic-mapping-tools.org/latest/greenspline.html#d)\nE :|misfit :: [Type => Str | []]\t\tArg = misfitfile\nEvaluate the spline exactly at the input data locations and report statistics of   the misfit (mean, standard deviation, and rms).   (http://docs.generic-mapping-tools.org/latest/greenspline.html#e)\nL | leave_trend :: [Type => Bool]\nDo not remove a linear (1-D) or planer (2-D) trend when -D selects mode 0-3.   (http://docs.generic-mapping-tools.org/latest/greenspline.html#l)\nN | nodes :: [Type => Number | Array]\t\t\tArg = nodefile\nASCII file with coordinates of desired output locations x in the first column(s).   (http://docs.generic-mapping-tools.org/latest/greenspline.html#n)\nQ | dir_derivative :: [Type => Str]\t\tArg = azxyz\nRather than evaluate the surface, take the directional derivative in the az azimuth and   return the magnitude of this derivative instead.   (http://docs.generic-mapping-tools.org/latest/greenspline.html#q)\nS | splines :: [Type => Str]\t\t\t\tArg = ctlrpqpars\nSelect one of six different splines. The first two are used for 1-D, 2-D, or 3-D Cartesian splines.   (http://docs.generic-mapping-tools.org/latest/greenspline.html#s)\nT | mask :: [Type => Str]\t\t\t\t\tArg = maskgrid\nFor 2-D interpolation only. Only evaluate the solution at the nodes in the maskgrid that are   not equal to NaN.   (http://docs.generic-mapping-tools.org/latest/greenspline.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | uncertainties :: [Type => Str | []]\tArg = w\n\nData one-sigma uncertainties are provided in the last column. We then compute weights that\nare inversely proportional to the uncertainties squared.\n(http://docs.generic-mapping-tools.org/latest/greenspline.html#w)\n\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nx | cores | n_threads :: [Type => Str or Number]  Arg = -n\nLimit the number of cores to be used in any OpenMP-enabled multi-threaded algorithms.   (http://docs.generic-mapping-tools.org/latest/gmt.html#x-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.histogram","page":"Index","title":"GMT.histogram","text":"histogram(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nExamines the first data column to calculate histogram parameters based on the bin-width provided. Alternatively, show histograms of GMTimage & GMTgrid objects directly. In the GMTimage case, the options 'auto=true' or 'thresholds=(0, 0.1)' will find the histogram bounds of UInt16 images convenient for contrast enhancement (histogram stretch). The values represent the percentage of countings used to estimate the boundings. The option 'zoom=true' will set 'auto=true' and show histogram only on the region of interest.\n\nFull option list at pshistogram\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nA | horizontal :: [Type => Bool]\nPlot the histogram horizontally from x = 0 [Default is vertically from y = 0].   (http://docs.generic-mapping-tools.org/latest/histogram.html#a)\nJz | zscale | zsize :: [Type => String]\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | color | cmap :: [Type => Str | GMTcpt]\nGive a CPT. The mid x-value for each bar is used to look-up the bar color.   (http://docs.generic-mapping-tools.org/latest/histogram.html#c)\nD | annot | annotate | counts :: [Type => Str | Tuple]\nAnnotate each bar with the count it represents.   (http://docs.generic-mapping-tools.org/latest/histogram.html#d)\nE | width :: [Type => Bool]\t\t\tArg = width[+ooffset]\nUse an alternative histogram bar width than the default set via T, and optionally shift all bars by an offset.   (http://docs.generic-mapping-tools.org/latest/histogram.html#e)\nbinmethod | *BinMethod** :: [Type => Str]\t\t\tArg = method\nBinning algorithm: \"scott\", \"fd\", \"sturges\" or \"sqrt\" for floating point data. \"second\", \"minute\", \"hour\",   \"day\", \"week\", \"month\" or \"year\" for DateTime data.\nF | center :: [Type => Bool]\nCenter bin on each value. [Default is left edge].   (http://docs.generic-mapping-tools.org/latest/histogram.html#f)\nG | fill :: [Type => Number | Str]\nSelect filling of bars [if no G, L or C set G=100].   (http://docs.generic-mapping-tools.org/latest/histogram.html#g)\nI | inquire | bins :: [Type => Bool | :O | :o | bins=(all=true,) | bins=(no_zero=true,) ]\nInquire about min/max x and y after binning OR output the binned array.   (http://docs.generic-mapping-tools.org/latest/histogram.html#i)\nL | out_range :: [Type => Str]\t\t\tArg = l|h|b\nHandling of extreme values that fall outside the range set by T.   (http://docs.generic-mapping-tools.org/latest/histogram.html#l)\nN | distribution | normal :: [Type => Str]\nDraw the equivalent normal distribution; append desired pen [0.5p,black].   (http://docs.generic-mapping-tools.org/latest/histogram.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nQ | cumulative :: [Type => Bool | \"r\"]\nDraw a cumulative histogram. Append r to instead compute the reverse cumulative histogram.   (http://docs.generic-mapping-tools.org/latest/histogram.html#q)\nR | region :: [Type => Str]\nSpecifies the ‘region’ of interest in (r,azimuth) space. r0 is 0, r1 is max length in units.   (http://docs.generic-mapping-tools.org/latest/histogram.html#r)\nS | stairs :: [Type => Str | number]\nDraws a stairs-step diagram which does not include the internal bars of the default histogram.   (http://docs.generic-mapping-tools.org/latest/histogram.html#s)\nT | range | bin :: [Type => Str]\t\t\tArg = [min/max/]inc[+n] | file|list]\nDefines the range of the new CPT by giving the lowest and highest z-value and interval.   (http://docs.generic-mapping-tools.org/latest/histogram.html#t)\nW | pen :: [Type => Str | Tuple]\nSet pen attributes for sector outline or rose plot. [Default is no outline].   (http://docs.generic-mapping-tools.org/latest/histogram.html#w)\nZ | kind :: [Type => Number | Str]\nChoose between 6 types of histograms.   (http://docs.generic-mapping-tools.org/latest/histogram.html#z)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.hlines","page":"Index","title":"GMT.hlines","text":"hlines(arg; decorated=(...), kwargs...)\n\nPlots one or a collection of horizontal lines with eventual decorations\n\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nW | pen | line_attrib :: [Type => Str]\nSet pen attributes for the horizontal lines   (http://docs.generic-mapping-tools.org/latest/plot.html#w)\n\nExample:\n\nplot(rand(5,3))\nhlines!([0.2, 0.6], pen=(1, :red), show=true)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.image","page":"Index","title":"GMT.image","text":"image(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nPlace images or EPS files on maps.\n\nFull option list at psimage\n\nParameters\n\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nD | pos | position :: [Type => Str]\nSets reference point on the map for the image using one of four coordinate systems.   (http://docs.generic-mapping-tools.org/latest/image.html#d)\nF | box :: [Type => Str | []]\nWithout further options, draws a rectangular border around the image using MAPFRAMEPEN.   (http://docs.generic-mapping-tools.org/latest/image.html#f)\nI | invert_1bit :: [Type => Str | Number]\nInvert 1-bit image before plotting.   (http://docs.generic-mapping-tools.org/latest/image.html#i)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nJz | zscale | zsize :: [Type => String]\nM | monochrome :: [Type => Bool]\nConvert color image to monochrome grayshades using the (television) YIQ-transformation.   (http://docs.generic-mapping-tools.org/latest/image.html#m)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.image_alpha!-Tuple{GMTimage}","page":"Index","title":"GMT.image_alpha!","text":"I = image_alpha!(img::GMTimage; alpha_ind::Integer, alpha_vec::Vector{Integer}, alpha_band::UInt8)\n\nChange the alpha transparency of the GMTimage object 'img'. If the image is indexed, one can either change just the color index that will be made transparent by uing 'alphaind=n' or provide a vector of transaparency values in the range [0 255]; This vector can be shorter than the orginal number of colors. Use `alphaband` to change, or add, the alpha of true color images (RGB).\n\nExample1: change to the third color in cmap to represent the new transparent color\n    image_alpha!(img, alpha_ind=3)\n\nExample2: change to the first 6 colors in cmap by assigning them random values\n    image_alpha!(img, alpha_vec=round.(Int32,rand(6).*255))\n\n\n\n\n\n","category":"method"},{"location":"#GMT.image_cpt!-Tuple{GMTimage, String}","page":"Index","title":"GMT.image_cpt!","text":"image_cpt!(img::GMTimage, cpt::GMTcpt, clear=false)\n\nor     image_cpt!(img::GMTimage, cpt::String, clear=false)\n\nAdd (or replace) a colormap to a GMTimage object from the colors in the cpt. This should have effect only if IMG is indexed. Use image_cpt!(img, clear=true) to remove a previously existent colormap field in IMG\n\n\n\n\n\n","category":"method"},{"location":"#GMT.imshow","page":"Index","title":"GMT.imshow","text":"imshow(arg1; kw...)\n\nIs a simple front end to the grdimage  grdview programs that accepts GMTgrid, GMTimage, 2D array of floats or strings with file names of grids or images. The normal options of the grdimage and grdview programs also apply here but some clever guessing of suitable necessary parameters is done if they are not provided. Contrary to other image producing modules the \"show' keyword is not necessary to display the image. Here it is set by default. If user wants to use imshow to create layers of a more complex fig he can use show=false for the intermediate layers.\n\nThis module uses some internal logic to decide whether use grdimge, grdview or plot. Namely, when the view option is used grdview is choosed and a default vertical scale is assigned. However, sometimes we want a rotated plot, optionally tilted, but not 3D view. In that case use the option flat=true, which forces the use of grdimage.\n\nExamples\n\n# Plot vertical shaded illuminated view of the Mexican hat\njulia> G = gmt(\"grdmath -R-15/15/-15/15 -I0.3 X Y HYPOT DUP 2 MUL PI MUL 8 DIV COS EXCH NEG 10 DIV EXP MUL =\");\njulia> imshow(G, shade=\"+a45\")\n\n# Same as above but add automatic contours\njulia> imshow(G, shade=\"+a45\", contour=true)\n\n# Plot a random heat map\njulia> imshow(rand(128,128))\n\n# Display a web downloaded jpeg image wrapped into a sinusoidal projection\njulia> imshow(\"http://larryfire.files.wordpress.com/2009/07/untooned_jessicarabbit.jpg\", region=\"d\", frame=\"g\", proj=\"I15\", img_in=\"r\", fmt=:jpg)\n\nSee also: grdimage\n\n\n\n\n\n","category":"function"},{"location":"#GMT.ind2rgb-Tuple{GMTimage}","page":"Index","title":"GMT.ind2rgb","text":"I = ind2rgb(I)\n\nConvert an indexed image I to RGB. It uses the internal colormap to do the conversion.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.intlut-Tuple{Any, Any}","page":"Index","title":"GMT.intlut","text":"intlut(I, lut)\n\nCreates an array containing new values of I based on the lookup table, lut. I can be a GMTimage or an uint matrix. The types of I and lut must be the same and the number of elements of lut is eaqual to intmax of that type. E.g. if eltype(lut) == UInt8 then it must contain 256 elements.\n\nReturns\n\nAn object of the same type as I\n\n\n\n\n\n","category":"method"},{"location":"#GMT.invgeod-Tuple{Vector{var\"#s1662\"} where var\"#s1662\"<:Real, Vector{var\"#s1661\"} where var\"#s1661\"<:Real}","page":"Index","title":"GMT.invgeod","text":"d, az1, az2 = invgeod(lonlat1::Vector{<:Real}, lonlat2::Vector{<:Real}; proj::String=\"\", s_srs::String=\"\", epsg::Integer=0)\n\nSolve the inverse geodesic problem.\n\nArgs:\n\nlonlat1:  - coordinates of point 1 in the given projection\nlonlat2:  - coordinates of point 2 in the given projection\nproj or s_srs:  - the given projection whose ellipsoid we move along. Can be a proj4 string or an WKT\nepsg:     - Alternative way of specifying the projection [Default is WGS84]\n\nReturns\n\ndist - distance between point 1 and point 2 (meters). azi1 - azimuth at point 1 (degrees) ∈ [-180, 180) azi2 - (forward) azimuth at point 2 (degrees) ∈ [-180, 180)\n\nRemarks:\n\nIf either point is at a pole, the azimuth is defined by keeping the longitude fixed, writing lat = 90 +/- eps, and taking the limit as eps -> 0+.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.kml2gmt","page":"Index","title":"GMT.kml2gmt","text":"kml2gmt(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nkml2gmt - Extract GMT table data from Google Earth KML files\n\nFull option list at kml2gmt\n\nParameters\n\nF | select :: [Type => Str]        Arg = slp\nSpecify a particular feature type to output. Choose from points (s), line (l), or polygon (p).   By default we output all geometries.   (http://docs.generic-mapping-tools.org/latest/kml2gmt.html#f)\nZ | altitudes :: [Type => Bool]\nOutput the altitude coordinates as GMT z coordinates [Default will output just longitude and latitude].   (http://docs.generic-mapping-tools.org/latest/kml2gmt.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\ndo | nodata_out :: [Type => Str or Number]     Arg = nodata\nExamine all output columns and if any item equals NAN substitute it with   the chosen missing data value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#do-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.legend","page":"Index","title":"GMT.legend","text":"legend(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nMake legends that can be overlaid on maps. It reads specific legend-related information from input or file file.\n\nFull option list at legend\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | clearance :: [Type => Str]\nSets the clearance between the legend frame and the internal items [4p/4p].   (http://docs.generic-mapping-tools.org/latest/legend.html#c)\nD | pos | position :: [Type => Str]  Arg=[g|j|J|n|x]refpoint+wwidth[/height][+jjustify][+lspacing][+odx[/dy]]\nDefines the reference point on the map for the legend using one of four coordinate systems.   (http://docs.generic-mapping-tools.org/latest/legend.html#d)\nF | box :: [Type => Str | Number]   Arg=[+cclearances][+gfill][+i[[gap/]pen]][+p[pen]][+r[radius]][+s[[dx/dy/][shade]]]\nWithout further options, draws a rectangular border around the legend using MAPFRAMEPEN.   (http://docs.generic-mapping-tools.org/latest/legend.html#f)\nJz | zscale | zsize :: [Type => String]\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.lines","page":"Index","title":"GMT.lines","text":"lines(cmd0::String=\"\", arg1=nothing; decorated=(...), kwargs...)\n\nReads a file or (x,y) pairs and plots a collection of different line with decorations\n\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nW | pen | line_attrib :: [Type => Str]\nSet pen attributes for lines or the outline of symbols   (http://docs.generic-mapping-tools.org/latest/plot.html#w)\n\nExamples:\n\nlines([0, 10]; [0, 20], limits=(-2,12,-2,22), proj=\"M2.5\", pen=1, fill=:red,\n\t  decorated=(dist=(val=1,size=0.25), symbol=:box), show=true)\n\nlines(x -> cos(x) * x, y -> sin(y) * y, linspace(0,2pi,100), region=(-4,7,-5.5,2.5), lw=2, lc=:sienna,\n      decorated=(quoted=true, const_label=\" In Vino Veritas  - In Aqua, Rãs & Toads\", font=(25,\"Times-Italic\"),\n                 curved=true, pen=(0.5,:red)), aspect=:equal, fmt=:png, show=true)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.logo","page":"Index","title":"GMT.logo","text":"logo(cmd0::String=\"\"; kwargs...)\n\nPlots the GMT logo on a map. By default, the GMT logo is 5 cm wide and 2.5 cm high and will be positioned relative to the current plot origin. Use various options to change this and to place a transparent or opaque rectangular map panel behind the GMT logo.\n\nFull option list at gmtlogo\n\nParameters\n\nD | pos | position :: [Type => Str]\nSets reference point on the map for the image using one of four coordinate systems.   (http://docs.generic-mapping-tools.org/latest/gmtlogo.html#d)\nF | box :: [Type => Str]\nWithout further options, draws a rectangular border around the GMT logo using MAP_FRAME_PEN.   or map rose (T)   (http://docs.generic-mapping-tools.org/latest/gmtlogo.html#f)\njulia :: [Type => Number]\nCreate the Julia instead of the GMT logo. Provide circle diameter in centimeters\nGMTjulia :: [Type => Number]\nCreate the GMT Julia GMT logo. Provide circle diameter in centimeters\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nJz | zscale | zsize :: [Type => String]\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nExample, make a GMT Julia logo with circles of 1 cm: logo(GMTjulia=1, show=true)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.lonlat2xy-Tuple{Vector{var\"#s1665\"} where var\"#s1665\"<:Real, String}","page":"Index","title":"GMT.lonlat2xy","text":"lonlat2xy(lonlat::Matrix{<:Real}, t_srs::String; s_srs=::String=\"+proj=longlat +datum=WGS84\")\n\nor\n\nlonlat2xy(D::GMTdataset, t_srs::String; s_srs=::String=\"+proj=longlat +datum=WGS84\")\n\nComputes the forward projection from LatLon to XY in the given projection. The input is assumed to be in WGS84. If it isn't, pass the appropriate projection info via the s_srs option.\n\nParameters\n\nlonlat: The input data. It can be a Matrix, or a GMTdataset (or vector of it)\nt_srs:  The destiny projection system. This can be a PROJ4 or a WKT string\n\nReturns\n\nA Matrix if input is a Matrix or a GMTdadaset if input had that type\n\n\n\n\n\n","category":"method"},{"location":"#GMT.loxodrome-NTuple{4, Real}","page":"Index","title":"GMT.loxodrome","text":"function loxodrome(lon1,lat1,lon2,lat2; step=0, unit=:m, np=0, proj::String=\"\", epsg::Integer=0)\n\nor\n\nfunction loxodrome(D; step=0, unit=:m, np=0, proj::String=\"\", epsg::Integer=0)\n\nGenerate a loxodrome (rhumb line) on an ellipsoid. Input data can be two or more points. In later case each line segment is descretized at step increments,\n\nParameters\n\nD: - the input points. This can either be a 2x2 matrix or a GMTdataset. Note that only the first 2 points are used.\nstep:  - Incremental distance at which the segment line is descretized in meters(the default), but see unit\nunit:  - If step is not in meters use one of unit=:km, or unit=:Nautical or unit=:Miles\nnp:    - Number of intermediate points to be generated between end points (alternative to step)\nproj  - If line data is in Cartesians but with a known projection pass in a PROJ4 string\nepsg  - Same as proj but using an EPSG code\n\nReturns\n\nA Mx2 matrix with the on lat of the points along the loxodrome when input is a matrix or the 2 pairs of points. A GMTdataset when the input is GMTdataset.\n\nExample: Compute an loxodrome between points (0,0) and (30,50) discretized at 100 km steps.\n\nloxo = loxodrome([0 0; 30 50], step=100, unit=:k);\n\n\n\n\n\n","category":"method"},{"location":"#GMT.loxodrome_direct","page":"Index","title":"GMT.loxodrome_direct","text":"loxodrome_direct(lon, lat, azimuth, distance, a=6378137.0, f=0.0033528106647474805)\n\nCompute the direct problem of a loxodrome on the ellipsoid.\n\nGiven latitude and longitude of P1, azimuth a12 of the loxodrome P1P2 and the arc length s along the loxodrome curve, compute the latitude and longitude of P2.\n\nArgs:\n\nlon, lat: - longitude, latitude (degrees) of starting point.\nazimuth:  - azimuth (degrees)\ndistance: - distance to move from (lat,lon) in meters\na - major axis of the ellipsoid (meters). Default values for WGS84\nf - flattening od the ellipsoid (default = 1 / 298.257223563)\n\nReturns\n\n[lon lat] of destination after moving for [distance] metres in [azimuth] direction.\n\nExample: Compute the end point at a bearing of 45 degrees 10000 meters from point 0,0\n\nloxo = loxodrome_direct(0,0,45, 10000)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.loxodrome_inverse","page":"Index","title":"GMT.loxodrome_inverse","text":"function loxodrome_inverse(lon1, lat1, lon2, lat2, a=6378137.0, f=0.0033528106647474805)\n\nCompute the inverse problem of a loxodrome on the ellipsoid.\n\nGiven latitudes and longitudes of P1 and P2 on the ellipsoid, compute the azimuth a12 of the loxodrome P1P2, the arc length s along the loxodrome curve.\n\nArgs:\n\nlon1, lat1, lon2, lat2: - longitude and latitude of starting and end points (degrees).\na - major axis of the ellipsoid (meters). Default values for WGS84\nf - flattening od the ellipsoid (default = 1 / 298.257223563)\n\nReturns\n\nDistance (meters) and azimuth from P1 to P2\n\nExample: Compute the distance and azimuth beyween points (0,0) and (5,5)\n\ndist, azim = loxodrome_inverse(0,0,5,5)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.make_zvals_vec","page":"Index","title":"GMT.make_zvals_vec","text":"make_zvals_vec(D, user_ids::Vector{String}, vals::Array{<:Real}, sub_head=0, upper=false, lower=false)\n\nuser_ids -> is a string vector with the ids (names in header) of the GMTdataset D \nvals     -> is a vector with the the numbers to be used in plot -Z to color the polygons.\nsub_head -> Position in header where field is to be found in the comma separated string.\n\nCreate a vector with ZVALS to use in plot where length(ZVALS) == length(D) The elements of ZVALS are made up from the vals but it can be larger if there are segments with no headers. In that case it replicates the previously known value until it finds a new segment ID.\n\nReturns a Vector{Float64} with the same length as the number of segments in D. The content is made up after the contents of vals but repeated such that each polygon of the same family, i.e. with the same user_ids, has the same value.\n\n\n\n\n\n","category":"function"},{"location":"#GMT.makecpt","page":"Index","title":"GMT.makecpt","text":"makecpt(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nMake static color palette tables (CPTs).\n\nFull option list at makecpt\n\nA | alpha | transparency :: [Type => Str]\nSets a constant level of transparency (0-100) for all color slices.   (http://docs.generic-mapping-tools.org/latest/makecpt.html#a)\nC | color | cmap :: [Type => Str]\t\tArg = cpt master+izinc color1color2*color3*\nGive a CPT name or specify -Ccolor1,color2[,color3,...] to build a linear continuous CPT from those   colors automatically.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#c)\nD | bg | background :: [Type => Str | []]\t\t\tArg = [i|o]\nSelect the back- and foreground colors to match the colors for lowest and highest   z-values in the output CPT.    (http://docs.generic-mapping-tools.org/latest/makecpt.html#d)\nE | nlevels :: [Type => Int | []]\t\tArg = [nlevels]\nImplies reading data table(s) from file or arrays. We use the last data column to   determine the data range   (http://docs.generic-mapping-tools.org/latest/makecpt.html#e)\nF | color_model :: [Type => Str | []]\t\tArg = [R|r|h|c][+c]]\nForce output CPT to written with r/g/b codes, gray-scale values or color name.   (http://docs.generic-mapping-tools.org/latest/makecpt.html#f)\nG | truncate :: [Type => Str]              Arg = zlo/zhi\nTruncate the incoming CPT so that the lowest and highest z-levels are to zlo and zhi.   (http://docs.generic-mapping-tools.org/latest/makecpt.html#g)\nH | save :: [Type => Bool]\nModern mode only: Write the CPT to disk [Default saves the CPT as the session current CPT].   Required for scripts used to make animations via movie where we must pass named CPT files.   (http://docs.generic-mapping-tools.org/latest/makecpt.html#h)\nI | inverse | reverse :: [Type => Str]\tArg = [c][z]\nReverse the sense of color progression in the master CPT.   (http://docs.generic-mapping-tools.org/latest/makecpt.html#i)\nM | overrule_bg :: [Type => Bool]\nOverrule background, foreground, and NaN colors specified in the master CPT with the values of   the parameters COLORBACKGROUND, COLORFOREGROUND, and COLOR_NAN.   (http://docs.generic-mapping-tools.org/latest/makecpt.html#m)\nN | no_bg | nobg :: [Type => Bool]\nDo not write out the background, foreground, and NaN-color fields.   (http://docs.generic-mapping-tools.org/latest/makecpt.html#n)\nQ | log :: [Type => Bool | Str]\t\t\tArg = [i|o]\nSelects a logarithmic interpolation scheme [Default is linear].   (http://docs.generic-mapping-tools.org/latest/makecpt.html#q)\nS | auto :: [Type => Bool | Str]\t\t\tArg = [mode]\nDetermine a suitable range for the -T option from the input table(s) (or stdin).   (http://docs.generic-mapping-tools.org/latest/makecpt.html#s)\nT | range :: [Type => Str]\t\t\tArg = [min/max/inc[+b|l|n]|file|list]\nDefines the range of the new CPT by giving the lowest and highest z-value and interval.   (http://docs.generic-mapping-tools.org/latest/makecpt.html#t)\nW | wrap | categorical :: [Type => Bool | Str | []]      Arg = [w]\nDo not interpolate the input color table but pick the output colors starting at the   beginning of the color table, until colors for all intervals are assigned.   (http://docs.generic-mapping-tools.org/latest/makecpt.html#w)\nZ | continuous :: [Type => Bool]\nCreates a continuous CPT [Default is discontinuous, i.e., constant colors for each interval].   (http://docs.generic-mapping-tools.org/latest/makecpt.html#z)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.mapproject","page":"Index","title":"GMT.mapproject","text":"mapproject(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nForward and inverse map transformations, datum conversions and geodesy.\n\nFull option list at mapproject\n\nParameters\n\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nA | origin :: [Type => Str]    Arg = bBfFoOlon0lat0+v\nCalculate azimuth along track or to the optional fixed point set with lon0/lat0.   (http://docs.generic-mapping-tools.org/latest/mapproject.html#a)\nC | center :: [Type => Str | List | []]     Arg = dxdy\nSet center of projected coordinates to be at map projection center [Default is lower left corner].   (http://docs.generic-mapping-tools.org/latest/mapproject.html#c)\nD | override_units :: [Type => Str]    Arg = cip\nTemporarily override PROJLENGTHUNIT and use c (cm), i (inch), or p (points) instead.   (http://docs.generic-mapping-tools.org/latest/mapproject.html#d)\nE | geod2ecef | ecef :: [Type => Str | []]    Arg = datum\nConvert from geodetic (lon, lat, height) to Earth Centered Earth Fixed (ECEF) (x,y,z) coordinates.   (http://docs.generic-mapping-tools.org/latest/mapproject.html#e)\nF | one2one :: [Type => Str | []]    Arg = unit\nForce 1:1 scaling, i.e., output (or input, see I) data are in actual projected meters.   (http://docs.generic-mapping-tools.org/latest/mapproject.html#f)\nG | track_distances :: [Type => Str | List]    Arg = lon0lat0+a+i+u+-unit+v\nCalculate distances along track or to the optional fixed point set with G=\"lon0/lat0\".   (http://docs.generic-mapping-tools.org/latest/mapproject.html#g)\nI | inverse :: [Type => Bool]\nDo the Inverse transformation, i.e., get (longitude,latitude) from (x,y) data.   (http://docs.generic-mapping-tools.org/latest/mapproject.html#i)\nL | dist2line :: [Type => Str | NamedTuple]   Arg = linexy+u+-unit+p  (line=Matrix unit=x fractional_pt=_cartesian=true projected=true)\nDetermine the shortest distance from the input data points to the line(s) given in the   ASCII multisegment file line.xy.   (http://docs.generic-mapping-tools.org/latest/mapproject.html#l)\nN | geod2aux :: [Type => Str | []]       Arg = acgm\nConvert from geodetic latitudes to one of four different auxiliary latitudes (longitudes are unaffected).   (http://docs.generic-mapping-tools.org/latest/mapproject.html#n)\nQ | list :: [Type => Str | []]           Arg = de\nList all projection parameters. To only list datums, use Q=:d, to only list ellipsoids, use Q=:e.   (http://docs.generic-mapping-tools.org/latest/mapproject.html#q)\nS | supress :: [Type => Bool]\nSuppress points that fall outside the region.   (http://docs.generic-mapping-tools.org/latest/mapproject.html#s)\nT | change_datum :: [Type => Str]    Arg = hfromto\nCoordinate conversions between datums from and to using the standard Molodensky transformation.   (http://docs.generic-mapping-tools.org/latest/mapproject.html#t)\nW | map_size :: [Type => Str | []]    Arg = wh\nPrints map width and height on standard output. No input files are read.   (http://docs.generic-mapping-tools.org/latest/mapproject.html#w)\nZ | travel_times :: [Type => Str | Number]    Arg = speed+a+i+f+tepoch\nCalculate travel times along track as specified with -G.   (http://docs.generic-mapping-tools.org/latest/mapproject.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\ns | skiprows | skip_NaN :: [Type => Str]       Arg = colsar\nSuppress output for records whose z-value equals NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#s-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.mask","page":"Index","title":"GMT.mask","text":"mask(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads (length,azimuth) pairs from file and plot a windmask diagram.\n\nFull option list at psmask\n\nParameters\n\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/mask.html#i)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | endclippath :: [Type => Bool]\nMark end of existing clip path. No input file is needed.   (http://docs.generic-mapping-tools.org/latest/mask.html#c)\nD | dump :: [Type => Str]\nDump the (x,y) coordinates of each clipping polygon to one or more output files   (or stdout if template is not given).   (http://docs.generic-mapping-tools.org/latest/mask.html#d)\nF | oriented_polygons :: [Type => Str | []]\nForce clip contours (polygons) to be oriented so that data points are to the left (-Fl [Default]) or right (-Fr)    (http://docs.generic-mapping-tools.org/latest/mask.html#f)\nG | fill :: [Type => Number | Str]\nSet fill shade, color or pattern for positive and/or negative masks [Default is no fill].   (http://docs.generic-mapping-tools.org/latest/mask.html#g)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nJz | zscale | zsize :: [Type => String]\nL | node_grid :: [Type => Str]\nSave the internal grid with ones (data constraint) and zeros (no data) to the named nodegrid.   (http://docs.generic-mapping-tools.org/latest/mask.html#l)\nN | invert :: [Type => Bool]\nInvert the sense of the test, i.e., clip regions where there is data coverage.   (http://docs.generic-mapping-tools.org/latest/mask.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nQ | cut_number :: [Type => Number | Str]\nDo not dump polygons with less than cut number of points [Dumps all polygons].   (http://docs.generic-mapping-tools.org/latest/mask.html#q)\nS | search_radius :: [Type => Number | Str]\nSets radius of influence. Grid nodes within radius of a data point are considered reliable.   (http://docs.generic-mapping-tools.org/latest/mask.html#s)\nT | tiles :: [Type => Bool]\nPlot tiles instead of clip polygons. Use -G to set tile color or pattern. Cannot be used with -D.   (http://docs.generic-mapping-tools.org/latest/mask.html#t)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.mat2ds","page":"Index","title":"GMT.mat2ds","text":"D = mat2ds(mat [,txt]; x=nothing, text=nothing, multi=false, kwargs...)\n\nTake a 2D mat array and convert it into a GMTdataset. x is an optional coordinates vector (must have the same number of elements as rows in mat). Use x=:ny to generate a coords array 1:n_rows of mat.\n\ntxt   Return a Text record which is a Dataset with data = Mx2 and text in third column. The text  can be an array with same size as matrows or a string (will be reapeated n_rows times.) \nx   An optional vector with the xx coordinates\nhdr optional String vector with either one or n_rows multisegment headers.\ncolor optional array of strings with color names/values. Its length can be smaller than n_rows, case in  which colors will be cycled.\nlinethick, or lt for selecting different line thicknesses. Work alike color, but should be   a vector of numbers, or just a single number that is then appl\tied to all lines.\nfill  Optional string array with color names or array of \"patterns\"\nls | linestyle  Line style. A string or an array of strings with length = size(mat1) with line styles.\nlt | linethick  Line thickness.\nmulti When number of columns in mat > 2, or == 2 and x != nothing, make an multisegment Dataset with  first column and 2, first and 3, etc. Convenient when want to plot a matrix where each column is a line. \ndatatype Keep the original data type of mat. Default, converts to Float64\nproj or proj4  A proj4 string for dataset SRS\nwkt  A WKT SRS\n\n\n\n\n\n","category":"function"},{"location":"#GMT.mat2grid","page":"Index","title":"GMT.mat2grid","text":"G = mat2grid(mat; reg=nothing, x=[], y=[], hdr=nothing, proj4::String=\"\", wkt::String=\"\", tit::String=\"\", rem::String=\"\", cmd::String=\"\")\n\nTake a 2D mat array and a HDR 1x9 [xmin xmax ymin ymax zmin zmax reg xinc yinc] header descriptor and return a grid GMTgrid type. Alternatively to HDR, provide a pair of vectors, x & y, with the X and Y coordinates. Optionaly, the HDR arg may be ommited and it will computed from mat alone, but then x=1:ncol, y=1:nrow When HDR is not used, REG == nothing [default] means create a gridline registration grid and REG == 1, or REG=\"pixel\" a pixel registered grid.\n\nOther methods of this function do:\n\nG = mat2grid([val]; hdr=hdr_vec, reg=nothing, proj4::String=\"\", wkt::String=\"\", tit::String=\"\", rem::String=\"\")\n\nCreate Float GMTgrid with size, coordinates and increment determined by the contents of the HDR var. This array, which is now MANDATORY, has either the same meaning as above OR, alternatively, containng only [xmin xmax ymin ymax xinc yinc] VAL is the value that will be fill the matrix (default VAL = Float32(0)). To get a Float64 array use, for example, VAL = 1.0 Ay other non Float64 will be converted to Float32\n\nExample: mat2grid(1, hdr=[0. 5 0 5 1 1])\n\nG = mat2grid(f::Function, x, y; reg=nothing, proj4::String=\"\", wkt::String=\"\", epsg::Int=0, tit::String=\"\", rem::String=\"\")\n\nWhere F is a function and X,Y the vectors coordinates defining it's domain. Creates a Float32 GMTgrid with size determined by the sizes of the X & Y vectors.\n\nExample: f(x,y) = x^2 + y^2;  G = mat2grid(f, x = -2:0.05:2, y = -2:0.05:2)\n\nG = mat2grid(f::String, x=[], y=[])\n\nWhre F is a pre-set function name. Currently available:\n\n\"ackley\", \"eggbox\", \"sombrero\", \"parabola\" and \"rosenbrock\" \n\nX,Y are vectors coordinates defining the function's domain, but default values are provided for each function. creates a Float32 GMTgrid.\n\nExample: G = mat2grid(\"sombrero\")\n\n\n\n\n\n","category":"function"},{"location":"#GMT.mat2img","page":"Index","title":"GMT.mat2img","text":"I = mat2img(mat::Array{<:Unsigned}; x=[], y=[], hdr=nothing, proj4::String=\"\", wkt::String=\"\", cmap=nothing, kw...)\n\nTake a 2D 'mat' array and a HDR 1x9 [xmin xmax ymin ymax zmin zmax reg xinc yinc] header descriptor and return a GMTimage type. Alternatively to HDR, provide a pair of vectors, x & y, with the X and Y coordinates. Optionaly, the HDR arg may be ommited and it will computed from 'mat' alone, but then x=1:ncol, y=1:nrow When 'mat' is a 3D UInt16 array we automatically compute a UInt8 RGB image. In that case 'cmap' is ignored. But if no conversion is wanted use option 'noconv=true'\n\nI = mat2img(mat::Array{UInt16}; x=[], y=[], hdr=nothing, proj4::String=\"\", wkt::String=\"\", kw...)\n\nTake a mat array of UInt16 and scale it down to UInt8. Input can be 2D or 3D. If the kw variable stretch is used, we stretch the intervals in stretch to [0 255]. Use this option to stretch the image histogram. If stretch is a scalar, scale the values > stretch to [0 255]\n\nstretch = [v1 v2] scales all values >= v1 && <= v2 to [0 255]\nstretch = [v1 v2 v3 v4 v5 v6] scales firts band >= v1 && <= v2 to [0 255], second >= v3 && <= v4, same for third\nstretch = :auto | \"auto\" | true | 1 will do an automatic stretching from values obtained from histogram thresholds\n\n\n\n\n\n","category":"function"},{"location":"#GMT.mbgetdata","page":"Index","title":"GMT.mbgetdata","text":"mbgetdata(cmd0::String=\"\"; kwargs...)\n\nExtract bathymetry, sidescan or amplitude data from datafiles.\n\nParameters\n\nA | flagged :: [Type => Number]\tArg = value\nReplace flagged beans with NaN. Use -A<val> to assign a constant value to the flagged beans.\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nC | datatype | data_type :: [Type => Number | Str | Tuple]\tArg = 0 or a\nOutput SideScan, or amplitude, instead of bathymetry. This case ignores A\nD | scaling :: [Type => Str | Tuple]\tArg = modeampscaleampminampmax\nSets scaling of beam amplitude or sidescan pixel values which can be applied before plotting.\nF | format :: [Type => Int]\nSets the format for the input swath sonar data using MBIO integer format identifiers.\nS | speed :: [Type => Number]\nSets the parameters controlng simulated illumination of bathymetry.\nT | timegap :: [Type => number]\nSets the maximum time gap in minutes between adjacent pings before being considered a gap.\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nn | interp | interpolation :: [Type => Str]         Arg = bcln+a+bBC+c+tthreshold\nSelect grid interpolation mode by adding b for B-spline smoothing, c for bicubic interpolation,   l for bilinear interpolation, or n for nearest-neighbor value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#n-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.mbimport","page":"Index","title":"GMT.mbimport","text":"mbimport(cmd0::String=\"\", arg1=nothing, arg2=nothing, arg3=nothing; kwargs...)\n\nProduces a gray-shaded (or colored) map by plotting rectangles centered on each grid node and assigning them a gray-shade (or color) based on the z-value.\n\nParameters\n\nA | footprint :: [Type => Str | Tuple]\tArg = factormodedepth\nDetermines how the along-track dimension of the beam or pixel footprints is calculated.\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nC | color | cmap :: [Type => Str]\t\tArg = cpt master+izinc color1color2*color3*\nGive a CPT name or specify -Ccolor1,color2[,color3,...] to build a linear continuous CPT from those   colors automatically.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#c)\nD | scaling :: [Type => Str | Tuple]\tArg = modescaleminmax\nSets scaling of beam amplitude or sidescan pixel values which can be applied before plotting.\nE | dpi :: [Type => Int]\nSets the resolution of the projected image that will be created.\nG | bit_color :: [Type => Str | Tuple]\tArg = magnitudeazimuth or magnitudemedian\nSets the parameters controlng simulated illumination of bathymetry.\nS | speed :: [Type => Number]\nSets the minimum speed in km/hr (5.5 kts ~ 10 km/hr) allowed in the input data.\nT | timegap :: [Type => number]\nSets the maximum time gap in minutes between adjacent pings before being considered a gap.\nZ | type_plot :: [Type => Str | Number]\nSets the style of the plot.\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nn | interp | interpolation :: [Type => Str]         Arg = bcln+a+bBC+c+tthreshold\nSelect grid interpolation mode by adding b for B-spline smoothing, c for bicubic interpolation,   l for bilinear interpolation, or n for nearest-neighbor value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#n-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.mblevitus","page":"Index","title":"GMT.mblevitus","text":"mblevitus(cmd0::String=\"\"; kwargs...)\n\nCreate a water velocity profile which is representative of the mean annual water column for a specified 1 degree by 1 degree region.\n\nParameters\n\nA | all4 :: [Type => Bool]\nPint also depth, velocity, temperature, salinity.\nL | location :: [Type => Str | Tuple]\t\tArg = lonlat\nSets the longitude and latitude of the location of the water velocity profile.\nO | outfile | out_file :: [Type => Str]\nWrite the SVP to <outfile>.\nH | help :: [Type => Bool]\nPrint out program's description.\nz | z_down :: [Type => Bool]\nMakes Z axes positive down (default here is Z-up).\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.mbsvplist","page":"Index","title":"GMT.mbsvplist","text":"mbsvplist(cmd0::String=\"\"; kwargs...)\n\nList water sound velocity profiles in swath sonar data files.\n\nParameters\n\nC | uniquesvp :: [Type => Bool]\nOutput the number of unique SVPs in each file.\nF | format :: [Type => Int]\nSets the format for the input swath sonar data.\nM | mode :: [Type => Int]\t\tArg = 1 or 2 or 3\nSets the SVP output mode..\nS | ssv :: [Type => Bool]\nSets the minimum speed in km/hr (5.5 kts ~ 10 km/hr) allowed in the input data.\nZ | firstiszero :: [Type => Bool]\nSets the style of the plot.\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.meca","page":"Index","title":"GMT.meca","text":"meca(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nPlot focal mechanisms.\n\nFull option list at meca\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | offset :: [Type => Bool | Str | GMTcpt]\nOffsets focal mechanisms to the longitude, latitude specified in the last two columns of the input   (http://docs.generic-mapping-tools.org/latest/meca.html#c)\nD | depth_limits :: [Type => Str | Tuple]\nPlots events between depmin and depmax.   (http://docs.generic-mapping-tools.org/latest/meca.html#d)\nE | fill_extensive :: [Type => Str | Number]\nSelects filling of extensive quadrants. [Default is white].   (http://docs.generic-mapping-tools.org/latest/meca.html#e)\nFa | Fe | Fg | Fo | Fp | Fr | Ft | Fz :: [Type => ]\nSets one or more attributes.   (http://docs.generic-mapping-tools.org/latest/meca.html#f)\nG | fill :: [Type => Str | Number]\nSelects shade, color or pattern for filling the sectors [Default is no fill].   (http://docs.generic-mapping-tools.org/latest/meca.html#g)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nL | outline_pen | pen_outline :: [Type => Str | Number | Tuple]\nDraws the “beach ball” outline with pen attributes instead of with the default pen set by pen   (http://docs.generic-mapping-tools.org/latest/meca.html#l)\nM | same_size | samesize :: [Type => Bool]\nUse the same size for any magnitude. Size is given with S   (http://docs.generic-mapping-tools.org/latest/meca.html#m)\nN | no_clip | noclip :: [Type => Str | []]\nDo NOT skip symbols that fall outside frame boundary.   (http://docs.generic-mapping-tools.org/latest/meca.html#n)\nSc|aki | Sc|CMT|gcmt | Sm|mt|moment_tensor | ... :: [Type => Str]\nSelects the meaning of the columns in the input data.   (http://docs.generic-mapping-tools.org/latest/meca.html#s)\nT | nodal :: [Type => Number | Str]\nPlots the nodal planes and outlines the bubble which is transparent.   (http://docs.generic-mapping-tools.org/latest/meca.html#t)\nW | pen :: [Type => Str | Tuple]\nSet pen attributes for all lines and the outline of symbols.   (http://docs.generic-mapping-tools.org/latest/meca.html#w)\nZ | color | cmap :: [Type => Number | Str | GMTcpt]\nGive a CPT and let compressive part color be determined by the z-value in the third column.    (http://docs.generic-mapping-tools.org/latest/meca.html#z)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\nExample: Plot a focal mechanism using the Aki & Richards convention \n\n    psmeca([0.0 3.0 0.0 0 45 90 5 0 0], aki=true, fill=:black, region=(-1,4,0,6), proj=:Merc, show=1)\n\nThe same but add a Label\n\n    psmeca(mat2ds([0.0 3.0 0.0 0 45 90 5 0 0], \"Thrust\"), aki=true, fill=:black, region=(-1,4,0,6), proj=:Merc, show=1)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.movie-Tuple{Any}","page":"Index","title":"GMT.movie","text":"movie(main; pre=nothing, post=nothing, kwargs...)\n\nCreate animation sequences and movies.\n\nFull option list at movie\n\nParameters\n\nmain :: [Type => Str]\nName of a stand-alone GMT.jl script that makes the frame-dependent plot.``\nC | canvas :: [Type => Str]\nSpecify the canvas size used when composing the movie frames.   (http://docs.generic-mapping-tools.org/latest/movie.html#c)\nN | name :: [Type => Str]\nDetermines the name of a sub-directory with frame images as well as the final movie file.   (http://docs.generic-mapping-tools.org/latest/movie.html#n)\nT | frames :: [Type => Int | Str]\nEither specify how many image frames to make or supply a file with a set of parameters, one record per frame (i.e., row).    (http://docs.generic-mapping-tools.org/latest/movie.html#t)\npre :: [Type => Str]\n\nThe optional *backgroundscript* file (a GMT.jl script) can be used one or two purposes: (1) It may create files\n(such as timefile) that will be needed by mainscript to make the movie, and (2) It may make a static background\nplot that should form the background for all frames.\n(http://docs.generic-mapping-tools.org/latest/movie.html#s)\n\npost :: [Type => Str]\nThe optional foregroundscript file (a GMT.jl script) can be used to make a static foreground plot that should be overlain on all frames.    (http://docs.generic-mapping-tools.org/latest/movie.html#s)\nA | gif :: [Type => Str]\t\tArgs = +ln+sstride\nBuild an animated GIF file. You may specify if the movie should play more than once and if so append how many times to repeat.   (http://docs.generic-mapping-tools.org/latest/movie.html#a)\nD | frame_rate :: [Type => Int]\nSet the display frame rate in frames per seconds for the final animation [24].   (http://docs.generic-mapping-tools.org/latest/movie.html#d)\nE | titlepage :: [Type => Str | tuple]\nGive a titlepage script that creates a static title page for the movie [no title].    (http://docs.generic-mapping-tools.org/latest/movie.html#e)\nF | format :: [Type => Str]\tArg = format+ooptions\nSet the format of the final video product. Choose either mp4 (MPEG-4 movie) or webm (WebM movie).   (http://docs.generic-mapping-tools.org/latest/movie.html#f)\nG | fill :: [Type => Str | Int | Touple]\nSet the canvas color or fill before plotting commences [none].   (http://docs.generic-mapping-tools.org/latest/movie.html#g)\nH | scale :: [Type => Number]\nTemporarily increases the effective dots-per-unit by factor, rasterizes the frame, then downsamples the image by the same factor at the end.   (http://docs.generic-mapping-tools.org/latest/movie.html#h)\nI | includefile :: [Type => Str]\nInsert the contents of includefile into the movie_init script that is accessed by all movie scripts.   (http://docs.generic-mapping-tools.org/latest/movie.html#i)\nK | fading :: [Type => Number | Str | Tuple]\tArg = +fiofades+gfill+p \nAdd fading in and out for the main animation sequence [no fading].   (http://docs.generic-mapping-tools.org/latest/movie.html#k)\nL | label :: [Type => Str]\nAutomatic labeling of individual frames.   (http://docs.generic-mapping-tools.org/latest/movie.html#l)\nM | cover_page :: [Type => number]\tArg = frameformat\nSelect a single frame for a cover page. This frame will be written to the current directory.   (http://docs.generic-mapping-tools.org/latest/movie.html#m)\nP | progress :: [Type => Str | Tuple]\nAutomatic placement of progress indicator(s).   (http://docs.generic-mapping-tools.org/latest/movie.html#p)\nQ | debug :: [Type => Bool | Str]\t\tArg = s\nDebugging: Leave all files and directories we create behind for inspection.   (http://docs.generic-mapping-tools.org/latest/movie.html#q)\nSb | background :: [Type => Str | Function]\nOptional background script or bg PS file GMT6.1 only\nSf | foreground :: [Type => Str | Function]\nOptional foreground script or fg PS file GMT6.1 only\nW | work_dir :: [Type => Str]\n\nBy default, all temporary files and frame PNG file are built in the subdirectory prefix set via **name**.\nYou can override that by giving another workdir as a relative or full directory path.\n(http://docs.generic-mapping-tools.org/latest/movie.html#w)\n\nZ | clean :: [Type => Bool]\nErase the entire name directory after assembling the final movie [Default leaves directory with all images.   (http://docs.generic-mapping-tools.org/latest/movie.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nx | cores | n_threads :: [Type => Str or Number]  Arg = -n\nLimit the number of cores to be used in any OpenMP-enabled multi-threaded algorithms.   (http://docs.generic-mapping-tools.org/latest/gmt.html#x-full)\n\n\n\n\n\n","category":"method"},{"location":"#GMT.nearneighbor","page":"Index","title":"GMT.nearneighbor","text":"nearneighbor(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads arbitrarily located (x,y,z[,w]) triples [quadruplets] and uses a nearest neighbor algorithm to assign an average value to each node that have one or more points within a radius centered on the node. The average value is computed as a weighted mean of the nearest point from each sector inside the search radius. The weighting function used is w(r) = 1 / (1 + d ^ 2), where d = 3 * r / search_radius and r is distance from the node. This weight is modulated by the weights of the observation points [if supplied].\n\nFull option list at nearneighbor\n\nParameters\n\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/nearneighbor.html#i)\nN | sectors | nn | nearest :: [Type => Number | Str | Bool (for nn or nearest)]\nThe circular area centered on each node is divided into sectors sectors.   (http://docs.generic-mapping-tools.org/latest/nearneighbor.html#n)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | search_radius :: [Type => Number]\nSets the search_radius that determines which data points are considered close to a node.   (http://docs.generic-mapping-tools.org/latest/nearneighbor.html#s)\nE | empty :: [Type => Bool]\nSet the value assigned to empty nodes when G is set [NaN].   (http://docs.generic-mapping-tools.org/latest/nearneighbor.html#e)\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = nearneighbor(....) form.   (http://docs.generic-mapping-tools.org/latest/nearneighbor.html#g)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | weights :: [Type => Bool]\nInput data have a 4th column containing observation point weights.   (http://docs.generic-mapping-tools.org/latest/nearneighbor.html#w)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nn | interp | interpolation :: [Type => Str]         Arg = bcln+a+bBC+c+tthreshold\nSelect grid interpolation mode by adding b for B-spline smoothing, c for bicubic interpolation,   l for bilinear interpolation, or n for nearest-neighbor value.   (http://docs.generic-mapping-tools.org/latest/gmt.html#n-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.orthodrome-Tuple{String}","page":"Index","title":"GMT.orthodrome","text":"function orthodrome(D; step=0, unit=:m, np=0, proj::String=\"\", epsg::Integer=0)\n\nGenerate a orthodrome line(s) (shortest distace) on an ellipsoid. Input data can be two or more points. In later case each line segment is descretized at step increments,\n\nParameters\n\nD: - the input points. This can either be a GMTdataset (or vector of it), a Mx2 matrix, the name        of file that can be read as a GMTdataset by gmtread() or a GDAL AbstractDataset object\nstep:  - Incremental distance at which the segment line is descretized in meters(the default), but see unit\nunit:  - If step is not in meters use one of unit=:km, or unit=:Nautical or unit=:Miles\nnp:    - Number of intermediate points between poly-line vertices (alternative to step)\nproj  - If line data is in Cartesians but with a known projection pass in a PROJ4 string\nepsg  - Same as proj but using an EPSG code\n\nReturns\n\nA Mx2 matrix with the lon lat of the points along the orthodrome when input is a matrix. A GMT dataset or a vector of it (when input is Vector{GMTdataset}).\n\nExample: Compute an orthodrome between points (0,0) and (30,50) discretized at 100 km steps.\n\nmat = orthodrome([0 0; 30 50], step=100, unit=:k);\n\n\n\n\n\n","category":"method"},{"location":"#GMT.plot-Tuple{Any}","page":"Index","title":"GMT.plot","text":"plot(arg1::Array; kwargs...)\n\nreads (x,y) pairs from files [or standard input] and generates PostScript code that will plot lines, polygons, or symbols at those locations on a map.\n\nFull option list at psxy\n\nParameters\n\nA | steps | straight_lines :: [Type => Str] \n\nBy default, geographic line segments are drawn as great circle arcs.\nTo draw them as straight lines, use this option.\n(http://docs.generic-mapping-tools.org/latest/plot.html#a)\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | color | cmap :: [Type => Str]\t\tArg = cpt master+izinc color1color2*color3*\nGive a CPT name or specify -Ccolor1,color2[,color3,...] to build a linear continuous CPT from those   colors automatically.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#c)\nD | shift | offset :: [Type => Str]\nOffset the plot symbol or line locations by the given amounts dx/dy in cm, inch or points.   (http://docs.generic-mapping-tools.org/latest/plot.html#d)\nE | error | error_bars :: [Type => Str]\nDraw symmetrical error bars.   (http://docs.generic-mapping-tools.org/latest/plot.html#e)\nF | conn | connection :: [Type => Str]\nAlter the way points are connected   (http://docs.generic-mapping-tools.org/latest/plot.html#f)\nG | fill | markerfacecolor | MarkerFaceColor | markercolor | mc :: [Type => Str]\nSelect color or pattern for filling of symbols or polygons. BUT WARN: the alias 'fill' will set the   color of polygons OR symbols but not the two together. If your plot has polygons and symbols, use   'fill' for the polygons and 'markerfacecolor' for filling the symbols. Same applyies for W bellow   (http://docs.generic-mapping-tools.org/latest/plot.html#g)\nI | intens :: [Type => Str | number]\nUse the supplied intens value (in the [-1 1] range) to modulate the fill color by simulating illumination.   (http://docs.generic-mapping-tools.org/latest/plot.html#i)\nL | close | polygon :: [Type => Str]\nForce closed polygons.    (http://docs.generic-mapping-tools.org/latest/plot.html#l)\nN | no_clip | noclip :: [Type => Str or []]\nDo NOT clip symbols that fall outside map border    (http://docs.generic-mapping-tools.org/latest/plot.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nS | symbol | marker | Marker :: [Type => Str]\nPlot symbols (including vectors, pie slices, fronts, decorated or quoted lines).    (http://docs.generic-mapping-tools.org/latest/plot.html#s)   Alternatively select a sub-set of symbols using the aliases: marker or Marker and values:\n-, x_dash\n+, plus\na, *, star\nc, circle\nd, diamond\ng, octagon\nh, hexagon\ni, v, inverted_tri\nn, pentagon\np, ., point\nr, rectangle\ns, square\nt, ^, triangle\nx, cross\ny, y_dash\nand select their sizes with the markersize or size keyword [default is 7p].   The marker size can be a scalar or a vector with same size numeber of rows of data. Units are   points unless specified otherwise with (for example for cm) par=(PROJLENGTHUNIT=\"c\")\nW | pen | markeredgecolor | mec :: [Type => Str]\nSet pen attributes for lines or the outline of symbols   (http://docs.generic-mapping-tools.org/latest/plot.html#w)   WARNING: the pen attributes will set the pen of polygons OR symbols but not the two together.   If your plot has polygons and symbols, use W or pen for the polygons and   markeredgecolor for filling the symbols. Similar to S above.\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nZ | level :: [Type => Str | NamedTuple]\tArg = value|file[+f|+l] | (data=Array|Number, outline=_, fill=_)\nPaint polygons after the level given as a cte or a vector with same size of number of polygons. Needs a color map.   (http://docs.generic-mapping-tools.org/latest/plot.html#z)\naxis | aspect :: [Type => Str]\nWhen equal to \"equal\" makes a square plot.\na | aspatial :: [Type => Str]\t\t\tArg = col=name\nControl how aspatial data are handled in GMT during input and output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#aspatial-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"method"},{"location":"#GMT.plot3d-Tuple{Any}","page":"Index","title":"GMT.plot3d","text":"plot3d(arg1::Array; kwargs...)\n\nreads (x,y,z) triplets and generates PostScript code that will plot lines, polygons, or symbols at those locations in 3-D.\n\nFull option list at plot3d\n\nParameters\n\nA | steps | straight_lines :: [Type => Str]  \nBy default, geographic line segments are drawn as great circle arcs. To draw them as straight lines, use this option.\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nJz | zscale | zsize :: [Type => String]\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | color :: [Type => Str]\nGive a CPT or specify -Ccolor1,color2[,color3,...] to build a linear continuous CPT from those colors automatically.   (http://docs.generic-mapping-tools.org/latest/plot3d.html#c)\nD | offset :: [Type => Str]\nOffset the plot symbol or line locations by the given amounts dx/dy.   (http://docs.generic-mapping-tools.org/latest/plot3d.html#d)\nE | error_bars :: [Type => Str]\nDraw symmetrical error bars.   (http://docs.generic-mapping-tools.org/latest/plot3d.html#e)\nF | conn | connection :: [Type => Str]\nAlter the way points are connected   (http://docs.generic-mapping-tools.org/latest/plot3d.html#f)\nG | fill | markerfacecolor | MarkerFaceColor | markercolor | mc :: [Type => Str]\nSelect color or pattern for filling of symbols or polygons. BUT WARN: the alias 'fill' will set the   color of polygons OR symbols but not the two together. If your plot has polygons and symbols, use   'fill' for the polygons and 'markerfacecolor' for filling the symbols. Same applyies for W bellow   (http://docs.generic-mapping-tools.org/latest/plot3d.html#g)\nI | intens :: [Type => Str or number]\nUse the supplied intens value (in the [-1 1] range) to modulate the fill color by simulating illumination.   (http://docs.generic-mapping-tools.org/latest/plot3d.html#i)\nL | closed_polygon :: [Type => Str]\nForce closed polygons.    (http://docs.generic-mapping-tools.org/latest/plot3d.html#l)\nN | no_clip :: [Type => Str | []]\nDo NOT clip symbols that fall outside map border    (http://docs.generic-mapping-tools.org/latest/plot3d.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nS | symbol | marker | Marker :: [Type => Str]\nPlot symbols (including vectors, pie slices, fronts, decorated or quoted lines).    (http://docs.generic-mapping-tools.org/latest/plot3d.html#s)   Alternatively select a sub-set of symbols using the aliases: marker or Marker and values:\n-, x_dash\n+, plus\na, *, star\nc, circle\nd, diamond\ng, octagon\nh, hexagon\ni, v, inverted_tri\nn, pentagon\np, ., point\nr, rectangle\ns, square\nt, ^, triangle\nx, cross\ny, y_dash\nW | pen | line_attribs | markeredgecolor | MarkerEdgeColor | mec:: [Type => Str]   Set pen attributes for lines or the outline of symbols   (http://docs.generic-mapping-tools.org/latest/plot3d.html#w)   WARNING: the pen attributes will set the pen of polygons OR symbols but not the two together.   If your plot has polygons and symbols, use W or line_attribs for the polygons and   markeredgecolor or MarkerEdgeColor for filling the symbols. Similar to S above.\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nZ | level :: [Type => Str | NamedTuple]\tArg = value|file[+f|+l] | (data=Array|Number, outline=_, fill=_)\nPaint polygons after the level given as a cte or a vector with same size of number of polygons. Needs a color map.   (http://docs.generic-mapping-tools.org/latest/plot3d.html#z)\na | aspatial :: [Type => Str]\t\t\tArg = col=name\nControl how aspatial data are handled in GMT during input and output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#aspatial-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\n\nExample:\n\nplot3d(x -> sin(x)*cos(10x), y -> sin(y)*sin(10y), z -> cos(z), 0:pi/100:pi, show=true, aspect3=:equal)\n\n\n\n\n\n","category":"method"},{"location":"#GMT.plotyy-Tuple{Any, Any}","page":"Index","title":"GMT.plotyy","text":"plotyy(arg1, arg2; kwargs...)\n\nExample:\n\nplotyy([1 1; 2 2], [1.5 1.5; 3 3], R=\"0.8/3/0/5\", title=\"Ai\", ylabel=:Bla, xlabel=:Ble, seclabel=:Bli, show=1)\n\n\n\n\n\n","category":"method"},{"location":"#GMT.proj2wkt-Tuple{String}","page":"Index","title":"GMT.proj2wkt","text":"proj2wkt(proj4_str::String, pretty::Bool=false)\n\nConvert a PROJ4 string into the WKT form. Use pretty=true to return a more human readable text.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.project","page":"Index","title":"GMT.project","text":"project(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nProject data onto lines or great circles, generate tracks, or translate coordinates.\n\nFull option list at project\n\nParameters\n\nC | origin | start_pt :: [Type => list/tuple]    Arg = (xy)\nSets the origin of the projection, in Definition 1 or 2.   (http://docs.generic-mapping-tools.org/latest/project.html#c)\nA | azim :: [Type => Number]    Arg = azimuth\nDefines the azimuth of the projection (Definition 1).   (http://docs.generic-mapping-tools.org/latest/project.html#a)\nE | end_pt :: [Type => list/tuple]    Arg = (bxby)\nbx,by defines the end point of the projection path (Definition 2).   (http://docs.generic-mapping-tools.org/latest/project.html#e)\nF | out_flags :: [Type => Str]    Arg = xyzpqrs\nSpecify your desired output using any combination of xyzpqrs, in any order [Default is xyzpqrs].   (http://docs.generic-mapping-tools.org/latest/project.html#f)\nG | step | small_circle: [Type => Number or list/tuple–    Arg = distcolat+h\nGenerate mode. No input is read. Create (r, s, p) output points every dist units of p. See Q option.   (http://docs.generic-mapping-tools.org/latest/project.html#g)\nL | length_control :: [Type => Number or list/tuple]    Arg = wl_minl_max\nLength controls. Project only those points whose p coordinate is within l_min < p < l_max.   (http://docs.generic-mapping-tools.org/latest/project.html#l)\nN | flat_earth :: [Type => Bool or []]\nFlat Earth. Make a Cartesian coordinate transformation in the plane. Default uses spherical trigonometry.\nQ | km :: [Type => Bool or []]\nMap type units.   (http://docs.generic-mapping-tools.org/latest/project.html#q)\nS | sort :: [Type => Bool or []]\nSort the output into increasing p order. Useful when projecting random data into a sequential profile.   (http://docs.generic-mapping-tools.org/latest/project.html#s)\nT | pole :: [Type => list/tuple]    Arg = (pxpy)\npx,py sets the position of the rotation pole of the projection. (Definition 3).   (http://docs.generic-mapping-tools.org/latest/project.html#t)\nW | width_control :: [Type => list/tuple]    Arg = (w_minw_max)\nWidth controls. Project only those points whose q coordinate is within w_min < q < w_max.   (http://docs.generic-mapping-tools.org/latest/project.html#w)\nZ | ellipse :: [Type => Number | Tuple | String]    Arg = majorminorazimuth+en\nMake ellipse with major and minor axes given in km (unless N is given for a Cartesian ellipse) and the   azimuth of the major axis in degrees; used in conjunction with origin (sets its center) and step   (sets the distance increment).   (http://docs.generic-mapping-tools.org/latest/project.html#z)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\ns | skiprows | skip_NaN :: [Type => Str]       Arg = colsar\nSuppress output for records whose z-value equals NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#s-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.psconvert","page":"Index","title":"GMT.psconvert","text":"psconvert(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nPlace images or EPS files on maps.\n\nFull option list at psconvert\n\nParameters\n\nA | adjust | crop :: [Type => Str or Number]  \nAdjust the BoundingBox and HiResBoundingBox to the minimum required by the image content.   (http://docs.generic-mapping-tools.org/latest/psconvert.html#a)\nC | gs_option :: [Type => Str or Array os strings]\nSpecify a single, or an araay of, custom option that will be passed on to GhostScript as is.   (http://docs.generic-mapping-tools.org/latest/psconvert.html#c)\nD | out_dir | output_dir :: [Type => Str]\nSets an alternative output directory (which must exist) [Default is the same directory   as the PS files].   (http://docs.generic-mapping-tools.org/latest/psconvert.html#d)\nE | dpi :: [Type => Number]\nSet raster resolution in dpi [default = 720 for PDF, 300 for others].   (http://docs.generic-mapping-tools.org/latest/psconvert.html#e)\nF | :out_name | output_name :: [Type => Str]\nForce the output file name.   (http://docs.generic-mapping-tools.org/latest/psconvert.html#f)\nG | ghost_path :: [Type => Bool]\nFull path to your GhostScript executable.   (http://docs.generic-mapping-tools.org/latest/psconvert.html#g)\nI | icc_gray :: [Type => Bool]\nEnforce gray-shades by using ICC profiles.   (http://docs.generic-mapping-tools.org/latest/psconvert.html#i)\nin_memory :: [Type => Bool]\nProcess a in memory PS file. No other input file should be provided.   Currently works on Windows only.\nL | list_file :: [Type => Str]\nThe listfile is an ASCII file with the names of the PostScript files to be converted.   (http://docs.generic-mapping-tools.org/latest/psconvert.html#l)\nQ | anti_aliasing :: [Type => Str]\nSet the anti-aliasing options for graphics or text. Append the size of the subsample box   (1, 2, or 4) [4]. This option is set by default.   (http://docs.generic-mapping-tools.org/latest/psconvert.html#q)\nS | gs_command :: [Type => Bool]\nPrint to standard error the GhostScript command after it has been executed.   (http://docs.generic-mapping-tools.org/latest/psconvert.html#s)\nT | format :: [Type => Str]\nb|e|E|f|F|j|g|G|m|s|t Sets the output format, where b = BMP, e = EPS, E = EPS with PageSize command,   f = PDF, F = multi-page PDF, j = JPEG, g = PNG, G = transparent PNG (untouched regions are   transparent), m = PPM,  and t = TIFF [default is JPEG].   Alternatively, the format may be set with the fmt keyword, e.g. fmt=:png.   (http://docs.generic-mapping-tools.org/latest/psconvert.html#t)\nW | world_file :: [Type => Str]\nWrite a ESRI type world file suitable to make (e.g) .tif files be recognized as geotiff by   software that know how to do it.    (http://docs.generic-mapping-tools.org/latest/psconvert.html#w)\nkml :: [Type => Str | []]\nCreate a minimalist KML file that allows loading the image in GoogleEarth.   (http://docs.generic-mapping-tools.org/latest/psconvert.html#w)\nZ | delinputps :: [Type => Bool]\nRemove the input PostScript file(s) after the conversion.   (http://docs.generic-mapping-tools.org/latest/psconvert.html#z)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.regress","page":"Index","title":"GMT.regress","text":"regress(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nLinear regression of 1-D data sets.\n\nFull option list at regress\n\nParameters\n\nA | all_slopes :: [Type => Str | List]        Arg = minmaxinc\nInstead of determining a best-fit regression we explore the full range of regressions.   (http://docs.generic-mapping-tools.org/latest/gmtregress.html#a)\nC | confidence_level :: [Type => Int]      Arg = level\nSet the confidence level (in %) to use for the optional calculation of confidence   bands on the regression [95].   (http://docs.generic-mapping-tools.org/latest/gmtregress.html#c)\nE | regression_type :: [Type => Str]   Arg = xyor\nType of linear regression, i.e., select the type of misfit we should calculate.   (http://docs.generic-mapping-tools.org/latest/gmtregress.html#e)\nF | column_combination :: [Type => Str]   Arg = xymlc\nAppend a combination of the columns you wish returned;   (http://docs.generic-mapping-tools.org/latest/gmtregress.html#f)\nN | norm :: [Type => Str | Int]          Arg = 12rw\nSelects the norm to use for the misfit calculation.   (http://docs.generic-mapping-tools.org/latest/gmtregress.html#n)\nS | restrict :: [Type => Str | []]        Arg = r\nRestricts which records will be output.   (http://docs.generic-mapping-tools.org/latest/gmtregress.html#s)\nT | equi_space :: [Type => Str | List]     Arg = minmaxinc+an or filelist\nEvaluate the best-fit regression model at the equidistant points implied by the arguments.   (http://docs.generic-mapping-tools.org/latest/gmtregress.html#t)\nW | weighted :: [Type => Str | []]     Arg = wxyr\nSpecifies weighted regression and which weights will be provided.   (http://docs.generic-mapping-tools.org/latest/gmtregress.html#w)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.rose","page":"Index","title":"GMT.rose","text":"rose(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads (length,azimuth) pairs and plot a windrose diagram (polar histograms).\n\nFull option list at psrose\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nA | sector :: [Type => Str | Number]\n\nGives the sector width in degrees for sector and rose diagram.\n(http://docs.generic-mapping-tools.org/latest/rose.html#a)\n\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | color :: [Type => Str | GMTcpt]\n\nGive a CPT. The mid x-value for each bar is used to look-up the bar color.\n(http://docs.generic-mapping-tools.org/latest/rose.html#c)\n\nE | vectors :: [Type => Str]\n\nPlot vectors showing the principal directions given in the mode_file file.\n(http://docs.generic-mapping-tools.org/latest/rose.html#e)\n\nD | shift :: [Type => Bool]\n\nShift sectors so that they are centered on the bin interval (e.g., first sector is centered on 0 degrees).\n(http://docs.generic-mapping-tools.org/latest/rose.html#d)\n\nF | no_scale :: [Type => Bool]\n\nDo not draw the scale length bar [Default plots scale in lower right corner].\n(http://docs.generic-mapping-tools.org/latest/rose.html#f)\n\nG | fill :: [Type => Str | Number]\n\nSelects shade, color or pattern for filling the sectors [Default is no fill].\n(http://docs.generic-mapping-tools.org/latest/rose.html#g)\n\nI | inquire :: [Type => Bool]\n\nInquire. Computes statistics needed to specify a useful -R. No plot is generated.\n(http://docs.generic-mapping-tools.org/latest/rose.html#i)\n\nL | labels :: [Type => Str | Number]\n\nSpecify labels for the 0, 90, 180, and 270 degree marks.\n(http://docs.generic-mapping-tools.org/latest/rose.html#l)\n\nM | vector_params :: [Type => Str]\n\nUsed with -C to modify vector parameters.\n(http://docs.generic-mapping-tools.org/latest/rose.html#m)\n\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nQ | alpha :: [Type => Str | []]\n\nSets the confidence level used to determine if the mean resultant is significant.\n(http://docs.generic-mapping-tools.org/latest/rose.html#q)\n\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | norm | normalize :: [Type => Bool]\n\nSpecifies radius of plotted circle (append a unit from c|i|p).\n(http://docs.generic-mapping-tools.org/latest/rose.html#s)\n\nT | orientation :: [Type => Bool]\n\nSpecifies that the input data are orientation data (i.e., have a 180 degree ambiguity)\ninstead of true 0-360 degree directions [Default].\n(http://docs.generic-mapping-tools.org/latest/rose.html#t)\n\nW | pen :: [Type => Str | Tuple]\n\nSet pen attributes for sector outline or rose plot. [Default is no outline].\n(http://docs.generic-mapping-tools.org/latest/rose.html#w)\n\nZ | scale :: [Type => Str]\n\nMultiply the data radii by scale.\n(http://docs.generic-mapping-tools.org/latest/rose.html#z)\n\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.round_datetime-Tuple{Tuple{Dates.DateTime, Dates.DateTime}}","page":"Index","title":"GMT.round_datetime","text":"Round a Vector or Tuple (2 elements) of DateTime type to a nearest nice number to use in plot limits\n\n\n\n\n\n","category":"method"},{"location":"#GMT.sample1d","page":"Index","title":"GMT.sample1d","text":"sample1d(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nResample 1-D table data using splines\n\nFull option list at sample1d\n\nParameters\n\nA | resample :: [Type => Str]        Arg = fpmrR\nFor track resampling (if -T…unit is set) we can select how this is to be performed.   (http://docs.generic-mapping-tools.org/latest/sample1d.html#a)\nF | interp_type :: [Type => Str]   Arg = lacnsp+1+2\nChoose from l (Linear), a (Akima spline), c (natural cubic spline), and n (no interpolation:   nearest point) [Default is Akima].   (http://docs.generic-mapping-tools.org/latest/sample1d.html#f)\nN | time_col :: [Type => Int]      Arg = t_col\nIndicates which column contains the independent variable (time). The left-most column   is # 0, the right-most is # (n_cols - 1). [Default is 0].   (http://docs.generic-mapping-tools.org/latest/sample1d.html#n)\nT | inc | range :: [Type => List | Str]     Arg = minmaxinc+an or filelist\nEvaluate the best-fit regression model at the equidistant points implied by the arguments.   (http://docs.generic-mapping-tools.org/latest/sample1d.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | weights_col :: [Type => Int]     Arg = w_col\nSets the column number of the weights to be used with a smoothing cubic spline. Requires Fs. (GMT6.1)   (http://docs.generic-mapping-tools.org/latest/sample1d.html#w)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.scatter","page":"Index","title":"GMT.scatter","text":"scatter(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads (x,y) pairs and plot symbols at those locations on a map. This module is a subset of plot to make it simpler to draw scatter plots. So many of its (fine) controling parameters are not listed here. For a finer control, user should consult the plot module.\n\nParameters\n\nG | fill | markerfacecolor :: [Type => Str]\nSelect color or pattern for filling of symbols or polygons.   (http://docs.generic-mapping-tools.org/latest/plot.html#g)\nN | no_clip :: [Type => Str | []]\nDo NOT clip symbols that fall outside map border    (http://docs.generic-mapping-tools.org/latest/plot.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nS :: [Type => Str]\nPlot symbols (including vectors, pie slices, fronts, decorated or quoted lines).    (http://docs.generic-mapping-tools.org/latest/plot.html#s)\nAlternatively select a sub-set of symbols using the aliases: symbol or marker and values:\n-, x_dash\n+, plus\na, *, star\nc, circle\nd, diamond\ng, octagon\nh, hexagon\ni, v, inverted_tri\nn, pentagon\np, ., point\nr, rectangle\ns, square\nt, ^, triangle\nx, cross\n\n+ **y**, **y_dash**\n\nand select their sizes with the **markersize** or **size** keyword [default is 8p].\nThe marker size can be a scalar or a vector with same size numeber of rows of data. Units are\npoints unless specified otherwise with (for example for cm) *par=(PROJ_LENGTH_UNIT=:c,)*\n\nW | pen | markeredgecolor | mec :: [Type => Str]\nSet pen attributes for lines or the outline of symbols   (http://docs.generic-mapping-tools.org/latest/plot.html#w)\n\nFull man page GMT man page\n\n\n\n\n\n","category":"function"},{"location":"#GMT.solar","page":"Index","title":"GMT.solar","text":"solar(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nCalculate and plot the day-night terminator and the civil, nautical and astronomical twilights.\n\nFull option list at solar\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | formated :: [Type => Bool]\n(http://docs.generic-mapping-tools.org/latest/solar.html#c)\nG | fill :: [Type => Str | Number]\n(http://docs.generic-mapping-tools.org/latest/solar.html#g)\nI | sun :: [Type => Bool | Tuple | NamedTuple]\n(http://docs.generic-mapping-tools.org/latest/solar.html#i)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nM | dump :: [Type => Bool]\n(http://docs.generic-mapping-tools.org/latest/solar.html#m)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nN | invert :: [Type => Bool]\n(http://docs.generic-mapping-tools.org/latest/solar.html#n)\nT | terminators :: [Type => Bool | Tuple | NamedTuple]\n(http://docs.generic-mapping-tools.org/latest/solar.html#t)\nW | pen :: [Type => Str | Tuple]\n(http://docs.generic-mapping-tools.org/latest/solar.html#w)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\no | outcols | outcol :: [Type => Str]     Arg = cols\nSelect specific data columns for primary output, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#ocols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.spectrum1d","page":"Index","title":"GMT.spectrum1d","text":"gmtspectrum1d(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nCompute auto- [and cross- ] spectra from one [or two] time-series.\n\nFull option list at spectrum1d\n\nParameters\n\nS | size :: [Type => Str]        Arg = segment_size\nsegment_size is a radix-2 number of samples per window for ensemble averaging.   (http://docs.generic-mapping-tools.org/latest/spectrum1d.html#s)\nC | response_fun :: [Type => Str | []]        Arg = xycnpago\nRead the first two columns of input as samples of two time-series, X(t) and Y(t).   Consider Y(t) to be the output and X(t) the input in a linear system with noise.   (http://docs.generic-mapping-tools.org/latest/spectrum1d.html#c)\nD | sample_dist :: [Type => Number]   Arg = dt\nSet the spacing between samples in the time-series [Default = 1].   (http://docs.generic-mapping-tools.org/latest/spectrum1d.html#d)\nL | leave_trend :: [Type => Str | []]     Arg = hm\nLeave trend alone. By default, a linear trend will be removed prior to the transform.   (http://docs.generic-mapping-tools.org/latest/spectrum1d.html#l)\nN | time_col :: [Type => Int]      Arg = t_col\nIndicates which   (http://docs.generic-mapping-tools.org/latest/spectrum1d.html#n)\nT :: [Type => Bool]\nDisable the writing of a single composite results file to stdout.   (http://docs.generic-mapping-tools.org/latest/spectrum1d.html#t)\nW | wavelength :: [Type => Bool | Str]\nWrite Wavelength rather than frequency in column 1 of the output file[s] [Default = frequency, (cycles / dt)].   (http://docs.generic-mapping-tools.org/latest/spectrum1d.html#w)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nwrite | |> :: [Type => Str]     Arg = fname\nSave result to ASCII file instead of returning to a Julia variable. Give file name as argument.   Use the bo option to save as a binary file.\nappend :: [Type => Str]     Arg = fname\nAppend result to an existing file named fname instead of returning to a Julia variable.   Use the bo option to save as a binary file.\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.sphdistance","page":"Index","title":"GMT.sphdistance","text":"sphdistance(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nCreate Voronoi distance, node, or natural nearest-neighbor grid on a sphere\n\nFull option list at sphdistance\n\nParameters\n\nC | save_mem :: [Type => Bool]\nFor large data sets you can save some memory (at the expense of more processing).   (http://docs.generic-mapping-tools.org/latest/sphdistance.html#a)\nD | duplicates :: [Type => Bool]\nDelete any duplicate points [Default assumes there are no duplicates].   (http://docs.generic-mapping-tools.org/latest/sphdistance.html#d)\nE | what_quantity :: [Type => Str]   Arg = dnzdist\nSpecify the quantity that should be assigned to the grid nodes.   (http://docs.generic-mapping-tools.org/latest/sphdistance.html#e)\nG | grid | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = sphdistance(....) form.   (http://docs.generic-mapping-tools.org/latest/sphdistance.html#g)\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/sphdistance.html#i)\nL | dist_unit :: [Type => Str]      Arg = defkMnu\nSpecify the unit used for distance calculations.   (http://docs.generic-mapping-tools.org/latest/sphdistance.html#l)\nN | nodes :: [Type => Str]      Arg = nodes\nRead the information pertaining to each Voronoi polygon (the unique node lon, lat and polygon area)   from a separate file.   (http://docs.generic-mapping-tools.org/latest/sphdistance.html#n)\nQ | voronoi :: [Type => Str]     Arg = voronoifile\nAppend the name of a file with pre-calculated Voronoi polygons.   (http://docs.generic-mapping-tools.org/latest/sphdistance.html#q)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.sphinterpolate","page":"Index","title":"GMT.sphinterpolate","text":"sphinterpolate(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nSpherical gridding in tension of data on a sphere\n\nFull option list at sphinterpolate\n\nParameters\n\nD | duplicates :: [Type => Bool]\nDelete any duplicate points [Default assumes there are no duplicates].   (http://docs.generic-mapping-tools.org/latest/sphinterpolate.html#d)\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = sphinterpolate(....) form.   (http://docs.generic-mapping-tools.org/latest/sphinterpolate.html#g)\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/sphinterpolate.html#i)\nQ | tension :: [Type => Number | Str]     Arg = modeoptions\nSpecify one of four ways to calculate tension factors to preserve local shape properties or satisfy arc constraints.   (http://docs.generic-mapping-tools.org/latest/sphinterpolate.html#q)\nT | var_tension :: [Type => Bool | Str]\nUse variable tension (ignored with -Q0 constant\nZ | scale :: [Type => Bool | Str]\nBefore interpolation, scale data by the maximum data range [no scaling].   (http://docs.generic-mapping-tools.org/latest/sphinterpolate.html#z)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.sphtriangulate","page":"Index","title":"GMT.sphtriangulate","text":"sphtriangulate(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nDelaunay or Voronoi construction of spherical lon,lat data\n\nFull option list at sphtriangulate\n\nParameters\n\nA | area :: [Type => Bool]\nCompute the area of the spherical triangles (Qd) or polygons (Qv) and write the areas in the output segment headers   (http://docs.generic-mapping-tools.org/latest/sphtriangulate.html#a)\nC | save_mem :: [Type => Bool]\nFor large data sets you can save some memory (at the expense of more processing).   (http://docs.generic-mapping-tools.org/latest/sphtriangulate.html#c)\nD | duplicates | skip :: [Type => Bool]\nDelete any duplicate points [Default assumes there are no duplicates].   (http://docs.generic-mapping-tools.org/latest/sphtriangulate.html#d)\nL | unit :: [Type => Str]          Arg = efkmnud\nSpecify the unit used for distance and area calculations.   (http://docs.generic-mapping-tools.org/latest/sphtriangulate.html#l)\nN | nodes :: [Type => Str]         Arg = file\nWrite the information pertaining to each polygon to a separate file.   (http://docs.generic-mapping-tools.org/latest/sphtriangulate.html#n)\nQ | voronoi :: [Type => Str]     Arg = dv\nAppend d for Delaunay triangles or v for Voronoi polygons [Delaunay].   (http://docs.generic-mapping-tools.org/latest/sphtriangulate.html#q)\nT :: [Type => Bool | Str]\nWrite the unique arcs of the construction [Default writes fillable triangles or polygons].   When used with -A we store arc length in the segment header in chosen unit.   (http://docs.generic-mapping-tools.org/latest/sphtriangulate.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.subplot","page":"Index","title":"GMT.subplot","text":"subplot(fim=nothing; kwargs...)\n\nManage figure subplot configuration and selection.\n\nFull option list at subplot\n\nParameters\n\ngrid :: [Type => Str | Tuple | Array]\nSpecifies the number of rows and columns of subplots. Ex grid=(2,3)\nF | dims | dimensions | size | sizes :: [Type => Str | Tuple, NamedTuple]\nSpecify the dimensions of the figure.   -F\nA | autolabel | fixedlabel :: [Type => Str | number]\nSpecify automatic tagging of each subplot. This sets the tag of the first, top-left subplot and others follow sequentially.   -A\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | clearance :: [Type => Str | number]\nReserve a space of dimension clearance between the margin and the subplot on the specified side. Settings specified under begin directive apply to all panels.   -C\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nM | margin | margins :: [Type => Str]\nThe margin space that is added around each subplot beyond the automatic space allocated for tick marks, annotations, and labels.   -M\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nSC | SR | col_axes | row_axes :: [Type => Str | NamedTuple]\nSet subplot layout for shared axes. Set separately for rows (SR) and columns (SC).   -S\nT | title :: [Type => Str]\nWhile individual subplots can have titles, the entire figure may also have a overarching title.   -T\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.surface","page":"Index","title":"GMT.surface","text":"surface(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads randomly-spaced (x,y,z) triples and produces a binary grid file of gridded values z(x,y) by solving:\n\n\t(1 - T) * L (L (z)) + T * L (z) = 0\n\nFull option list at surface\n\nParameters\n\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/surface.html#i)\nA | aspect_ratio :: [Type => Number]\nAspect ratio. If desired, grid anisotropy can be added to the equations.   (http://docs.generic-mapping-tools.org/latest/surface.html#a)\nC | convergence :: [Type => Number]\nConvergence limit. Iteration is assumed to have converged when the maximum absolute change in any   grid value is less than convergence_limit.   (http://docs.generic-mapping-tools.org/latest/surface.html#c)\nD | breakline :: [Type => String | NamedTuple]     Arg = breakline[+z[level]] | (data=Array, [zlevel=x])\nUse xyz data in the breakline file as a ‘soft breakline’, that is a line whose vertices will be used to   constrain the nearest grid nodes without any further interpolation.   (http://docs.generic-mapping-tools.org/latest/surface.html#d)\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = surface(....) form.   (http://docs.generic-mapping-tools.org/latest/surface.html#g)\nLl | lower :: [Type => Str | Number]\nImpose limits on the output solution. lower sets the lower bound. lower can be the name of a grid   file with lower bound values, a fixed value, d to set to minimum input value,   (http://docs.generic-mapping-tools.org/latest/surface.html#l)\nLu | upper :: [Type => Str | Number]\n(http://docs.generic-mapping-tools.org/latest/surface.html#l)\nM | mask :: [Type => Number]      Arg = max_radius\nAfter solving for the surface, apply a mask so that nodes farther than max_radius away from a data constraint is set to NaN.   (http://docs.generic-mapping-tools.org/latest/surface.html#m)\nN | max_iter :: [Type => Number]\nNumber of iterations. Iteration will cease when convergencelimit is reached or when number of   iterations reaches maxiterations.   (http://docs.generic-mapping-tools.org/latest/surface.html#n)\nQ | suggest :: [Type => Bool]\nSuggest grid dimensions which have a highly composite greatest common factor.   (http://docs.generic-mapping-tools.org/latest/surface.html#q)\nS | search_radius :: [Type => Number | Str]  \nSets the resolution of the projected grid that will be created.   (http://docs.generic-mapping-tools.org/latest/surface.html#s)\nT | tension :: [Type => Number | Str]\nTension factor[s]. These must be between 0 and 1.   (http://docs.generic-mapping-tools.org/latest/surface.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nZ | over_relaxation :: [Type => Str | GMTgrid]\nOver-relaxation factor. This parameter is used to accelerate the convergence; it is a number between 1 and 2.   (http://docs.generic-mapping-tools.org/latest/surface.html#z)\na | aspatial :: [Type => Str]\t\t\tArg = col=name\nControl how aspatial data are handled in GMT during input and output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#aspatial-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.ternary","page":"Index","title":"GMT.ternary","text":"ternary(cmd0=\"\", arg1=nothing; image=false, clockwise=false, kwargs...)\n\nReads (a,b,c[,z]) records from table [or file] and plots image and symbols at those locations on a ternary diagram.\n\nB | frame :: [Type => NamedTuple | Str] –\nFor ternary diagrams the three sides are referred to as a (bottom), b (right), and c (left). The default is to   annotate and draw grid lines but without labeling the axes. But since labeling is a very important feature, you   can use the labels option that take as argument a 3 elements Tuple with the labels of the 3 axes. Further   control on annotations and grid spacing (on/off) is achieved by using the frame=(annot=?, grid=?, alabel=?, blabel=?,   clabel=?, suffix=?) form. Note that not all options of the general frame options are accepted in this module and for more   elaborated frame option selection you will have to resort to the pure GMT syntax in the form frame=\"<arg> <arg> <arg>\"   (http://docs.generic-mapping-tools.org/latest/psternary.html#b)\nC | color | cmap :: [Type => Str]\t\tArg = cpt master+izinc color1color2*color3*\nGive a CPT name or specify -Ccolor1,color2[,color3,...] to build a linear continuous CPT from those   colors automatically.   (http://docs.generic-mapping-tools.org/latest/grdimage.html#c)\nG | fill :: [Type => Str] –\nSelect color or pattern for filling the bars   (http://docs.generic-mapping-tools.org/latest/psternary.html#c)\nL | vertex_labels :: [Type => Str | Tuple of strings] –\t\tArg = a/b/c\nSet the labels for the three diagram vertices where the component is 100% [none].    (http://docs.generic-mapping-tools.org/latest/psternary.html#l)\nM | dump :: [Type => Str]\nDumps the converted input (a,b,c[,z]) records to Cartesian (x,y,[,z]) records, where x, y   are normalized coordinates on the triangle (i.e., 0–1 in x and 0–sqrt(3)/2 in y). No plotting occurs.   (http://docs.generic-mapping-tools.org/latest/coast.html#m)\nN | no_clip | noclip :: [Type => Str or []]\nDo NOT clip symbols that fall outside map border    (http://docs.generic-mapping-tools.org/latest/psternary.html#n)\nR | region | limits :: [Type => Tuple | Str]\nGive the min and max limits for each of the three axis a, b, and c. Default is (0,100,0,100,0,100)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nS | symbol :: [Type => Str]\nPlot individual symbols in a ternary diagram. If S is not given then we will instead plot lines   (requires pen) or polygons (requires color or fill).    (http://docs.generic-mapping-tools.org/latest/psternary.html#s)\nAlternatively select a sub-set of symbols using the aliases: symbol or marker and values:\n-, x_dash\n+, plus\na, *, star\nc, circle\nd, diamond\ng, octagon\nh, hexagon\ni, v, inverted_tri\nn, pentagon\np, ., point\nr, rectangle\ns, square\nt, ^, triangle\nx, cross\ny, y_dash\nand select their sizes with the markersize or size keyword [default is 8p].   The marker size can be a scalar or a vector with same size numeber of rows of data. Units are   points unless specified otherwise with (for example for cm) par=(PROJLENGTHUNIT=:c,)\t\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nW | pen :: [Type => Str | Number]\nSets the attributes for the particular line.   (http://docs.generic-mapping-tools.org/latest/psternary.html#w)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nq | inrow | inrows :: [Type => Str]       Arg = iorows+ccol+afs\nSelect specific data rows to be read (-qi [Default]) or written (-qo) [all].    (http://docs.generic-mapping-tools.org/latest/gmt.html#q-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\n\nOther than the above options, the kwargs input accepts still the following options\n\nimage: - Fills the ternary plot with an image computed automatically with grdimage from a grid interpolated with surface\ncontour: - This option works in two different ways. If used together with image it overlays a contour              by doing a call to grdcontour. However, if used alone it will call contour to do the contours.              The difference is important because this option can be used in default mode with contour=true              where the number and annotated contours is picked automatically, or the use can exert full control              by passing as argument a NamedTuple with all options appropriated to that module. e.g.              contour=(cont=10, annot=20, pen=0.5)\ncontourf: - Works a bit like the standalone contour. If used with contourf=true call make a filled contour               using automatic parameters. The form contourf=(...) let us selects options of the contourf module.\nclockwise: - Set it to true to indicate that positive axes directions be clock-wise                [Default lets the a, b, c axes be positive in a counter-clockwise direction].\n\n\n\n\n\n","category":"function"},{"location":"#GMT.text","page":"Index","title":"GMT.text","text":"text(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nPlots text strings of variable size, font type, and orientation. Various map projections are provided, with the option to draw and annotate the map boundaries.\n\nFull option list at pstext\n\nParameters\n\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nA | azimuths :: [Type => Bool]\nAngles are given as azimuths; convert them to directions using the current projection.   (http://docs.generic-mapping-tools.org/latest/text.html#a)\nC | clearance :: [Type => Str]\nSets the clearance between the text and the surrounding box [15%].   (http://docs.generic-mapping-tools.org/latest/text.html#c)\nD | offset :: [Type => Str]\nOffsets the text from the projected (x,y) point by dx,dy [0/0].   (http://docs.generic-mapping-tools.org/latest/text.html#d)\nF | attrib :: [Type => Str | Tuple]\nSpecify up to three text attributes (font, angle, and justification).   (http://docs.generic-mapping-tools.org/latest/text.html#f)\nG | fill :: [Type => Str | Number]\nSets the shade or color used for filling the text box [Default is no fill].   (http://docs.generic-mapping-tools.org/latest/text.html#g)\nJz | zscale | zsize :: [Type => String]\nL | list :: [Type => Bool]\nLists the font-numbers and font-names available, then exits.   (http://docs.generic-mapping-tools.org/latest/text.html#l)\nM | paragraph :: [Type => Str | []]\nParagraph mode.   (http://docs.generic-mapping-tools.org/latest/text.html#m)\nN | no_clip | noclip :: [Type => Str | []]\nDo NOT clip text at map boundaries.   (http://docs.generic-mapping-tools.org/latest/text.html#n)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nQ | change_case :: [Type => Str]\nChange all text to either lower or upper case.   (http://docs.generic-mapping-tools.org/latest/text.html#q)\nS | shade :: [Type => Str | Tuple | Bool]\t\tArg = dxdyshade\nPlot an offset background shaded region beneath the text box (GMT6.2).   (http://docs.generic-mapping-tools.org/latest/text.html#s)\nT | text_box :: [Type => Str]\nSpecify the shape of the textbox when using G and/or W.   (http://docs.generic-mapping-tools.org/latest/text.html#t)\nW | pen :: [Type => Str]\nSets the pen used to draw a rectangle around the text string.   (http://docs.generic-mapping-tools.org/latest/text.html#w)\nZ | threeD :: [Type => Str]\nFor 3-D projections: expect each item to have its own level given in the 3rd column.   (http://docs.generic-mapping-tools.org/latest/text.html#z)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\na | aspatial :: [Type => Str]\t\t\tArg = col=name\nControl how aspatial data are handled in GMT during input and output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#aspatial-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\ng | gap :: [Type => Str]           Arg = axydXYDcolz+-gapu\nExamine the spacing between consecutive data points in order to impose breaks in the line.   (http://docs.generic-mapping-tools.org/latest/gmt.html#g-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.texture_img-Tuple{GMTgrid}","page":"Index","title":"GMT.texture_img","text":"texture_img(G::GMTgrid; detail=1.0, contrast=2.0, uint16=false)\n\nCompute the Texture Shading calling functions from the software from Leland Brown at http://www.textureshading.com/Home.html\n\ndetail is the amount of texture detail. Lower values of detail retain more elevation information, giving more sense of the overall, large structures and elevation trends in the terrain, at the expense\n\nof fine texture detail. Higher detail enhances the texture but gives an overall \"flatter\" general appearance,\nwith elevation changes and large structure less apparent.\n\ncontrast is a parameter called “vertical enhancement.” Higher numbers increase contrast in the midtones, but may lose detail in the lightest and darkest features. Lower numbers highlight only the sharpest ridges\n\nand deepest canyons but reduce contrast overall.\n\nuint16 controls if output is a UIn16 or a UInt8 image (the dafault). Note that the original code writes only UInt16 images bur if we want to combine this with with the hillshade computed with gdaldem, a UInt8\n\nimage is more handy.\n\nReturns\n\nA UInt8 (or 16) GMT Image\n\n\n\n\n\n","category":"method"},{"location":"#GMT.theme","page":"Index","title":"GMT.theme","text":"theme(name; kwrgs...)\n\nOffer themes support. NAME is the theme name. So far the three options are:\n\nmodern: - This is the default theme (same as GMT modern theme but with thinner FRAME_PEN [0.75p])\nclassic: - The GMT classic theme\ndark: - A modern theme variation with dark background.\nA0|2[XY|XX|YY][atg][ag][g][H][V][NT|nt][ITit][Graph][Dark] Make a composition of these to select a theme.  The main condition is that it starts with an A (Annotate). Hence A2 means annotate two axis  and A0 means no axes at all. XY means to plot only left and bottom axes, YY only left and right  and XX bottom and top. atg (or afg) means annotate, tick and grid lines. ag does not tick.  H and V means grid lines will only be horizontal or vertical. Note, these require atg or ag.  NT stands for not ticks at all and IT plots the ticks inside the axes. Graph adds a vector and  to the end of each axis (sets XY), and Dark put the background in dark mode.\nExample: A2YYg -> plot left and right axes (only) and add grid lines.\nExample: A2Graph -> plot left and right axes (only) and adds arrows at the end of them\n\nOn top of the modern mode variations (so far dark only) one can set the following kwargs options:\n\nnoticks or no_ticks: Axes will have annotations but no tick marks\ninner_ticks or innerticks: - Ticks will be drawn inside the axes instead of outside.\ngray_grid or graygrid: - When drawing grid line use gray instead of black\nsave: - Save the name in the directory printed in shell by gmt --show-userdir and make it permanent.\nreset: - Remove the saved theme name and return to the default modern theme.\n\nNote: Except save and reset, the changes operated by the kwargs are temporary and operate only until an image is show(n) or saved.\n\nThis function can be called alone, e.g. theme(dark) or as an option in the plot() module.\n\n\n\n\n\n","category":"function"},{"location":"#GMT.trend1d","page":"Index","title":"GMT.trend1d","text":"trend1d(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nFit a [weighted] [robust] polynomial/Fourier model for y = f(x) to xy[w] data.\n\nFull option list at trend1d\n\nParameters\n\nF | output :: [Type => Str]   Arg = xymrwpPc\nSpecify up to five letters from the set {x y m r w} in any order to create columns of output.    (http://docs.generic-mapping-tools.org/latest/trend1d.html#f)\nN | n_model :: [Type => Str]      Arg = pPfFcCsSxn+llength+oorigin+r\nSpecify Specify the number of terms in the model, n_model, and append +r to do a robust fit. E.g., a robust bilinear model is -N4+r.   (http://docs.generic-mapping-tools.org/latest/trend1d.html#n)\nC | condition_number :: [Type => Number]   Arg = condition_number\nSet the maximum allowed condition number for the matrix solution.   (http://docs.generic-mapping-tools.org/latest/trend1d.html#c)\nI | confidence_level :: [Type => Number | []]   Arg = confidence_level\nIteratively increase the number of model parameters, starting at one, until nmodel is reachedx   or the reduction in variance of the model is not significant at the confidencelevel level.   (http://docs.generic-mapping-tools.org/latest/trend1d.html#i)\nW | weights :: [Type => Str | []]     Arg = +s\nWeights are supplied in input column 3. Do a weighted least squares fit [or start with   these weights when doing the iterative robust fit].   (http://docs.generic-mapping-tools.org/latest/trend1d.html#w)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.trend2d","page":"Index","title":"GMT.trend2d","text":"trend2d(cmd0::String=\"\", arg1=nothing, kwargs...)\n\nFit a [weighted] [robust] polynomial model for z = f(x,y) to xyz[w] data.\n\nFull option list at trend2d\n\nParameters\n\nF | output :: [Type => Str]   Arg = xyzmrwp\nSpecify up to five letters from the set {x y m r w} in any order to create columns of output.    (http://docs.generic-mapping-tools.org/latest/trend2d.html#f)\nN | n_model :: [Type => Str]      Arg = n_model+r\nSpecify the number of terms in the model, n_model, and append +r to do a robust fit. E.g.,   a robust bilinear model is N=\"4+r\".   (http://docs.generic-mapping-tools.org/latest/trend2d.html#n)\nC | condition_number :: [Type => Number]   Arg = condition_number\nSet the maximum allowed condition number for the matrix solution.   (http://docs.generic-mapping-tools.org/latest/trend2d.html#c)\nI | confidence_level :: [Type => Number | []]   Arg = confidence_level\nIteratively increase the number of model parameters, starting at one, until nmodel is reachedx   or the reduction in variance of the model is not significant at the confidencelevel level.   (http://docs.generic-mapping-tools.org/latest/trend2d.html#i)\nW | weights :: [Type => Str | []]     Arg = +s\nWeights are supplied in input column 4. Do a weighted least squares fit [or start with   these weights when doing the iterative robust fit].   (http://docs.generic-mapping-tools.org/latest/trend2d.html#w)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nb | binary :: [Type => Str]\n(http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nd | nodata :: [Type => Str or Number]\t\tArg = ionodata\nControl how user-coded missing data values are translated to official NaN values in GMT.   (http://docs.generic-mapping-tools.org/latest/gmt.html#d-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.triangulate","page":"Index","title":"GMT.triangulate","text":"triangulate(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads one or more ASCII [or binary] files (or standard input) containing x,y[,z] and performs Delaunay triangulation, i.e., it find how the points should be connected to give the most equilateral triangulation possible. \n\nFull option list at triangulate\n\nParameters\n\nC | slope_grid :: [Type => Number]\nRead a slope grid (in degrees) and compute the propagated uncertainty in the   bathymetry using the CURVE algorithm   (http://docs.generic-mapping-tools.org/latest/triangulate.html#a)\nD | derivatives :: [Type => Str]\nTake either the x- or y-derivatives of surface represented by the planar facets (only used when G is set).   (http://docs.generic-mapping-tools.org/latest/triangulate.html#d)\nE | empty :: [Type => Str | Number]\nSet the value assigned to empty nodes when G is set [NaN].   (http://docs.generic-mapping-tools.org/latest/triangulate.html#e)\nG | grid | outgrid :: [Type => Str | []]\nUse triangulation to grid the data onto an even grid (specified with R I).   Append the name of the output grid file.   (http://docs.generic-mapping-tools.org/latest/triangulate.html#g)\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/triangulate.html#i)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nM | network :: [Type => Bool]\nOutput triangulation network as multiple line segments separated by a segment header record.   (http://docs.generic-mapping-tools.org/latest/triangulate.html#m)\nN | ids :: [Type => Bool]\nUsed in conjunction with G to also write the triplets of the ids of all the Delaunay vertices   (http://docs.generic-mapping-tools.org/latest/triangulate.html#n)\nQ | voronoi :: [Type => Str | []]\nOutput the edges of the Voronoi cells instead Default is Delaunay triangle edges\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nS | triangles :: [Type => Bool]  \nOutput triangles as polygon segments separated by a segment header record. Requires Delaunay triangulation.   (http://docs.generic-mapping-tools.org/latest/triangulate.html#s)\nT | edges :: [Type => Bool]\nOutput edges or polygons even if gridding has been selected with the G option   (http://docs.generic-mapping-tools.org/latest/triangulate.html#t)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nZ | xyz | triplets :: [Type => Bool]\n(http://docs.generic-mapping-tools.org/latest/triangulate.html#z)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\nbo | binary_out :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#bo-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.velo","page":"Index","title":"GMT.velo","text":"velo(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nPlot velocity vectors, crosses, and wedges.\n\nFull option list at velo\n\n    velo(mat2ds([0. -8 0 0 4 6 0.5; -8 5 3 3 0 0 0.5], [\"4x6\", \"3x3\"]), pen=(0.6,:red), fill_wedges=:green, outlines=true, Se=\"0.2/0.39/18\", arrow=\"0.3c+p1p+e+gred\", region=(-15,10,-10,10), show=1)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.vlines","page":"Index","title":"GMT.vlines","text":"vlines(arg; decorated=(...), kwargs...)\n\nPlots one or a collection of vertical lines with eventual decorations\n\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nW | pen | line_attrib :: [Type => Str]\nSet pen attributes for the horizontal lines   (http://docs.generic-mapping-tools.org/latest/plot.html#w)\n\nExample:\n\nplot(rand(5,3), region=[0,1,0,1])\nvlines!([0.2, 0.6], pen=(1, :red), show=true)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.wiggle","page":"Index","title":"GMT.wiggle","text":"wiggle(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nReads (length,azimuth) pairs from file and plot a windwiggle diagram.\n\nFull option list at pswiggle\n\nParameters\n\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nZ | scale :: [Type => Number | Str]\nGives anomaly scale in data-units/distance-unit.   (http://docs.generic-mapping-tools.org/latest/wiggle.html#a)\nA | azimuth :: [Type => Str | number]\nSets the preferred positive azimuth. Positive wiggles will “gravitate” towards that direction.   (http://docs.generic-mapping-tools.org/latest/wiggle.html#a)\nB | frame | axis | xaxis yaxis:: [Type => Str] \nSet map boundary frame and axes attributes.   (http://docs.generic-mapping-tools.org/latest/gmt.html#b-full)\nC | center :: [Type => Number]\nSubtract center from the data set before plotting [0].   (http://docs.generic-mapping-tools.org/latest/wiggle.html#c)\nD | scale_bar :: [Type => Str]\nDefines the reference point on the map for the vertical scale bar using one of four coordinate systems.   (http://docs.generic-mapping-tools.org/latest/wiggle.html#d)\nF | box :: [Type => Str]\nWithout further options, draws a rectangular border around the vertical scale bar.   (http://docs.generic-mapping-tools.org/latest/wiggle.html#f)\nG | fill :: [Type => Number | Str]\nSet fill shade, color or pattern for positive and/or negative wiggles [Default is no fill].   (http://docs.generic-mapping-tools.org/latest/wiggle.html#g)\nI | fixed_azim :: [Type => Number]\nSet a fixed azimuth projection for wiggles [Default uses track azimuth, but see -A].   (http://docs.generic-mapping-tools.org/latest/wiggle.html#i)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nP | portrait :: [Type => Bool or []]\nTell GMT to NOT draw in portrait mode (that is, make a Landscape plot)\nT | track :: [Type => Number or Str | Tuple | []]\nDraw track [Default is no track]. Append pen attributes to use [Defaults: width = 0.25p, color =   black, style = solid].   (http://docs.generic-mapping-tools.org/latest/wiggle.html#t)\nW | pen :: [Type => Number | Str | tuple | []]\nSpecify outline pen attributes [Default is no outline].   (http://docs.generic-mapping-tools.org/latest/wiggle.html#w)\nU | time_stamp | timestamp :: [Type => Str or Bool or []]\tArg = justdxdyclabel\nDraw GMT time stamp logo on plot.   (http://docs.generic-mapping-tools.org/latest/gmt.html#u-full)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nX | x_offset | xshift :: [Type => Str]     Arg = acfrx-shiftu\nY | y_offset | yshift :: [Type => Str]     Arg = acfry-shiftu\nShift plot origin relative to the current origin by (x-shift,y-shift) and optionally   append the length unit (c, i, or p).    (http://docs.generic-mapping-tools.org/latest/gmt.html#xy-full)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\np | view | perspective :: [Type => Str or List]   Arg = xyzazimelevzlevel+wlon0lat0z0+vx0y0\nSelects perspective view and sets the azimuth and elevation of the viewpoint [180/90].   (http://docs.generic-mapping-tools.org/latest/gmt.html#perspective-full)\nt | alpha | transparency :: [Type => Str]   Arg = transp\nSet PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].   (http://docs.generic-mapping-tools.org/latest/gmt.html#t-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.wkt2proj-Tuple{String}","page":"Index","title":"GMT.wkt2proj","text":"wkt2proj(wkt_str::String)\n\nConvert a WKT SRS string into the PROJ4 form.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.xy2lonlat-Tuple{Vector{var\"#s1665\"} where var\"#s1665\"<:Real, String}","page":"Index","title":"GMT.xy2lonlat","text":"xy2lonlat(xy::Matrix{<:Real}, s_srs::String; t_srs=::String=\"+proj=longlat +datum=WGS84\")\n\nor\n\nxy2lonlat(D::GMTdataset, s_srs::String; t_srs=::String=\"+proj=longlat +datum=WGS84\")\n\nComputes the inverse projection from XY to LonLat in the given projection. The output is assumed to be in WGS84. If that isn't right, pass the appropriate projection info via the t_srs option.\n\nParameters\n\nxy: The input data. It can be a Matrix, or a GMTdataset (or vector of it)\ns_srs:  The data projection system. This can be a PROJ4 or a WKT string\nt_srs:  The target SRS. If the default is not satisfactory, provide a new projection info (PROJ4 or WKT)\n\nReturns\n\nA Matrix if input is a Matrix or a GMTdadaset if input had that type\n\n\n\n\n\n","category":"method"},{"location":"#GMT.xyz2grd","page":"Index","title":"GMT.xyz2grd","text":"xyz2grd(cmd0::String=\"\", arg1=nothing; kwargs...)\n\nConvert data table to a grid file. \n\nFull option list at xyz2grd\n\nParameters\n\nI | inc | increment | spacing :: [Type => Str]\tArg = xincunit+enyincunit+en\nx_inc [and optionally y_inc] is the grid spacing. Optionally, append an increment unit.   (http://docs.generic-mapping-tools.org/latest/xyz2grd.html#i)\nR | region | limits :: [Type => Str or list or GMTgrid|image]\tArg = (xminxmaxyminymax)\nSpecify the region of interest. Set to data minimum BoundinBox if not provided.   (http://docs.generic-mapping-tools.org/latest/gmt.html#r-full)\nA | multiple_nodes :: [Type => Str]      Arg = [d|f|l|m|n|r|S|s|u|z]\nBy default we will calculate mean values if multiple entries fall on the same node.   Use A to change this behavior.   (http://docs.generic-mapping-tools.org/latest/xyz2grd.html#a)\nD | header :: [Type => Str]  Arg = [+xxname][+yyname][+zzname][+sscale][+ooffset][+ninvalid][+ttitle][+rremark]\nOutput edges   (http://docs.generic-mapping-tools.org/latest/xyz2grd.html#d)\nG | outgrid :: [Type => Str]\nOutput grid file name. Note that this is optional and to be used only when saving   the result directly on disk. Otherwise, just use the G = grdclip(....) form.   (http://docs.generic-mapping-tools.org/latest/xyz2grd.html#g)\nJ | proj | projection :: [Type => String]\nSelect map projection. Defaults to 14x9.5 cm with linear (non-projected) maps.   (http://docs.generic-mapping-tools.org/latest/gmt.html#j-full)\nS | swap :: [Type => Str | []]        Arg = [zfile]\nSwap the byte-order of the input only. No grid file is produced.   (http://docs.generic-mapping-tools.org/latest/xyz2grd.html#s)\nV | verbose :: [Type => Bool or Str]\t\tArg = level\nSelect verbosity level, which will send progress reports to stderr.   (http://docs.generic-mapping-tools.org/latest/gmt.html#v-full)\nZ | flags :: [Type => Str]\nRead a 1-column table. This assumes that all the nodes are present and sorted according to specified ordering convention contained in. flags.   (http://docs.generic-mapping-tools.org/latest/xyz2grd.html#z)\nbi | binary_in :: [Type => Str]\t\t\tArg = ncolstypew+L+B\nSelect native binary format for primary input (secondary inputs are always ASCII).   (http://docs.generic-mapping-tools.org/latest/gmt.html#bi-full)\ndi | nodata_in :: [Type => Str or Number]      Arg = nodata\nExamine all input columns and if any item equals nodata we interpret this value as a   missing data item and substitute the value NaN.   (http://docs.generic-mapping-tools.org/latest/gmt.html#di-full)\ne | pattern | find :: [Type => Str]        Arg = pattern  -eregexpi\nOnly accept ASCII data records that contains the specified pattern.   (http://docs.generic-mapping-tools.org/latest/gmt.html#e-full)\nf | colinfo | coltypes :: [Type => Str]        Arg = iocolinfo\nSpecify the data types of input and/or output columns (time or geographical data).   (http://docs.generic-mapping-tools.org/latest/gmt.html#f-full)\nh | header :: [Type => Str]        Arg = ion+c+d+rremark+ttitle\nPrimary input file(s) has header record(s).   (http://docs.generic-mapping-tools.org/latest/gmt.html#h-full)\ni | incols | incol :: [Type => Str]      Arg = cols+l+sscale+ooffset\nSelect specific data columns for primary input, in arbitrary order.   (http://docs.generic-mapping-tools.org/latest/gmt.html#icols-full)\nr | reg | registration :: [Type => Bool or []]\nForce pixel node registration [Default is gridline registration].   (http://docs.generic-mapping-tools.org/latest//gmt.html#r-full)\nw | wrap | cyclic :: [Type => Str or Number]  Arg = -n\nConvert input records to a cyclical coordinate.   (http://docs.generic-mapping-tools.org/latest/gmt.html#w-full)\nyx :: [Type => Str or Bool or []]     Arg = io\nSwap 1st and 2nd column on input and/or output.   (http://docs.generic-mapping-tools.org/latest/gmt.html#colon-full)\n\n\n\n\n\n","category":"function"},{"location":"#GMT.GMT","page":"Index","title":"GMT.GMT","text":"GMT manipulating geographic and Cartesian data sets (including filtering, trend fitting, gridding, projecting, etc.) and producing high quality illustrations.\n\nFull modules list and docs in terse GMT style at http://docs.generic-mapping-tools.org/latest/\n\nDocumentation for GMT.jl at https://www.generic-mapping-tools.org/GMT.jl/latest/\n\n\n\n\n\n","category":"module"},{"location":"#GMT.Drawing","page":"Index","title":"GMT.Drawing","text":"Submodule where the symbols of plot were elevated to the category of functions. The functions that are currently available are:\n\ncircle(x, y, diameter,    kw...)\ncross(x, y, diameter;     kw...)\ncustom(x, y, name, size;  kw...)\ndiamond(x, y, diameter;   kw...)\nhexagon(x, y, diameter;   kw...)\nitriangle(x, y, diameter; kw...)\nletter(x, y, size, str, font, just; kw...)\nminus(x, y, length;       kw...)\npentagon(x, y, diameter;  kw...)\nplus(x, y, diameter;      kw...)\nsquare(x, y, diameter;    kw...)\nstar(x, y, diameter;      kw...)\ntriangle(x, y, diameter;  kw...)\nydash(x, y, length;       kw...)\nbox(x, y, width, height;  kw...)\nrect(x, y, width, height; kw...)\nellipse(x, y, angle, majoraxis, minoraxis;     kw...)\nellipseAz(x, y, azimuth, majoraxis, minoraxis; kw...)\nrotrect(x, y, angle, width, height;     kw...)\nrotrectAz(x, y, azimuth, width, height; kw...)\nroundrect(x, y, width, height, radius;  kw...)\n\nFor all symbols, except box, diameter is the diametr of the circumscribing circle and x,y the coordinates of its center. box is the exception in that those are the coordinates of the lower left corner.\n\nThis submodule uses global variables to track the first, middle and last layers in the stack plot but in case of errors that track may be left in error state too. So, when one want to force the begining of a new figure use the kwarg first=true. Likewise, if we want to add to a previously, still open fig, use first=false.\n\nBy default the plot unites is cm but we can select points by doing units=:points. This takes care of setting the appropriate region (A4 by default) and fig scale. If other then A4 size is wished, use paper=:A3 (or any of the common paper sizes). When units is left to cm the normal paper size ruple applies (i.e. A4 for PS format or ~unlimitted for others.)\n\nThe kw... in the functions arguments are the normal kwargs that one can use in the plot module.\n\nExample, to draw a cute litte car:\n\nellipse(300,201,0, 200, 50, units=:points, fill=:purple, pen=1)\nellipse(340,206, 0,130, 66, fill=:purple, pen=1)\nellipse(318,222,0, 60, 26, fill=:blue)\nbox(200, 173, 205, 26, fill=:purple, pen=1)\ncircle(305,185,56, fill=:black)\ncircle(305,185,36, fill=:gray50)\ncircle(400,185,56, fill=:black)\ncircle(400,185,36, fill=:gray50, show=true)\n\n\n\n\n\n","category":"module"},{"location":"#GMT.Gdal.boundary-Tuple{GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.boundary","text":"boundary(geom; gdataset=false)\n\nParameters\n\ngeom: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngdataset: Returns a GDAL IGeometry even when input are GMTdataset or Matrix\n\nA new geometry object is created and returned containing the boundary of the geometry on which the method is invoked.\n\nReturns\n\nA GMT dataset when input is a Matrix or a GMT type (except if gdaset=true), or a GDAL IGeometry otherwise\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.buffer","page":"Index","title":"GMT.Gdal.buffer","text":"buffer(geom, dist::Real, quadsegs::Integer=30; gdataset=false)\n\nParameters\n\ngeom: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ndist: the buffer distance to be applied. Should be expressed into the   same unit as the coordinates of the geometry.\nquadsegs: the number of segments used to approximate a 90 degree (quadrant) of curvature.\ngdataset: Returns a GDAL IGeometry even when input is a GMTdataset or Matrix\n\nCompute buffer of geometry.\n\nBuilds a new geometry containing the buffer region around the geometry on which it is invoked. The buffer is a polygon containing the region within the buffer distance of the original geometry.\n\nSome buffer sections are properly described as curves, but are converted to approximate polygons. The quadsegs parameter can be used to control how many segments should be used to define a 90 degree curve - a quadrant of a circle. A value of 30 is a reasonable default. Large values result in large numbers of vertices in the resulting buffer geometry while small numbers reduce the accuracy of the result.\n\nReturns\n\nA GMT dataset when input is a Matrix or a GMT type (except if gdaset=true), or a GDAL IGeometry otherwise\n\n\n\n\n\n","category":"function"},{"location":"#GMT.Gdal.centroid-Tuple{GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.centroid","text":"centroid(geom; gdataset=false)\n\nParameters\n\ngeom: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngdataset: Returns a GDAL IGeometry even when input is a GMTdataset or Matrix\n\nCompute the geometry centroid.\n\nThe centroid is not necessarily within the geometry.\n\n(This method relates to the SFCOM ISurface::get_Centroid() method however the current implementation based on GEOS can operate on other geometry types such as multipoint, linestring, geometrycollection such as multipolygons. OGC SF SQL 1.1 defines the operation for surfaces (polygons). SQL/MM-Part 3 defines the operation for surfaces and multisurfaces (multipolygons).)\n\nReturns\n\nA GMT dataset when input is a Matrix or a GMT type (except if gdaset=true), or a GDAL IGeometry otherwise\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.contains-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.contains","text":"contains(geom1, geom2)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \n\nReturns true if g1 contains g2.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.convexhull-Tuple{GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.convexhull","text":"convexhull(geom; gdataset=false)\n\nParameters\n\ngeom: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngdataset: Returns a GDAL IGeometry even when input are GMTdataset or Matrix\n\nA new geometry object is created and returned containing the convex hull of the geometry on which the method is invoked.\n\nReturns\n\nA GMT dataset when input is a Matrix or a GMT type (except if gdaset=true), or a GDAL IGeometry otherwise\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.crosses-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.crosses","text":"crosses(geom1, geom2)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \n\nReturns true if the geometries are crossing.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.delaunaytriangulation-Tuple{GMT.Gdal.AbstractGeometry, Real, Bool}","page":"Index","title":"GMT.Gdal.delaunaytriangulation","text":"delaunay(geom::AbstractGeometry, tol::Real, onlyedges::Bool)\n\nParameters\n\ngeom: the geometry.\ntol: optional snapping tolerance to use for improved robustness\nonlyedges: if true, will return a MULTILINESTRING, otherwise it   will return a GEOMETRYCOLLECTION containing triangular POLYGONs.\n\nReturn a Delaunay triangulation of the vertices of the geometry.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.difference-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.difference","text":"difference(geom1, geom2; gdataset=false)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \ngdataset: Returns a GDAL IGeometry even when input are GMTdataset or Matrix\n\nGenerates a new geometry which is the region of this geometry with the region of the other geometry removed.\n\nReturns\n\nA GMT dataset when input is a Matrix or a GMT type (except if gdaset=true), or a GDAL IGeometry otherwise\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.disjoint-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.disjoint","text":"disjoint(geom1, geom2)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \n\nReturns true if the geometries are disjoint.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.distance-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.distance","text":"distance(geom1, geom2)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \n\nReturns the distance between the geometries or -1 if an error occurs.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.dither","page":"Index","title":"GMT.Gdal.dither","text":"dither(indata; n_colors=256, save=\"\", gdataset=false)\n\nConvert a 24bit RGB image to 8bit paletted.\n\nUse the save=fname option to save the result to disk in a GeoTiff file fname. If fname has no extension a .tif one will be appended. Alternatively give file names with extension .png or .nc to save the file in one of those formats.\ngdataset=true: to return a GDAL dataset. The default is to return a GMTimage object.\nn_colors: Select the number of colors in the generated color table. Defaults to 256.\n\n\n\n\n\n","category":"function"},{"location":"#GMT.Gdal.envelope-Tuple{GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.envelope","text":"envelope(geom)\n\nParameters\n\ngeom: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\n\nComputes and returns the bounding envelope for this geometry.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.envelope3d-Tuple{GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.envelope3d","text":"envelope3d(geom)\n\nParameters\n\ngeom: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\n\nComputes and returns the bounding envelope (3D) for this geometry\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.equals-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.equals","text":"equals(geom1, geom2)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \n\nReturns true if the geometries are equivalent.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.gdaldem","page":"Index","title":"GMT.Gdal.gdaldem","text":"gdaldem(dataset, method, options=String[]; dest=\"/vsimem/tmp\", colorfile=name|GMTcpt, kw...)\n\nTools to analyze and visualize DEMs.\n\nParameters\n\ndataset The source dataset.\nmethod the processing to apply (one of \"hillshade\", \"slope\",   \"aspect\", \"color-relief\", \"TRI\", \"TPI\", \"Roughness\").\noptions List of options (potentially including filename and open options).   The accepted options are the ones of the gdaldem utility.\n\nKeyword Arguments\n\ncolorfile color file (mandatory for \"color-relief\" processing, should be empty otherwise).\nkw... keyword=value arguments when method is hillshade.\n\nReturns\n\nA GMT grid or Image, or a GDAL dataset (or nothing if file was writen on disk).\n\n\n\n\n\n","category":"function"},{"location":"#GMT.Gdal.gdaltranslate","page":"Index","title":"GMT.Gdal.gdaltranslate","text":"gdaltranslate(indata, opts=String[]; dest=\"/vsimem/tmp\", kwargs...)\n\nConvert raster data between different formats and other operations also provided by the GDAL 'gdal_translate' tool. Namely sub-region extraction and resampling. The kwargs options accept the GMT region (-R), increment (-I), target SRS (-J), any of the keywords outgrid, outfile or save = outputname options to make this function save the result in disk in the file 'outputname'. The file format is picked from the 'outputname' file extension. When no output file name is provided it returns a GMT object (either a grid or an image, depending on the input type). To force the return of a GDAL dataset use the option gdataset=true\n\nindata: - Input data. It can be a file name, a GMTgrid or GMTimage object or a GDAL dataset\nopts:   - List of options. The accepted options are the ones of the gdal_translate utility.             This list can be in the form of a vector of strings, or joined in a simgle string.\n\nReturns\n\nA GMT grid or Image, or a GDAL dataset (or nothing if file was writen on disk).\n\n\n\n\n\n","category":"function"},{"location":"#GMT.Gdal.gdalvectortranslate","page":"Index","title":"GMT.Gdal.gdalvectortranslate","text":"function ogr2ogr(indata, opts=String[]; dest=\"/vsimem/tmp\", kwargs...)\n\nParameters\n\ndataset The source dataset.\noptions List of options (potentially including filename and open\n\noptions). The accepted options are the ones of the gdalwarp utility.\n\nkw are kwargs that may contain the GMT region (-R), proj (-J), inc (-I) and save=fname options\n\nReturns\n\nA GMT dataset, or a GDAL dataset (or nothing if file was writen on disk).\n\n\n\n\n\n","category":"function"},{"location":"#GMT.Gdal.gdalwarp","page":"Index","title":"GMT.Gdal.gdalwarp","text":"gdalwarp(datasets::Vector{Dataset}, options=String[]; dest=\"/vsimem/tmp\", kw...)\n\nImage reprojection and warping function.\n\nParameters\n\ndatasets The list of input datasets.\noptions List of options (potentially including filename and open\n\noptions). The accepted options are the ones of the gdalwarp utility.\n\nkw are kwargs that may contain the GMT region (-R), proj (-J), inc (-I) and save=fname options\n\nReturns\n\nA GMT grid or Image, or a GDAL dataset (or nothing if file was writen on disk).\n\n\n\n\n\n","category":"function"},{"location":"#GMT.Gdal.geomarea-Tuple{GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.geomarea","text":"geomarea(geom)\n\nParameters\n\ngeom: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\n\nReturns the area of the geometry or 0.0 for unsupported geometry types.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.geomlength-Tuple{GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.geomlength","text":"geomlength(geom)\n\nParameters\n\ngeom: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\n\nReturns the length of the geometry, or 0.0 for unsupported geometry types.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.intersection-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.intersection","text":"intersection(geom1, geom2; gdataset=false)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \ngdataset: Returns a GDAL IGeometry even when input are GMTdataset or Matrix\n\nReturns a new geometry representing the intersection of the geometries, or NULL if there is no intersection or an error occurs.\n\nGenerates a new geometry which is the region of intersection of the two geometries operated on. The intersects function can be used to test if two geometries intersect.\n\nReturns\n\nA GMT dataset when input is a Matrix or a GMT type (except if gdaset=true), or a GDAL IGeometry otherwise\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.intersects-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.intersects","text":"intersects(geom1, geom2)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \n\nReturns whether the geometries intersect\n\nDetermines whether two geometries intersect. If GEOS is enabled, then this is done in rigorous fashion otherwise true is returned if the envelopes (bounding boxes) of the two geometries overlap.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.overlaps-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.overlaps","text":"overlaps(geom1, geom2)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \n\nReturns true if the geometries overlap.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.pointalongline-Tuple{GMT.Gdal.AbstractGeometry, Real}","page":"Index","title":"GMT.Gdal.pointalongline","text":"pointalongline(geom, distance::Real; gdataset=false)\n\nParameters\n\ngeom: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ndistance: distance along the curve at which to sample position. This   distance should be between zero and geomlength() for this curve.\ngdataset: Returns a GDAL IGeometry even when input are GMTdataset or Matrix\n\nFetch point (or NULL) at given distance along curve.\n\nReturns\n\nA GMT dataset when input is a Matrix or a GMT type (except if gdaset=true), or a GDAL IGeometry otherwise\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.polygonize-Tuple{GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.polygonize","text":"polygonize(geom; gdataset=false)\n\nParameters\n\ngeom: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngdataset: Returns a GDAL IGeometry even when input are GMTdataset or Matrix\n\nPolygonizes a set of sparse edges.\n\nA new geometry object is created and returned containing a collection of reassembled Polygons: NULL will be returned if the input collection doesn't correspond to a MultiLinestring, or when reassembling Edges into Polygons is impossible due to topological inconsistencies.\n\nReturns\n\nA GMT dataset when input is a Matrix or a GMT type (except if gdaset=true), or a GDAL IGeometry otherwise\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.polyunion-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.polyunion","text":"polyunion(geom1, geom2; gdataset=false)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \ngdataset: Returns a GDAL IGeometry even when input are GMTdataset or Matrix\n\nComputes a new geometry representing the union of the geometries.\n\nReturns\n\nA GMT dataset when input is a Matrix or a GMT type (except if gdaset=true), or a GDAL IGeometry otherwise\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.setproj!","page":"Index","title":"GMT.Gdal.setproj!","text":"setproj!(type, proj)\n\nSet a referencing system to the type object. This object can be a GMTgrid, a GMTimage, a GMTdataset or an AbstractDataset.\n\nproj Is either a Proj4 string or a WKT. Alternatively, it can also be another grid, image or dataset        type, in which case its referencing system is copied into type\n\n\n\n\n\n","category":"function"},{"location":"#GMT.Gdal.simplify-Tuple{GMT.Gdal.AbstractGeometry, Real}","page":"Index","title":"GMT.Gdal.simplify","text":"simplify(geom::AbstractGeometry, tol::Real)\n\nCompute a simplified geometry.\n\nParameters\n\ngeom: the geometry.\ntol: the distance tolerance for the simplification.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.symdifference-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.symdifference","text":"symdifference(geom1, geom2; gdataset=false)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \ngdataset: Returns a GDAL IGeometry even when input are GMTdataset or Matrix\n\nGenerates a new geometry representing the symmetric difference of the geometries or NULL if the difference is empty or an error occurs.\n\nReturns\n\nA GMT dataset when input is a Matrix or a GMT type (except if gdaset=true), or a GDAL IGeometry otherwise\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.touches-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.touches","text":"touches(geom1, geom2)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \n\nReturns true if the geometries are touching.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.within-Tuple{GMT.Gdal.AbstractGeometry, GMT.Gdal.AbstractGeometry}","page":"Index","title":"GMT.Gdal.within","text":"within(geom1, geom2)\n\nParameters\n\ngeom1: the geometry. This can either be a GDAL AbstractGeometry or a GMTdataset (or vector of it), or a Matrix\ngeom2: Second geometry. AbstractGeometry if geom1::AbstractGeometry or a GMTdataset/Matrix if geom1 is GMT type \n\nReturns true if g1 is contained within g2.\n\n\n\n\n\n","category":"method"},{"location":"#GMT.Gdal.wrapgeom","page":"Index","title":"GMT.Gdal.wrapgeom","text":"wrapgeom(geom::AbstractGeometry, proj=\"\")\n\nWrap an geometry type into a GDAL dataset. Optionaly provide the SRS (proj4) via the PROJ option.\nHandy function for saving a geometry on disk or visualize it with plot()\n\n\n\n\n\n","category":"function"},{"location":"#GMT.Gdal","page":"Index","title":"GMT.Gdal","text":"Small subset of the GDAL and ArcGDAL packages but with no extra dependencies. For the time being this sub-module is not intended to much direct use except some documented functions. Interested people should consult the GDAL & ArchGDAL docs.\n\n\n\n\n\n","category":"module"},{"location":"grdview/#grdview","page":"grdview","title":"grdview","text":"","category":"section"},{"location":"grdview/","page":"grdview","title":"grdview","text":"grdview(cmd0::String=\"\"; kwargs...)","category":"page"},{"location":"grdview/","page":"grdview","title":"grdview","text":"Create 3-D perspective image or surface mesh from a grid","category":"page"},{"location":"grdview/#Description","page":"grdview","title":"Description","text":"","category":"section"},{"location":"grdview/","page":"grdview","title":"grdview","text":"Reads a 2-D grid and produces a a 3-D perspective plot by drawing a mesh, painting a colored/grayshaded surface made up of polygons, or by scanline conversion of these polygons to a raster image. Options include draping a data set on top of a surface, plotting of contours on top of the surface, and apply artificial illumination based on intensities provided in a separate grid.","category":"page"},{"location":"grdview/","page":"grdview","title":"grdview","text":"The region option can be used to select a map region larger or smaller than that implied by the extent of the grid. ","category":"page"},{"location":"grdview/#Required-Arguments","page":"grdview","title":"Required Arguments","text":"","category":"section"},{"location":"grdview/","page":"grdview","title":"grdview","text":"J or proj : – proj=<parameters>\n Select map projection. More at proj\nJz or JZ or zscale or zsize : zscale=scale | zsize=size\n Set z-axis scaling or or z-axis size. zsize=size sets the size to the fixed value size  (for example zsize=10 or zsize=4i). zscale=scale sets the vertical scale to UNIT/z-unit.","category":"page"},{"location":"grdview/#Optional-Arguments","page":"grdview","title":"Optional Arguments","text":"","category":"section"},{"location":"grdview/","page":"grdview","title":"grdview","text":"B or axes or frame\n Set map boundary frame and axes attributes. More at frame\nC or color or cmap : – color=cpt\n Where cpt is a GMTcpt type or a cpt file name. Alternatively, supply the name of a GMT color master  dynamic CPT [jet] to automatically determine a continuous CPT from the grid's z-range; you may round  up/down the z-range by adding +i zinc. Yet another option is to specify color=color1color2color3  or color=((r1g1b1)(r2g2b2)) to build a linear continuous CPT from those colors automatically (see Setting color). When not explicitly set, but a color map is needed, we will either use the current color map, if available (set by a previous call to makecpt), or the default jet color map. Must be present if you want (1) mesh plot with contours (surftype=(mesh=true)), or (2) shaded/colored perspective image (surftype=(surface=true) or surftype=(img=true)). For surftype=(surface=true) you can specify that you want to skip a z-slice by setting the red r/g/b component to -.\nG or drape : – drape=grid | drape=(grid_r, grid_g, grid_b) | drape=image\n Drape the image in drapegrid on top of the relief provided by reliefgrid. [Default determines colors from  reliefgrid]. Note that zsize and plane always refers to the reliefgrid. The drapegrid only provides  the information pertaining to colors, which (if drape is a grid) will be looked-up via the CPT (see  color). Instead, you may give three grid files via separate drape options in the specified order.  These files must contain the red, green, and blue colors directly (in 0-255 range) and no CPT is needed.  The drapegrid may be of a different resolution than the reliefgrid. Finally, drapegrid may be an image to  be draped over the surface, in which case the color option is not required. For the drape image case it is  important that both reliefgrid and drapeimage carry referencing information. In that case, the reliefgrid  can be in geograpgic coordinates and drapeimage in any projection system. Otherwise, we try to figure out what  to do but things may ofc go wrong.\nisgeog : – isgeog=true\n When drapping an image that has a projection info, over a grid that is in geographics but does not carry any  information about this fact we may need to use this option to help the program finding the common BoundingBox.  Used only together with drape\nI or shade or intensity : – shade=grid | shade=azim | shade=(azimuth=az, norm=params, auto=true)\n Gives the name of a grid with intensities in the (-1,+1) range, or a constant intensity to apply everywhere  (affects the ambient light). Alternatively, derive an intensity grid from the input data grid grd_z via a  call to grdgradient; use shade=(azimuth=az) or shade=(azimuth=az norm=params) to specify azimuth  and intensity arguments for that module or just give shade=(auto=true) to select the default arguments  (azim=-45norm=t1). If you want a more specific intensity scenario then run grdgradient separately first.\nN or plane : – plane=lev | plane=(lev, fill)\n  Draws a plane at this z-level. If the optional color is provided via plane=(lev fill), and the   projection is not oblique, the frontal facade between the plane and the data perimeter is colored.   See -Wf for setting the pen used for the outline.\nQ or surf or surftype : – surftype=(mesh=true, waterfall=(:rows | :cols [,fill]), surface=true, image=true, nan_alpha=true, monochrome=true)\n  Select one of following settings. For any of these choices, you may force a monochrome image by setting   monochrome=true. Colors are then converted to shades of gray using the (monochrome television) YIQ   transformation. Note: pay attention to always use a tuple, even when only one option is used. This is   correct: surf=(img=true,) but this is wrong: surf=(img=true)\nSpecify mesh=true for mesh plot [Default], and optionally set a color (see Setting color), with mesh=color, for a different mesh paint.\nSpecify waterfall=rows or cols for waterfall plots (row or column profiles). Specify fill color or patterns with a second argument. For example waterfall=(rows red)\nSpecify surface=true for surface plot, and optionally add mesh=true to have mesh lines drawn on top of surface.\nSpecify image=true for image plot. Optionally use image=dpi to set the effective dpi resolution for the rasterization [100].\nSpecify nan_alpha=true, same as image=true but will make nodes with z = NaN transparent, using the colormasking feature in PostScript Level 3.\nR or region or limits : – limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more\n Specify the region of interest. More at limits. For perspective view view, optionally add  zmin,zmax. This option may be used to indicate the range used for the 3-D axes [Default is region given  by the reliefgrid]. You may ask for a larger w/e/s/n region to have more room between the image and the axes.  A smaller region than specified in the reliefgrid will result in a subset of the grid.\nS or smooth : – smooth=smoothfactor\n Used to resample the contour lines at roughly every (gridbox_size/smoothfactor) interval.\nT or no_interp : – no_interp=(skip=true, outlines=true)\n Plot image without any interpolation. This involves converting each node-centered bin into a polygon  which is then painted separately. Use skip=true to skip nodes with z = NaN. This option is useful  for categorical data where interpolating between values is meaningless. Optionally, add outlines=true  to draw the tile outlines. If the default pen is not to your liking, use outlines=pen  (see Pen attributes). As this option produces a flat surface it cannot be combined with -JZ or -Jz.\nU or time_stamp : – time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n Draw GMT time stamp logo on plot. More at timestamp\nV or verbose : – verbose=true | verbose=level\n Select verbosity level. More at verbose\nW or pen or pens\n","category":"page"},{"location":"grdview/","page":"grdview","title":"grdview","text":"pens=(contour=true,)\nDraw contour lines on top of surface or mesh (not image). Use pens=(contour=true pen) to set pen   attributes used for the contours. [Default: width = 0.75p, color = black, style = solid].","category":"page"},{"location":"grdview/","page":"grdview","title":"grdview","text":"pens=(mesh=true, pen)\nSets the pen attributes used for the mesh. [Default: width = 0.25p, color = black, style = solid]. You must also select surftype=(mesh=true) or surftype=(surface=true mesh=true) for meshlines to be drawn.","category":"page"},{"location":"grdview/","page":"grdview","title":"grdview","text":"pens=(facade=true, pen)\nSets the pen attributes used for the facade. [Default: width = 0.25p, color = black, style = solid]. You must also select plane for the facade outline to be drawn.","category":"page"},{"location":"grdview/","page":"grdview","title":"grdview","text":"X or x_off or x_offset : x_off=[] | *x_off=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : y_off=[] | *y_off=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off\nn or interp or interpol : interp=params\n Select interpolation mode for grids. More at interp\np or view or perspective : view=(azim, elev)\n Selects perspective view and sets the azimuth and elevation of the viewpoint. More at perspective\nt or transparency or alpha: alpha=50\n Set PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].  Works only for the PDF and PNG formats.","category":"page"},{"location":"grdview/#Examples","page":"grdview","title":"Examples","text":"","category":"section"},{"location":"grdview/","page":"grdview","title":"grdview","text":"See the Example 04 at the Historical Collection gallery.","category":"page"},{"location":"types/#The-GMT.jl-types","page":"The GMT types","title":"The GMT.jl types","text":"","category":"section"},{"location":"types/#Grid-type","page":"The GMT types","title":"Grid type","text":"","category":"section"},{"location":"types/","page":"The GMT types","title":"The GMT types","text":"type GMTgrid                  # The type holding a local header and data of a GMT grid\n   proj4::String              # Projection string in PROJ4 syntax (Optional)\n   wkt::String                # Projection string in WKT syntax (Optional)\n   epsg::Int                  # EPSG code\n   range::Array{Float64,1}    # 1x6[8] vector with [x_min, x_max, y_min, y_max, z_min, z_max [, v_min, v_max]]\n   inc::Array{Float64,1}      # 1x2[3] vector with [x_inc, y_inc [,v_inc]]\n   registration::Int          # Registration type: 0 -> Grid registration; 1 -> Pixel registration\n   nodata::Float64            # The value of nodata\n   title::String              # Title (Optional)\n   comment::String            # Remark (Optional)\n   command::String            # Command used to create the grid (Optional)\n   names::Vector{String}      # To use whith multi-layered and when layers have names (Optional)\n   x::Array{Float64,1}        # [1 x n_columns] vector with XX coordinates\n   y::Array{Float64,1}        # [1 x n_rows]    vector with YY coordinates\n   v::Array{Float64,1}        # [v x n_bands]   vector with VV (vertical for 3D grids) coordinates\n   z::Array{Float32,2}        # [n_rows x n_columns] grid array\n   x_units::String            # Units of XX axis (Optional)\n   y_units::String            # Units of YY axis (Optional)\n   v_units::String            # Units of Vertical axis (Optional)\n   z_units::String            # Units of z vlues (Optional)\n   layout::String             # A three character string describing the grid memory layout\n   pad::Int                   # When != 0 means that the array is placed in a padded array of PAD rows/cols\nend","category":"page"},{"location":"types/#Image-type","page":"The GMT types","title":"Image type","text":"","category":"section"},{"location":"types/","page":"The GMT types","title":"The GMT types","text":"type GMTimage                 # The type holding a local header and data of a GMT image\n   proj4::String              # Projection string in PROJ4 syntax (Optional)\n   wkt::String                # Projection string in WKT syntax (Optional)\n   epsg::Int                  # EPSG code\n   range::Array{Float64,1}    # 1x6 vector with [x_min x_max y_min y_max z_min z_max]\n   inc::Array{Float64,1}      # 1x2 vector with [x_inc y_inc]\n   registration::Int          # Registration type: 0 -> Grid registration; 1 -> Pixel registration\n   nodata::Float64            # The value of nodata\n   color_interp::String       # If equal to \"Gray\" an indexed image with no cmap will get a gray cmap\n   names::Vector{String}      # To use whith multi-band and when bands have names (Optional)\n   x::Array{Float64,1}        # [1 x n_columns] vector with XX coordinates\n   y::Array{Float64,1}        # [1 x n_rows]    vector with YY coordinates\n   v::Array{Float64,1}        # [v x n_bands]   vector with vertical coords or wavelengths in hypercubes (Optional)\n   image::Array{UInt8,3}      # [n_rows x n_columns x n_bands] image array\n   colormap::Array{Clong,1}   # \n   alpha::Array{UInt8,2}      # A [n_rows x n_columns] alpha array\n   layout::String             # A four character string describing the image memory layout\n   pad::Int                   # When != 0 means that the array is placed in a padded array of PAD rows/cols\nend","category":"page"},{"location":"types/#Dataset-type","page":"The GMT types","title":"Dataset type","text":"","category":"section"},{"location":"types/","page":"The GMT types","title":"The GMT types","text":"type GMTdataset\n    data::Array{Float64,2}     # Mx2 Matrix with segment data\n    text::Array{Any,1}         # Array with text after data coordinates (mandatory only when plotting Text)\n    header::String             # String with segment header (Optional but sometimes very useful)\n    comment::Array{Any,1}      # Array with any dataset comments [empty after first segment]\n    proj4::String              # Projection string in PROJ4 syntax (Optional)\n    wkt::String                # Projection string in WKT syntax (Optional)\n    geom::Integer              # Geometry type. One of the GDAL's enum (wkbPoint, wkbPolygon, etc...)\nend","category":"page"},{"location":"types/#CPT-type","page":"The GMT types","title":"CPT type","text":"","category":"section"},{"location":"types/","page":"The GMT types","title":"The GMT types","text":"type GMTcpt\n    colormap::Array{Float64,2}\n    alpha::Array{Float64,1}\n    range::Array{Float64,2}\n    minmax::Array{Float64,1}\n    bfn::Array{Float64,2}\n    depth::Cint\n    hinge::Cdouble\n    cpt::Array{Float64,2}\n    label::Vector{String}     # Labels of a Categorical CPT\n    key::Vector{String}       # Keys of a Categorical CPT\n    model::String\n    comment::Array{Any,1}     # Cell array with any comments\nend","category":"page"},{"location":"types/#Postscript-type","page":"The GMT types","title":"Postscript type","text":"","category":"section"},{"location":"types/","page":"The GMT types","title":"The GMT types","text":"type GMTps\n    postscript::String      # Actual PS plot (text string)\n    length::Int             # Byte length of postscript\n    mode::Int               # 1 = Has header, 2 = Has trailer, 3 = Has both\n    comment::Array{Any,1}   # Cell array with any comments\nend","category":"page"},{"location":"gallery/scripts_agu/arrows_I/#Arrows_I","page":"Arrows_I","title":"Arrows_I","text":"","category":"section"},{"location":"gallery/scripts_agu/arrows_I/","page":"Arrows_I","title":"Arrows_I","text":"Plot an arrow","category":"page"},{"location":"gallery/scripts_agu/arrows_I/","page":"Arrows_I","title":"Arrows_I","text":"arrows([0.5 0.5 0 8], limits=(-0.1,3,0,2.5), figsize=(16,5),\n       arrow=(len=2,stop=1,shape=0.5), pen=6,\n       frame=(axes=:WSrt, annot=:auto, title=\"Arrow I\"))\nT1 = text_record([0 2.0], \"arrows([0 1.0 0 6], limits=(0,3,0,2), figsize=(14,5),\");\nT2 = text_record([0 1.5], \"   arrow=(len=2,stop=1,shape=0.5), pen=6\");\npstext!(T1, font=(20,\"Times-Italic\"), justify=:LB)\npstext!(T2, font=(20,\"Times-Italic\"), justify=:LB, show=true)","category":"page"},{"location":"gallery/scripts_agu/arrows_I/","page":"Arrows_I","title":"Arrows_I","text":"<img src=\"../figs/arrows_I.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"grdhisteq/#grdhisteq","page":"grdhisteq","title":"grdhisteq","text":"","category":"section"},{"location":"grdhisteq/","page":"grdhisteq","title":"grdhisteq","text":"Not yet","category":"page"},{"location":"gallery/UTM_Geog_annot/ex28/#Mixing-UTM-and-geographic-axes-annotations","page":"UTM and Geog axes","title":"Mixing UTM and geographic axes annotations","text":"","category":"section"},{"location":"gallery/UTM_Geog_annot/ex28/","page":"UTM and Geog axes","title":"UTM and Geog axes","text":"This is a question that comes up regularly such that GMT has a gallery example (famous example 28) to show how to do it. But even with that example it's not a trivial thing to do.","category":"page"},{"location":"gallery/UTM_Geog_annot/ex28/","page":"UTM and Geog axes","title":"UTM and Geog axes","text":"However it's trivial from the Julia wrapper under the condition that the grid or image to be displayed is referenced internally. If it is not, grdedit can be used to assign a referencing system via its option proj. The other condition is that grid or image to be displayed is already in memory (so that the internal magicks can work). Given that, example 28) boils down to this (with a little bit less fancy details).","category":"page"},{"location":"gallery/UTM_Geog_annot/ex28/","page":"UTM and Geog axes","title":"UTM and Geog axes","text":"using GMT\nG = gmtread(\"@Kilauea.utm.nc\");","category":"page"},{"location":"gallery/UTM_Geog_annot/ex28/","page":"UTM and Geog axes","title":"UTM and Geog axes","text":"Create a cpt and display the map","category":"page"},{"location":"gallery/UTM_Geog_annot/ex28/","page":"UTM and Geog axes","title":"UTM and Geog axes","text":"C = makecpt(cmap=\"copper\", range=(0,1500));","category":"page"},{"location":"gallery/UTM_Geog_annot/ex28/","page":"UTM and Geog axes","title":"UTM and Geog axes","text":"imshow(G, cmap=C, shade=true, frame=(axes=\"WS\", annot=true),\n\tcoast=(shore=true, ocean=:lightblue, frame=(axes=\"EN\", annot=true, grid=true)))","category":"page"},{"location":"gallery/UTM_Geog_annot/ex28/","page":"UTM and Geog axes","title":"UTM and Geog axes","text":"<img src=\"../ex28.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/UTM_Geog_annot/ex28/","page":"UTM and Geog axes","title":"UTM and Geog axes","text":"","category":"page"},{"location":"gallery/UTM_Geog_annot/ex28/","page":"UTM and Geog axes","title":"UTM and Geog axes","text":"Download a Pluto Notebook here","category":"page"},{"location":"gallery/scripts_agu/hello_I/#Hello_I","page":"Hello_I","title":"Hello_I","text":"","category":"section"},{"location":"gallery/scripts_agu/hello_I/","page":"Hello_I","title":"Hello_I","text":"plot(rand(20), figsize=(18,10), lw=1, lc=:blue, title=\"Hello World\",\n     xlabel=:Spoons, ylabel=:Forks, marker=:square, size=0.4,\n     markeredgecolor=:green, mc=:red, legend=true, show=true)","category":"page"},{"location":"gallery/scripts_agu/hello_I/","page":"Hello_I","title":"Hello_I","text":"<img src=\"../figs/hello_I.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/historic/ex13/#Plotting-of-vector-fields","page":"Plotting of vector fields","title":"Plotting of vector fields","text":"","category":"section"},{"location":"gallery/historic/ex13/","page":"Plotting of vector fields","title":"Plotting of vector fields","text":"    Gz = gmt(\"grdmath -R-2/2/-2/2 -I0.1 X Y R2 NEG EXP X MUL =\");\n    Gdzdx = gmt(\"grdmath ? DDX\", Gz);\n    Gdzdy = gmt(\"grdmath ? DDY\", Gz);\n    grdcontour(Gdzdx, figsize=8, axes=(annot=1, axes=:WSne), cont=0.1, annot=0.5,\n               labels=(dist=5,), smooth=4, ticks=(gap=(0.25,0.08),))\n    grdcontour!(Gdzdy, axes=:same, cont=0.05, annot=0.2, labels=(dist=5,),\n                smooth=4, ticks=(gap=(0.25,0.08),), x_off=\"a9\")\n    grdcontour!(Gz, axes=:same, cont=0.05, annot=0.1, labels=(dist=5,),\n                smooth=4, ticks=(gap=(0.25,0.08),), y_off=9)\n    grdcontour!(Gz, axes=:same, cont=0.05, labels=(dist=5,), smooth=4, x_off=9)\n    grdvector!(Gdzdx, Gdzdy, inc=0.2, arrow=(len=0.25, shape=0.25, stop=true,\n               norm=0.6), fill=:black, pen=1, vec_scale=13)\n    T =\ttext_record([8 10], \"z(x,y) = x@~\\\\327@~exp(-x@+2@+-y@+2@+)\");\n    text!(T, limits=(0,15,0,12), proj=:linear, figscale=1, font=(40,\"Times-Italic\"),\n          anchor=:CB, x_off=-9, show=true)","category":"page"},{"location":"gallery/historic/ex13/","page":"Plotting of vector fields","title":"Plotting of vector fields","text":"See also GMT ex13","category":"page"},{"location":"gallery/plotyy/plotyy/#Plotyy-example","page":"Plotyy","title":"Plotyy example","text":"","category":"section"},{"location":"gallery/plotyy/plotyy/","page":"Plotyy","title":"Plotyy","text":"Likewise contourf GMT does not have a plotyy module. A plotyy plot is a one where we plot Y1 versus X1 with y-axis labeling on the left and plots Y2 versus X2 with y-axis labeling on the right. So it's basically a two plots overlain but the details to make it nice can be a bit boring and long.","category":"page"},{"location":"gallery/plotyy/plotyy/","page":"Plotyy","title":"Plotyy","text":"x = 0:0.01:20;\ny1 = 200 * exp.(-0.05x) .* sin.(x);\ny2 = 0.8 * exp.(-0.5x)  .* sin.(10x);\nplotyy(y1, y2, title=\"Vibrating dishes\", ylabel=:Knifes, xlabel=:Forks, seclabel=:Spoons, show=true)","category":"page"},{"location":"gallery/plotyy/plotyy/","page":"Plotyy","title":"Plotyy","text":"<img src=\"../plotyy1.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/plotyy/plotyy/","page":"Plotyy","title":"Plotyy","text":"Note that to make the command shorter and nicer to read we have used a less known option in GMT. The secondary label of an axes. In this example we also didn't set the xx coordinates so the program plotted from 1 to numbers of points.","category":"page"},{"location":"gallery/plotyy/plotyy/","page":"Plotyy","title":"Plotyy","text":"In the general case the data has xx coordinates and they don't even need to be the same for Y1 and Y2 (but they need to have a shared interval). In that case we should set the plot limits because otherwise the guessing done from xx,Y1 risk to not capture the total Y1+Y2 extent.","category":"page"},{"location":"gallery/plotyy/plotyy/","page":"Plotyy","title":"Plotyy","text":"plotyy([x[:] y1[:]], [x[:] y2[:]], title=\"Vibrating dishes\", ylabel=:Knifes, xlabel=\"2000 Forks\", seclabel=:Spoons, show=true)","category":"page"},{"location":"gallery/plotyy/plotyy/","page":"Plotyy","title":"Plotyy","text":"<img src=\"../plotyy2.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/plotyy/plotyy/","page":"Plotyy","title":"Plotyy","text":"","category":"page"},{"location":"gallery/plotyy/plotyy/","page":"Plotyy","title":"Plotyy","text":"Download a Pluto Notebook here","category":"page"},{"location":"gallery/historic/","page":"Historical collection","title":"Historical collection","text":"Contour maps Image presentations Spectral estimation 3-D view mesh plot\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/historic/","page":"Historical collection","title":"Historical collection","text":"3-D illuminated surface Plotting histograms A simple location map A 3-D histogram\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/historic/","page":"Historical collection","title":"Historical collection","text":"Time-series along tracks A geographical bar graph A 3-D RGB cube Optimal triangulation\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/historic/","page":"Historical collection","title":"Historical collection","text":"Plotting of vector fields Gridding and trend surfaces Gridding, contouring and masking Gridding of data, continued\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/historic/","page":"Historical collection","title":"Historical collection","text":"Images clipped by coastlines Volumes and Spatial Selections Color patterns on maps Custom plot symbols\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/historic/","page":"Historical collection","title":"Historical collection","text":"Time-series of RedHat stock price World-wide seismicity All great-circle paths lead to Rome Geospatial data selection\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/historic/","page":"Historical collection","title":"Historical collection","text":"Global distribution of antipodes General perspective projection Plotting S/S Mercator img grids Mixing UTM and geographic\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/historic/","page":"Historical collection","title":"Historical collection","text":"Gridding spherical with splines Plot Trigonometric functions Draping an image over topography Automatic stacking cross-profiles\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/historic/","page":"Historical collection","title":"Historical collection","text":"Shading country polygons Spherical triangulation Spherical gridding Line simplification\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/historic/","page":"Historical collection","title":"Historical collection","text":"Legend with tables Antarctica and stereographic data Map insets Trend modeling\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/historic/","page":"Historical collection","title":"Historical collection","text":"Day-light terminators Line networks and curved titles  \n(Image: ) (Image: )  ","category":"page"},{"location":"solar/#solar","page":"solar","title":"solar","text":"","category":"section"},{"location":"solar/","page":"solar","title":"solar","text":"solar(cmd0::String=\"\", arg1=[]; kwargs...)","category":"page"},{"location":"solar/","page":"solar","title":"solar","text":"Calculate and plot the day-night terminator and the civil, nautical and astronomical twilights.","category":"page"},{"location":"solar/#Required-Arguments","page":"solar","title":"Required Arguments","text":"","category":"section"},{"location":"solar/","page":"solar","title":"solar","text":"There are no required arguments but either sun or terminators must be selected.","category":"page"},{"location":"solar/#Optional-Arguments","page":"solar","title":"Optional Arguments","text":"","category":"section"},{"location":"solar/","page":"solar","title":"solar","text":"B or axes or frame\nSet map boundary frame and axes attributes. More at frame\nC or format : format=true\n Formats the report selected by sun=?? using tab-separated fields on a single line. The  output is Sun Lon Lat Azimuth Elevation in degrees, Sunrise Sunset Noon in decimal days,  day length in minutes, SolarElevationCorrected corrected for the effect of refraction index  and Equation of time in minutes. Note that if no position is provided in sun=(lon,lat) the  data after Elevation refers to the point (0,0).\ncoast : coast=true | coast=(full coast options list)\n When plotting a mapp this option calls the coast module to plot coastlines, rivers, etc...  The simple form coast=true will plot the coastlines with a black, 0.5 points thickness, pen.  Note, however, that with this option the coastlines are plotted on top of the terminators. If the  other way arround is needed, then you must do the usual two calls: coast + solar!\nG or fill : fill=color | G=:c\n Select color or pattern for filling of terminators; or use G=:c for clipping [Default is no fill].  Deactivate clipping by appending the output of clip C.\nI or sun : sun=true | sun=(lon,lat) | sun=(pos=(lon,lat), date=date) | sun=(pos=(lon,lat), date=date, TZ=tzone)\n Print current sun position as well as Azimuth and Elevation. Use sun=(lon,lat) to print also the times of  Sunrise, Sunset, Noon and length of the day. To add a date, use a NamedTuple instead and add the element  date=date in ISO format, e.g, date=\"2000-04-25\" to compute sun parameters for this date. If necessary,  add another element with the time zone via TZ=tzone.\nJ or proj : proj=<parameters>\n Select map projection. More at proj\nM or dump : dump=true\n  Write terminator(s) as a multisegment file to standard output. No plotting occurs.\nN or invert : invert=true\n Invert the sense of what is inside and outside the terminator. Only used with clipping (G=:c) and  cannot be used together with axes.\nR or region or limits : limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more   Specify the region of interest. More at limits\nT or terminators : terminators=\"d|c|n|a\" | terminators=(term=\"d|c|n|a\", date=date) | terminators=(term=\"d|c|n|a\", date=date), TZ=tzone)\n Plot (or dump; see dump) one or more terminators defined via the dcna flags. Where: d means  day/night terminator; c means civil twilight; n means nautical twilight; a means astronomical  twilight. To add a date, use a NamedTuple instead and add the element date=date in ISO format, e.g,  date=\"2000-04-25\" to know where the day-night was at that date. If necessary, add another element with  the time zone via TZ=tzone. \nU or time_stamp : time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n Draw GMT time stamp logo on plot. More at timestamp\nV or verbose : verbose=true | verbose=level\n Select verbosity level. More at verbose\nW or pen : pen=pen\n Set pen attributes for lines or the outline of symbols [Defaults: width = default, color = black, style = solid].\nX or x_off or x_offset : xoff=[] | *xoff=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : yoff=[] | *yoff=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off","category":"page"},{"location":"solar/#Examples","page":"solar","title":"Examples","text":"","category":"section"},{"location":"solar/","page":"solar","title":"solar","text":"Print current Sun position and Sunrise, Sunset times at:","category":"page"},{"location":"solar/","page":"solar","title":"solar","text":"    solar(sun=(pos=(-7.93,37.079), date=\"2016-02-04T10:01:00\"))","category":"page"},{"location":"solar/","page":"solar","title":"solar","text":"Plot the day-night and civil twilight ","category":"page"},{"location":"solar/","page":"solar","title":"solar","text":"    coast(region=:d, shore=0.1, proj=\"Q0/14c\", axes=(annot=:auto, axes=\"WSen\"),\n          resolution=:low, area=1000)\n    solar!(pen=1, terminators=\"dc\", show=true)","category":"page"},{"location":"solar/","page":"solar","title":"solar","text":"But it is much nicer if we paint the terminators","category":"page"},{"location":"solar/","page":"solar","title":"solar","text":"    coast(region=:d, proj=\"Ks0/12\", resolution=:low, area=5000, borders=\"1/0.5p,gray\",\n          water=(175,210,255), axes=(annot=:a,ticks=:a,grid=:a), shore=0.5) \n    solar!(terminators=(term=:d, date=\"2016-02-09T16:00:00\"), fill=\"navy@95\")\n    solar!(terminators=(term=:c, date=\"2016-02-09T16:00:00\"), fill=\"navy@85\")\n    solar!(terminators=(term=:n, date=\"2016-02-09T16:00:00\"), fill=\"navy@80\")\n    solar!(terminators=(term=:a, date=\"2016-02-09T16:00:00\"), fill=\"navy@80\",\n    show=true)","category":"page"},{"location":"solar/#See-also","page":"solar","title":"See also","text":"","category":"section"},{"location":"solar/","page":"solar","title":"solar","text":"The GMT man page","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/#Plot-Landsat-8-images","page":"Landsat 8","title":"Plot Landsat 8 images","text":"","category":"section"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"The data used in this example is the band 4 (red channel) of a Landsat 8 scene. Those are relatively big images (~116 MB) so we will download it first and take that into account when the results of the commands bellow do not show instantly.","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"Ir = gmtread(\"/vsicurl/http://landsat-pds.s3.amazonaws.com/c1/L8/037/034/LC08_L1TP_037034_20160712_20170221_01_T1/LC08_L1TP_037034_20160712_20170221_01_T1_B4.TIF\");","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"and have a look at what we got","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"imshow(Ir)","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"<img src=\"../b4raw.png\" width=\"700\" class=\"center\"/>","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"Ah, nice ... but it's so dark that we can't really see much!","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"Well that is true and has one explanation. Modern satellite data is acquired with sensors of 12 bits or more but the data is stored in variables with 16 bits. This means that many of those data bits will not be used. But on screens we are limited to 8 bits per channel so we must scale the full 16 bits range [0 65535] to the [0 255] interval and in this process we tend to have much more dark pixels.","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"To see this better, let's look at the image's histogram.","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"histogram(Ir, auto=true, bin=20, show=true)","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"<img src=\"../b4hist.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"We have used here the option auto=true that will try to guess where the data in histogram plot starts and ~ ends. It did behave well and we will use those numbers to do an operation that is called histogram stretch that consists in picking only part of the histogram and stretch it to [0 255]. Note that in fact we have data to the 40000 DN (Digital Number) but they are very few and at the end we must choose a balance to show almost all DNs and not making the image too dark.","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"imshow(I, stretch=[6000 23800])","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"<img src=\"../b4stretched.png\" width=\"700\" class=\"center\"/>","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"Now that we feel confident with the auto-stretching algorithm we can create a true color image. True color images are obtained by inserting the Landsat8 band 4 in the Red channel, band 3 in Green and band 2 in Blue. Looking at the file name that we downloaded it's easy to guess that bands \"...T1B3.TIF\" and \"...T1B2.TIF\" contain the green and blue channels that we need. So download them (takes a little time)","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"Ig = gmtread(\"/vsicurl/http://landsat-pds.s3.amazonaws.com/c1/L8/037/034/LC08_L1TP_037034_20160712_20170221_01_T1/LC08_L1TP_037034_20160712_20170221_01_T1_B3.TIF\");\n\nIb = gmtread(\"/vsicurl/http://landsat-pds.s3.amazonaws.com/c1/L8/037/034/LC08_L1TP_037034_20160712_20170221_01_T1/LC08_L1TP_037034_20160712_20170221_01_T1_B2.TIF\");","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"and compose a true color image with the function truecolor() from the RemoteS package that will do the auto-stretching automatically for us","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"using RemoteS\nIrgb = truecolor(Ir, Ig, Ib);","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"<img src=\"../truecolor.png\" width=\"700\" class=\"center\"/>","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"","category":"page"},{"location":"gallery/Landsat8/histogram_stretch/","page":"Landsat 8","title":"Landsat 8","text":"Download a Pluto Notebook here","category":"page"},{"location":"gallery/historic/ex33/#Stacking-automatically-generated-cross-profiles","page":"Stacking automatically generated cross-profiles","title":"Stacking automatically generated cross-profiles","text":"","category":"section"},{"location":"gallery/historic/ex33/","page":"Stacking automatically generated cross-profiles","title":"Stacking automatically generated cross-profiles","text":"    makecpt(cmap=:rainbow, range=(-5000,-2000))\n    grdimage(\"@spac_33.nc\", shade=(azim=15, norm=\"e0.75\"), proj=:merc, figsize=15)\n    # Select two points along the ridge\n    ridge_pts = [-111.6 -43.0; -113.3 -47.5];\n    # Plot ridge segment and end points\n    plot!(ridge_pts, region=\"@spac_33.nc\", symbol=(symb=:circle, size=0.25),\n          fill=:blue, pen=(2,:blue))\n    # Generate cross-profiles 400 km long, spaced 10 km, samped every 2km\n    # and stack these using the median, write stacked profile\n    table = grdtrack(\"@spac_33.nc\", ridge_pts, equidistant=\"400k/2k/10k+v\", stack=\"m+sstack.txt\")\n    plot!(table, pen=0.5)\n    # Show upper/lower values encountered as an envelope\n    env1 = gmtconvert(\"stack.txt\", outcol=\"0,5\")\n    env2 = gmtconvert(\"stack.txt\", outcol=\"0,6\", reverse=true, suppress=true)\n    env = [env1[1].data; env2[1].data];\t\t# Concat the two matrices\n    plot!(env, region=(-200,200,-3500,-2000), proj=:linear, figsize=(15,7.5),\n          frame=(axes=:WSne, annot=:auto, ticks=:auto),\n          xaxis=(grid=1000, label=\"Distance from ridge (km)\"),\n          ylabel=\"Depth (m)\", fill=:lightgray, y_off=16)\n    plot!(\"stack.txt\", pen=3)\n    text!(text_record([0 -2000], \"MEDIAN STACKED PROFILE\"), fill=:white, font=14,\n          justify=:TC, offset=(away=true, shift=0.25), show=true)\n    rm(\"stack.txt\")","category":"page"},{"location":"gallery/historic/ex33/","page":"Stacking automatically generated cross-profiles","title":"Stacking automatically generated cross-profiles","text":"See also GMT ex33","category":"page"},{"location":"gallery/historic/ex35/#Spherical-triangulation-and-distance-calculations","page":"Spherical triangulation and distance calculations","title":"Spherical triangulation and distance calculations","text":"","category":"section"},{"location":"gallery/historic/ex35/","page":"Spherical triangulation and distance calculations","title":"Spherical triangulation and distance calculations","text":"    pol, nodes = sphtriangulate(\"@gshhs_c.txt\", voronoi=:v, skip=true, nodes=true)\n    # Compute distances in km\n    Gtt = sphdistance(pol, region=:global360, inc=1, voronoi=true, nodes=nodes,\n          grid=true, dist_unit=:k)\n    makecpt(cmap=:hot, range=(0,3500))\n    # Make a basic image plot and overlay contours, Voronoi polygons and coastlines\n    grdimage(Gtt, proj=(name=:ortho, center=(-140,30)), figsize=16, x_off=2, y_off=5)\n    grdcontour!(Gtt, cont=500, annot=(int=1000, labels=(font=(10,:Helvetica,:white),)),\n                range=500, labels=(Line=[0 90 203 -10; 175 60 170 -30; -50 30 220 -5],),\n                pen=((annot=true, pen=(0.75,:white)), (contour=true, pen=(0.25,:white))) )\n    plot!(pol, pen=(0.25, :green, :dotted))\n    coast!(shore=1, land=:steelblue, area=(0,1,1),\n           frame=(annot=30, grid=30, title=\"Distances from GSHHG crude coastlines\"),\n           show=true)","category":"page"},{"location":"gallery/historic/ex35/","page":"Spherical triangulation and distance calculations","title":"Spherical triangulation and distance calculations","text":"See also GMT ex35","category":"page"},{"location":"gallery/bars/bars/#Bar-plots","page":"Bar plots","title":"Bar plots","text":"","category":"section"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"A simple bar plot showing color and bar width (in data units) assignement.","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"bar(1:5, (20, 35, 30, 35, 27), width=0.5, color=:lightblue, limits=(0.5,5.5,0,40), show=true)","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"<img src=\"../bars0.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"A colored bar plot with colors proportional to bar heights. In this case we let the plot limits be determined from data. We also plot a colorbar by using the colorbar=true option.","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"bar(rand(15), color=:turbo, figsize=(14,8), title=\"Colored bars\", colorbar=true, show=true)","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"<img src=\"../bars1.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"Example showing how to plot bar groups and at same time assign variable transparency to each of the group's band usinf the fillalpha option. Here, each row on the input data represents a bar group that has as many bands as n_columns - 1. -1 because first column must hold the xx coordinates of each group. The colors come from the automatic cyclic scheme.","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"bar([0. 1 2 3; 1 2 3 4], fillalpha=[0.3 0.5 0.7], show=true)","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"<img src=\"../bars2.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"Next example shows how to plot error bars in a grouped bar. Similar to this mapplotlib's example (labels will come later).","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"bar(1:5, [20 25; 35 32; 30 34; 35 20; 27 25], width=0.7, fill=[\"lightblue\", \"brown\"],\n    error_bars=(y=[2 3; 3 5; 4 2; 1 3; 2 3],), xticks=(:G1, :G2, :G3, :G4, :G5), yaxis=(annot=5,label=:Scores), frame=(title=\"Scores by group and gender\", axes=:WSrt), show=true)","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"<img src=\"../bars3.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"Example of a verticaly stacked bar plot. In this exampled we pass the xx coordinates as first argument and the individual bar heights in a matrix with smae number of rows as the number of elements in the x vector. To make it plot a stracked bar we used the option stacked=true.","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"bar(1:3,[-5 -15 20; 17 10 21; 10 5 15], stacked=1, show=1)","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"<img src=\"../bars4.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"To create an horizontal bar plot we use the hbar=true option\"","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"bar([0. 1 2 3; 1 2 3 4], hbar=true, show=true)","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"<img src=\"../bars5.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"And one horizontal and stacked but this time we pick the colors.","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"bar([0. 1 2 3; 1 2 3 4], stack=true, hbar=true, fill=[\"red\", \"green\", \"blue\"], show=true)","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"<img src=\"../bars6.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"","category":"page"},{"location":"gallery/bars/bars/","page":"Bar plots","title":"Bar plots","text":"Download a Pluto Notebook here","category":"page"},{"location":"gallery/historic/ex05/#A-3-D-illuminated-surface","page":"A 3-D illuminated surface","title":"A 3-D illuminated surface","text":"","category":"section"},{"location":"gallery/historic/ex05/","page":"A 3-D illuminated surface","title":"A 3-D illuminated surface","text":" \tGsombrero = gmt(\"grdmath -R-15/15/-15/15 -I0.3 X Y HYPOT DUP 2 MUL PI MUL 8 DIV COS EXCH NEG 10 DIV EXP MUL =\");\n\tC = makecpt(color=128, range=(-5,5), no_bg=true);\n\tgrdview(Gsombrero, limits=(-15,15,-15,15,-1,1), frame=(axes=\"SEwnZ\", annot=5),\n\t        zaxis=(annot=0.5,), plane=(-1, :white), surftype=:surface,\n\t\t\tshade=(azim=225, norm=\"t0.75\"), figsize=12, zsize=5, view=(120,30))\n\n\ttitle = text_record([7.5 12], \"z(r) = cos (2@~p@~r/8) @~\\\\327@~e@+-r/10@+\");\n\tpstext!(title, limits=(0,21,0,28), proj=:linear, view=:none,\n\t        attrib=(font=(50,\"ZapfChancery-MediumItalic\"), justify=:CB), scale=1, show=true)","category":"page"},{"location":"gallery/historic/ex05/","page":"A 3-D illuminated surface","title":"A 3-D illuminated surface","text":"See also GMT ex05","category":"page"},{"location":"gallery/historic/ex03/#Image-presentations","page":"Image presentations","title":"Image presentations","text":"","category":"section"},{"location":"gallery/historic/ex03/","page":"Image presentations","title":"Image presentations","text":"\tgmt(\"gmtset GMT_FFT kiss\")\n\t\n\tcpos  = fitcircle(\"@sat_03.xyg\", L=2, F=:m)\n\tcposx = cpos[1].data[1,1];\t\tcposy = cpos[1].data[1,2]\n\tppos  = fitcircle(\"@sat_03.xyg\", L=2, F=:n)\n\tpposx = ppos[1].data[1,1];\t\tpposy = ppos[1].data[1,2]\n\n\t# Now we use \"project\" to gmt project the data in both sat.xyg and ship.xyg\n\t# into data.pg, where g is the same and p is the oblique longitude around\n\t# the great circle. We use -Q to get the p distance in kilometers, and -S\n\t# to sort the output into increasing p values.\n\n\tsat_pg  = gmt(@sprintf(\"project @sat_03.xyg -C%f/%f -T%f/%f -S -Fpz -Q\", cposx, cposy, pposx, pposy));\n\tship_pg = gmt(@sprintf(\"project @ship_03.xyg -C%f/%f -T%f/%f -S -Fpz -Q\", cposx, cposy, pposx, pposy));\n\tsat_pg  = sat_pg[1].data;\n\tship_pg = ship_pg[1].data;\n\n\t# The gmtinfo utility will report the minimum and maximum values for all columns. \n\t# We use this information first with a large -I value to find the appropriate -R\n\t# to use to plot the .pg data. \n\tR = gmtinfo([sat_pg; ship_pg], I=(100,25))\n\tR = R[1].text[1]\n\tplot(sat_pg, region=R, U=\"L/-1.75i/-1.25i/\\\"Example 3a in Cookbook\\\"\", frame=(axes=:WeSn,\n\t\txaxis=(annot=500, ticks=100, label=\"Distance along great circle\"), yaxis=(annot=100, ticks=25,\n        label=\"Gravity anomaly (mGal)\")), x_off=5, y_off=3.75, W=:thick, figsize=(20,12.7))\n\tplot!(ship_pg, S=\"p0.03i\", savefig=\"example_03a\", show=1)\n\n\t# From this plot we see that the ship data have some \"spikes\" and also greatly\n\t# differ from the satellite data at a point about p ~= +250 km, where both of\n\t# them show a very large anomaly.\n\n\t# To facilitate comparison of the two with a cross-spectral analysis using \"spectrum1d\",\n\t# we resample both data sets at intervals of 1 km.  First we find out how the data are\n\t# typically spaced using $AWK to get the delta-p between points and view it with \"histogram\".\n\n\thistogram(diff(ship_pg, dims=1), W=0.1, G=:black, x_off=5, y_off=3.75, frame=0, title=\"Ship\", U=\"L/-1.75i/-1.25i/\\\"Example 3b in Cookbook\\\"\", figsize=7.5)\n\thistogram!(diff(sat_pg, dims=1), W=0.1, G=:black, x_off=12.5, frame=0, title=\"Ship\", figsize=7.5)\n\n\t# This experience shows that the satellite values are spaced fairly evenly, with\n\t# delta-p between 3.222 and 3.418.  The ship values are spaced quite unevenly, with\n\t# delta-p between 0.095 and 9.017.  This means that when we want 1 km even sampling,\n\t# we can use \"gmt sample1d\" to interpolate the sat data, but the same procedure applied\n\t# to the ship data could alias information at shorter wavelengths.  So we have to use\n\t# \"filter1d\" to resample the ship data.  Also, since we observed spikes in the ship\n\t# data, we use a median filter to clean up the ship values.  We will want to use \"paste\"\n\t# to put the two sampled data sets together, so they must start and end at the same\n\t# point, without NaNs.  So we want to get a starting and ending point which works for\n\t# both of them.  This is a job for gmt gmtmath UPPER/LOWER.\n\n\tsampr1 = gmt(\"gmtmath ? -Ca -Sf -o0 UPPER CEIL =\",  [ship_pg[1:1,:]; sat_pg[1:1,:]])\n\tsampr2 = gmt(\"gmtmath ? -Ca -Sf -o0 LOWER FLOOR =\", [ship_pg[end:end,:]; sat_pg[end:end,:]])\n\n\t# Now we can use sampr1|2 in gmt gmtmath to make a sampling points file for gmt sample1d:\n\tsamp_x = gmt(@sprintf(\"gmtmath -T%d/%d/1 -N1/0 T =\", sampr1[1].data[1,1], sampr2[1].data[1,1]))\n\n\t# Now we can resample the gmt projected satellite data:\n\tsamp_sat_pg = sample1d(sat_pg, samp_x, N=true)\n\n\t# For reasons above, we use gmt filter1d to pre-treat the ship data.  We also need to sample\n\t# it because of the gaps > 1 km we found. So we use gmt filter1d | gmt sample1d.  We also\n\t# use the -E on gmt filter1d to use the data all the way out to sampr1/sampr2 :\n\tt = gmt(@sprintf(\"filter1d -Fm1 -T%d/%d/1 -E\", sampr1[1].data[1], sampr2[1].data[1]), ship_pg)\n\tsamp_ship_pg = sample1d(t, samp_x, N=true, savefig=\"example_03b\", show=1)\n\n\t# Now we plot them again to see if we have done the right thing:\n\tplot(sat_pg, region=R, U=\"L/-1.75i/-1.25i/\\\"Example 3c in Cookbook\\\"\", frame=(axes=:WeSn,\n\t\txaxis=(annot=500, ticks=100, label=\"Distance along great circle\"), yaxis=(annot=100, ticks=25,\n        label=\"Gravity anomaly (mGal)\")), x_off=5, y_off=3.75, W=:thick, figsize=(20,12.7))\n\tplot!(samp_ship_pg, S=\"p0.03i\", savefig=\"example_03c\", show=1)\n\n\t# Now to do the cross-spectra, assuming that the ship is the input and the sat is the output \n\t# data, we do this:\n\tt = [samp_ship_pg[1].data[:,2] samp_sat_pg[1].data[:,2]]\n\tspects = spectrum1d(t, S=256, D=1, W=true, C=true, N=true)\n \n\t# Now we want to plot the spectra. The following commands will plot the ship and sat \n\t# power in one diagram and the coherency on another diagram, both on the same page.  \n\t# Note the extended use of gmt pstext and gmt psxy to put labels and legends directly on the\n\t# plots. For that purpose we often use -Jx1i and specify positions in inches directly:\n\n\tplot(spects[1].data[:,[1,16,17]], region=(1,1000,0,1), frame=(axes=WeSn, bg=(240,255,240), xaxis=(annot=1, ticks=3, p=[], label=\"Wavelength (km)\"), yaxis=(annot=0.25, ticks=0.05, label=\"Coherency@+2@+\")), \n\t\tx_off=\"2.5i\", y_off=\"1.5i\", S=\"c0.07i\", G=:purple, E=\"y/0.5p\", figsize=(\"-4il\", \"3.75i\"))\n\t\n\ttext!(text_record(\"Coherency@+2@+\"), F=\"+cTR+f18p,Helvetica-Bold\", D=\"j0.1i\")\n\n\tplot!(spects[1].data[:,1:3], region=(1,1000,0.1,10000), frame=(axes=WeSn, title=\"Ship and Satellite Gravity\", bg=(240,255,240), xaxis=(annot=1, ticks=3, p=[]), yaxis=(annot=0.25, ticks=0.05, label=\"Power (mGal@+2@+km)\")), G=:red, S=\"T0.07i\", y_off=\"4.2i\", E=\"y/0.5p\", figsize=(\"-4il\",\"3.75il\"))\n\n\tplot!(spects[1].data[:,[1,4,5]], G=:blue, S=\"c0.07i\", E=\"y/0.5p\")\n\ttext!(text_record(\"Input Power\"), region=(0,4,0,3.75), F=\"+cTR+f18p,Helvetica-Bold\", D=\"j0.1i\", scale=\"1i\")\n\n\tleg = text_record([\"S 0.1i T 0.07i red - 0.3i Ship\", \"S 0.1i c 0.07i blue - 0.3i Satellite\"])\n\tlegend!(leg, D=\"jBL+w1.2i+o0.25i\", F=\"+gwhite+pthicker\", par=(FONT_ANNOT_PRIMARY=\"14,Helvetica-Bold\",), savefig=\"example_03\", show=1)\n\n\t# Now we wonder if removing that large feature at 250 km would make any difference.\n\t# We could throw away a section of data with $AWK or sed or head and tail, but we\n\t# demonstrate the use of \"gmt trend1d\" to identify outliers instead.  We will fit a\n\t# straight line to the samp_ship.pg data by an iteratively-reweighted method and\n\t# save the weights on output.  Then we will plot the weights and see how things look:\n\n\tsamp_ship_xw = trend1d(samp_ship_pg, F=:xw, N=\"p2+r\")\n\tplot(samp_ship_pg, region=R, U=\"L/-1.75i/-1.25i/\\\"Example 3c in Cookbook\\\"\", frame=(axes=:WeSn,\n\t\txaxis=(annot=500, ticks=100, label=\"Distance along great circle\"), yaxis=(annot=100, ticks=25,\n        label=\"Gravity anomaly (mGal)\")), x_off=5, y_off=3.75, S=\"p0.03i\", figsize=(20.3,10.2))\n\n\tR = gmtinfo(samp_ship_xw, I=(100,1.1))\n\tplot!(samp_ship_xw, region=R[1].text[1], y_off=\"4.25i\", frame=(axes=:Wesn, xaxis=(ticks=100,), yaxis=(annot=0.5, ticks=0.1, label=:Weight)), S=\"p0.03i\", figsize=(\"8i\",\"4.25i\"), savefig=\"example_03d\", show=1)","category":"page"},{"location":"gallery/historic/ex03/","page":"Image presentations","title":"Image presentations","text":"See also GMT ex03","category":"page"},{"location":"bar3/#bar3","page":"bar3","title":"bar3","text":"","category":"section"},{"location":"bar3/","page":"bar3","title":"bar3","text":"bar3(cmd0::String=\"\", arg1=nothing; kwargs...)","category":"page"},{"location":"bar3/","page":"bar3","title":"bar3","text":"Plots a 3D bar graph. The input can either be a file name of a file with at least three columns (x,y,z), but optionally more, a GMTdatset object with also three or more columns. However, the simplest usage is to provide a grid object (a GMTgrid) or a MxN matrix (with M,N > 3) and accept the defaults set for these data types. When not using grids or matrices the width keyword (see below) is mandatory, unless both xsize and ysize are given as two extra data columns. When using file names, however, it is necessary to tell the program if it is going to read a grid or a table. That is achieved by using grd=true or dataset=true, respectively.","category":"page"},{"location":"bar3/","page":"bar3","title":"bar3","text":"This module is a subset of plot to make it simpler to draw 3D bar plots. So not all (fine) controlling parameters are listed here. For a finer control, user should consult the plot module.","category":"page"},{"location":"bar3/#Parameters","page":"bar3","title":"Parameters","text":"","category":"section"},{"location":"bar3/","page":"bar3","title":"bar3","text":"B or axes or frame\nSet map boundary frame and axes attributes. Default is to draw and annotate left, bottom and vertical axes and just draw left and tp axes. More at frame\nJ or proj : proj=<parameters>\nSelect map projection. Default is linear and 12 cm width. More at proj\nR or region or limits : – limits=(xmin, xmax, ymin, ymax, zmin, zmax) | limits=(BB=(xmin, xmax, ymin, ymax, zmin, zmax),)  | ...more\n Specify the region of interest. Default limits are computed from data extents. More at limits\nG or markerfacecolor or MarkerFaceColor or mc or fill\n Select color or pattern for filling of bars [Default is default color]. See Setting color for extend  color selection (including color map generation).\nbar\n column (3-D) extending from base to z. By default, base is 0 and the bar widths are 0.85 of the width in  x-units. You can change this by using (in alternative):\nwidth=xx\n where xx is the bar width in x-units (bar base remains = 0).\nbase=xx\n where xx is the base value (bar width remains = 0.85).\nbar=??\n where ?? is a string with a full GMT syntax for this option (-Sb)\nbar=(width=xx,unit=xx,base=xx,height=xx)\n Full featured option. Attention, the order of members matters. unit must always come after width,  but otherwise they are all optional.\nwidth\n The bar width in x-units. To specify it in plot units, use the unit member with cm, inch or point.\nunit\n In case width is given in plot units. Valid units are cm,inchorpoint`.\nbase=xx\n where xx is the base value.\nheight\n If the bar height is measured relative to base xx [Default is relative to origin].  Cannot be used together with base.\nThe facet colors will be modified to simulate shading. Use noshade=true to disable such 3-D illumination.  Normally a single z value is considered. For multi-band columns, use nbands=n (and provide n z-values  on input; these must be monotonically increasing up the column) or Nbands=n (and expect n of dz  increments that must be summed to yield actual z values). The multi-band column symbol requires a  fill=cmap (i.e. the use of a colormap) and will use the band number (0, 1, nbands-1) to assign the band  color. The way to use these options is also as a separate keyword, or as an extra member of the bar tuple.\nnbands=n or Nbands=n\nor\nbar=(width=xx,unit=xx,base=xx,height=xx,nbands=xx)  (or Nbands=xx for last element)\np or view\n Default is viewpoint from an azimuth of 200 and elevation of 30 degrees.\n Specify the viewpoint in terms of azimuth and elevation. The azimuth is the horizontal rotation about the z-axis as measured in degrees from the positive y-axis. That is, from North. This option is not yet fully  expanded. Current alternatives are:\nview=??\n A full GMT compact string with the full set of options.\nview=(azim,elev)\n A two elements tuple with azimuth and elevation\nview=true\n To propagate the viewpoint used in a previous module (makes sense only in bar3)","category":"page"},{"location":"bar3/#Examples","page":"bar3","title":"Examples","text":"","category":"section"},{"location":"bar3/","page":"bar3","title":"bar3","text":"View a grid as a 3D bar plot","category":"page"},{"location":"bar3/","page":"bar3","title":"bar3","text":"G = gmt(\"grdmath -R-15/15/-15/15 -I0.5 X Y HYPOT DUP 2 MUL PI MUL 8 DIV COS EXCH NEG 10 DIV EXP MUL =\");\ncmap = grd2cpt(G);      # Compute a colormap with the grid's data range\nbar3(G, lw=:thinnest, color=cmap, show=true)","category":"page"},{"location":"bar3/#See-also","page":"bar3","title":"See also","text":"","category":"section"},{"location":"bar3/","page":"bar3","title":"bar3","text":"The GMT man page","category":"page"},{"location":"makecpt/#makecpt","page":"makecpt","title":"makecpt","text":"","category":"section"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"makecpt(cmd0::String=\"\", arg1=nothing; kwargs...)","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"Make static color palette tables (CPTs).","category":"page"},{"location":"makecpt/#Description","page":"makecpt","title":"Description","text":"","category":"section"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"Make static color palette tables (CPTs). You define an equidistant set of contour intervals or pass your own z-table or list, and create a new CPT based on an existing master (dynamic) CPT. The resulting CPT can be reversed relative to the master cpt, and can be made continuous or discrete.","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"The CPT includes three additional colors beyond the range of z-values. These are the background color (B) assigned to values lower than the lowest z-value, the foreground color (F) assigned to values higher than the highest z-value, and the NaN color (N) painted wherever values are undefined.","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"If the master CPT includes B, F, and N entries, these will be copied into the new master file. If not, the parameters COLOR_BACKGROUND, COLOR_FOREGROUND, and COLOR_NAN from the gmt.conf file or the command line will be used. This default behavior can be overruled using the options bg, overrule_bg or no_bg.","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"The color model (RGB, HSV or CMYK) of the palette created by makecpt will be the same as specified in the header of the master CPT. When there is no COLOR_MODEL entry in the master CPT, the COLOR_MODEL specified in the gmt.conf file or on the command line will be used.","category":"page"},{"location":"makecpt/#Optional-Arguments","page":"makecpt","title":"Optional Arguments","text":"","category":"section"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"A or alpha or transparency : – alpha=xx | alpha=\"xx+a\"\n  Sets a constant level of transparency (0-100) for all color slices.   Append +a to also affect the fore-, back-, and nan-colors","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":".. include:: createcpt.rst","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"D or bg or background : – bg=true | bg=:i\n  Select the back- and foreground colors to match the colors for lowest and highest z-values in the   output CPT [Default uses the colors specified in the master file, or those defined by the parameters   COLOR_BACKGROUND, COLOR_FOREGROUND, and COLOR_NAN]. Append i to match the colors for the lowest   and highest values in the input (instead of the output) CPT.\nE or data_levels : –  data_levels=nlevels\n  Implies reading data table(s) (from an array or file). We use the last data column to determine the data range;   use incol to select another column, and use binary_in if your data table is native binary. This z-range   information is used instead of providing the range option. We create a linear color table by dividing the   table data z-range into nlevels equidistant slices. If nlevels is not given it defaults to the number of   levels in the chosen CPT.\nF or color_model : – color_model=true|:r|:h|:c[\"+c\"]\n  Force output CPT to be written with r/g/b codes, gray-scale values or color name (the default) or r/g/b codes   only (r), or h-s-v codes (h), or c/m/y/k codes (c). Optionally or alternatively, append +c to   write discrete palettes in categorical format.\nG or truncate : – truncate=(zlo,zhi)\n  Truncate the incoming CPT so that the lowest and highest z-levels are to zlo and zhi. If one of these   equal NaN then we leave that end of the CPT alone. The truncation takes place before any resampling.   See also manipulating_CPTs\nI or inverse or reverse : – inverse=true | inverse=:z\n  Reverse the sense of color progression in the master CPT. Also exchanges the foreground and background colors,   including those specified by the parameters COLOR_BACKGROUND and COLOR_FOREGROUND. Use inverse=:z to   reverse the sign of z-values in the color table. Note that this change of z-direction happens before truncate   and range values are used so the latter much be compatible with the changed z-range. See also manipulating_CPTs\nM or overrule_bg : – overrule_bg=true\n  Overrule background, foreground, and NaN colors specified in the master CPT with the values of the parameters   COLOR_BACKGROUND, COLOR_FOREGROUND, and COLOR_NAN specified in the gmt.conf file or on the command line.   When combined with bg, only COLOR_NAN is considered.\nN or no_bg or nobg : – no_bg=true\n  Do not write out the background, foreground, and NaN-color fields [Default will write them].\nQ or log : – log=true\n  For logarithmic interpolation scheme with input given as logarithms. Expects input z-values provided via range   to be log10(z), assigns colors, and writes out z.\nS or auto : – auto=str\n  Determine a suitable range for the range option from the input table.   Choose from several types of range determinations:   auto=:r will use the data range min/max, auto=inc[\"+d\"] will use the data min/max but rounded to   nearest inc (append \"+d\" to resample to a discrete CPT), auto=\"ascl\" will make a symmetric range   around the average (i.e., mean) and ±scl * sigma, auto=\"mscl\" will make a symmetric range around   the median and ±scl * L1_scale, auto=\"pscl\" will make symmetric range around mode (i.e., LMS; least   median of squares) and ±scl * LMS_scale, while auto=\"qlow/high\" sets the range from low quartile   to high quartile (in percentages). We use the last data column for this calculation; use input_col if you   need to adjust the column orders.\nT or range : – range=(min,max,inc[,:number,:log2,:log10]) | range=[list] | range=file\n  Defines the range of the new CPT by giving the lowest and highest z-value (and optionally an interval). If range   is not given, the existing range in the master CPT will be used intact. The values produces defines the color   slice boundaries. If :number is added as a fourth element then inc is meant to indicate the number of   equidistant coordinates instead. Use :log2 if we should take log2 of min and max, get their nearest integers,   build an equidistant log2-array using inc integer increments in log2, then undo the log2 conversion. Same for :log10.   For details on array creation, see Generate 1D Array.\nV or verbose : – verbose=true | verbose=level\n  Select verbosity level. More at verbose\nW or wrap or categorical : – wrap=true | wrap=:w\n  Do not interpolate the input color table but pick the output colors starting at the beginning of the color table,   until colors for all intervals are assigned. This is particularly useful in combination with a categorical color   table, like \"categorical\". Alternatively, use wrap=:w to produce a wrapped (cyclic) color table that endlessly   repeats its range.\nZ or continuous : – continuous=true\n  Force a continuous CPT when building from a list of colors and a list of z-values [discrete].","category":"page"},{"location":"makecpt/#Color-Hinges","page":"makecpt","title":"Color Hinges","text":"","category":"section"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"Some of the GMT master dynamic CPTs are actually two separate CPTs meeting at a hinge. Usually, colors may change dramatically across the hinge, which is used to separate two different domains (e.g., land and ocean across the shoreline, for instance). CPTs with a hinge will have their two parts stretched to the required range separately, i.e., the bottom part up to the hinge will be stretched independently of the part from the hinge to the top, according to the prescribed new range. Hinges are either hard or soft. Soft hinges must be activated by appending hinge=val to the CPT name. If the selected range does not include an activated soft or hard hinge then we only resample colors from the half of the CPT that pertains to the range. See Of Colors and Color Legends for more information.","category":"page"},{"location":"makecpt/#Discrete-versus-Continuous-CPT","page":"makecpt","title":"Discrete versus Continuous CPT","text":"","category":"section"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"All CPTs can be stretched, but only continuous CPTs can be sampled at new nodes (i.e., by given an increment in range). We impose this limitation to avoid aliasing the original CPT.","category":"page"},{"location":"makecpt/#Examples","page":"makecpt","title":"Examples","text":"","category":"section"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"To make a CPT with z-values from -200 to 200, with discrete color changes every 25, and using a polar blue-white-red colortable:","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"    C = makecpt(cmap=:polar, range=(-200,200,25))","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"To make an equidistant CPT from z = -2 to 6 using the continuous default turbo rainbow of colors:","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"    C = makecpt(range=(2,6))","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"To use the GEBCO look-alike CPT with its default range for bathymetry and save the file on disk, run","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"    makecpt(cmap=:gebco, cptname=\"my_gebco.cpt\")","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"or simply use -Cgebco directly in the application that needs the color table. To create a 24-level color table suitable for plotting the depths in the remote ata table v3206_06.txt (with lon, lat, depths), run","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"    makecpt(\"@v3206_06.txt\", cmap=:gebco, nlevels=24)","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"To use the gebco color table but reverse the z-values so it can be used for positive depth values, try","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"    makecpt(cmap=:gebco, reverse=:z)","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"To make a custom discrete color table for depth of seismicity, using red color for hypocenters between 0 and 100 km, green for 100-300 km, and blue for deep (300-1000 km) earthquakes, use","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"    makecpt(cmap=(:red,:green,:blue), range=[0,100,300,1000], no_bg=true)","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"To make a continuous CPT from white to blue as z goes from 3 to 10, try","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"    makecpt(cmap=\"white,blue\", range=(3,10))","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"To make a wrapped (cyclic) CPT from the jet table over the interval 0 to 500, i.e., the color will be wrapped every 500 z-units so that we always get a color regardless of the z value, try","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"    makecpt(cmap=:jet, range=(0,500), wrap=:w)","category":"page"},{"location":"makecpt/#Bugs","page":"makecpt","title":"Bugs","text":"","category":"section"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"Since makecpt will also interpolate from any existing CPT you may have in your directory, you should not use one of the listed cpt names as an output filename; hence the my_gebco.cpt in the example. If you do create a CPT of such a name, e.g., rainbow.cpt, then makecpt will read that file first and not look for the master CPT in the shared GMT directory.","category":"page"},{"location":"makecpt/#References","page":"makecpt","title":"References","text":"","category":"section"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"Crameri, F., (2018). Scientific colour-maps. Zenodo. http://doi.org/10.5281/zenodo.1243862","category":"page"},{"location":"makecpt/","page":"makecpt","title":"makecpt","text":"Crameri, F. (2018), Geodynamic diagnostics, scientific visualisation and StagLab 3.0, Geosci. Model Dev., 11, 2541-2562, doi:10.5194/gmd-11-2541-2018.","category":"page"},{"location":"gallery/tables/","page":"AGU","title":"AGU","text":"Colored bars Bars 3D Bars 3D peaks Scatter Cart\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/tables/","page":"AGU","title":"AGU","text":"Scatter Polar Stepped histogram Flower Snake Skier\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/tables/","page":"AGU","title":"AGU","text":"Mat angles Arrow I Arrow II Arrow III\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/tables/","page":"AGU","title":"AGU","text":"Bezier Decorated Decorated txt Error bars\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/tables/","page":"AGU","title":"AGU","text":"Daylight terminator Hello I Spiders Compass\n(Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"gallery/scripts_agu/snake/#The-snake-skier","page":"The snake skier","title":"The snake skier","text":"","category":"section"},{"location":"gallery/scripts_agu/snake/","page":"The snake skier","title":"The snake skier","text":"Plot a skier on sinusoid. To run this script one need to have the symbol file \"ski_alpine.eps\"","category":"page"},{"location":"gallery/scripts_agu/snake/","page":"The snake skier","title":"The snake skier","text":"x = GMT.linspace(0, 2pi);  y = cos.(2x)*0.9;\n\nlines(x,y,                           # The data\n      limits=(0,6.5,-1,2.0),         # Fig limits\n      pen=(lw=7,lc=:sienna, arrow=(len=2.2,shape=:arrow, fill=:darkgreen)),  # The \"Snake\"\n      figsize=(16,12),               # Fig size\n      title=\"Double Snake\")\nplot!(3.49, 0.97,                    # Coordinates where to plot symbol\n      symbol=\"kski_alpine/1.7\",      # Fill patern file\n      fill=:black),                  # Fill the symbol in black\n      show=true)                     # Show the result","category":"page"},{"location":"gallery/scripts_agu/snake/","page":"The snake skier","title":"The snake skier","text":"As one-liners (to facilitate copy-paste):","category":"page"},{"location":"gallery/scripts_agu/snake/","page":"The snake skier","title":"The snake skier","text":"x = linspace(0, 2pi);  y = cos.(2x)*0.9;\nlines(x,y, limits=(0,6.5,-1,2.0), figsize=(16,12), title=\"Double Snake\",\n      pen=(lw=7,lc=:sienna,arrow=(len=2.2,shape=:arrow, fill=:darkgreen)), title=\"Double Snake\")\nplot!(3.49, 0.97, symbol=\"kski_alpine/1.7\", fill=:black, show=true)","category":"page"},{"location":"gallery/scripts_agu/snake/","page":"The snake skier","title":"The snake skier","text":"<img src=\"../figs/snake.png\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"grdcontour/#grdcontour","page":"grdcontour","title":"grdcontour","text":"","category":"section"},{"location":"grdcontour/","page":"grdcontour","title":"grdcontour","text":"grdcontour(cmd0::String=\"\", arg1=nothing; kwargs...)","category":"page"},{"location":"grdcontour/","page":"grdcontour","title":"grdcontour","text":"Make contour map using a grid.","category":"page"},{"location":"grdcontour/","page":"grdcontour","title":"grdcontour","text":"Read a 2-D grid and produces a contour map by tracing each contour through the grid. Various options that affect the plotting are available. Alternatively, the x, y, z positions of the contour lines may be saved to one or more output files (or memory) and no plot is produced.","category":"page"},{"location":"grdcontour/#Required-Arguments","page":"grdcontour","title":"Required Arguments","text":"","category":"section"},{"location":"grdcontour/","page":"grdcontour","title":"grdcontour","text":"The 2-D gridded data set to be contoured.","category":"page"},{"location":"grdcontour/#Optional-Arguments","page":"grdcontour","title":"Optional Arguments","text":"","category":"section"},{"location":"grdcontour/","page":"grdcontour","title":"grdcontour","text":"A or annot : – annot=annot_int | annot=(int=annot_int, disable=true, single=true, labels=labelinfo)\nannot_int is annotation interval in data units; it is ignored if contour levels are given in a file. [Default is no annotations]. Use annot=(disable=true,) to disable all annotations implied by cont. Alternatively do annot=(single=true, int=val) to plot val as a single contour. The optional labelinfo controls the specifics of the label formatting and consists of a named tuple with the following control arguments Label formatting\nB or axes or frame\nSet map boundary frame and axes attributes. More at frame\nC or cont or contours or levels : – cont=cont_int\nThe contours to be drawn may be specified in one of three possible ways:\nIf cont_int has the suffix \".cpt\" and can be opened as a file, it is assumed to be a CPT. The color boundaries are then used as contour levels. If the CPT has annotation flags in the last column then those contours will be annotated. By default all contours are labeled; use annot=(disable=true,)) (or annot=:none) to disable all annotations.\nIf cont_int is a file but not a CPT, it is expected to contain contour levels in column 1 and a C(ontour) OR A(nnotate) in col 2. The levels marked C (or c) are contoured, the levels marked A (or a) are contoured and annotated. Optionally, a third column maybe present and contain the fixed annotation angle for this contour level.\nIf cont_int is a constant or an array it means plot those contour intervals. This works also to draw single contours. E.g. contour=[0] will draw only the zero contour. The annot option offers the same possibility so they may be used together to plot a single annotated contour and another single non-annotated contour, as in anot=[10], cont=[5] that plots an annotated 10 contour and an non-annotated 5 contour. If annot is set and cont is not, then the contour interval is set equal to the specified annotation interval.\nIf a file is given and ticks is set, then only contours marked with upper case C or A will have tick-marks. In all cases the contour values have the same units as the grid. Finally, if neither cont nor annot are set then we auto-compute suitable contour and annotation intervals from the data range, yielding 10-20 contours.\nD or dump : – dump=fname\nDump contours as data line segments; no plotting takes place. Append filename template which may contain C-format specifiers. If no filename template is given we write all lines to stdout. If filename has no specifiers then we write all lines to a single file. If a float format (e.g., %6.2f) is found we substitute the contour z-value. If an integer format (e.g., %06d) is found we substitute a running segment count. If an char format (%c) is found we substitute C or O for closed and open contours. The 1-3 specifiers may be combined and appear in any order to produce the the desired number of output files (e.g., just %c gives two files, just %f would separate segments into one file per contour level, and %d would write all segments to individual files; see manual page for more examples.\n-F or force : – force=true | force=:left | force=:right\nForce dumped contours to be oriented so that higher z-values are to the left (force=:left) or right (force=:right) as we move along the contour [Default is arbitrary orientation]. Requires dump.\nG or labels : – labels=()\nThe required argument controls the placement of labels along the quoted lines. Choose among five controlling algorithms as explained in Placement methods\nJ or proj : – proj=<parameters>\n Select map projection. More at proj\nL or range : – range=(low,high) | range=:n|:p|:N|:P\nLimit range: Do not draw contours for data values below low or above high.  Alternatively, limit contours to negative (range=:n) or positive (range=:p) contours. Use upper case N or P to include the zero contour.\nN or fill : – fill=color\nFill the area between contours using the discrete color table given by color, a Setting color element. Then, cont and annot can be used as well to control the contour lines and annotations. If no color is set (fill=[]) then a discrete color setting must be given via cont instead.\nQ or cut : – cut=np | cut=length&unit[+z]\nDo not draw contours with less than np number of points [Draw all contours]. Alternatively, give instead a minimum contour length in distance units, including c (Cartesian distances using user coordinates) or C for plot length units in current plot units after projecting the coordinates. Optionally, append +z to exclude the zero contour.\nR or region or limits : – limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),) | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more   Specify the region of interest. More at limits\nS or smooth : – smooth=smoothfactor\nUsed to resample the contour lines at roughly every (gridbox_size/smoothfactor) interval.\nT or ticks : – ticks=(local_high=true, local_low=true, gap=gap, closed=true, labels=labels)\nWill draw tick marks pointing in the downward direction every gap along the innermost closed contours only; set closed=true to tick all closed contours. Use gap=(gap,length) and optionally tick mark length (append units as c, i, or p) or use defaults [\"15p/3p\"]. User may choose to tick only local highs or local lows by specifying local_high=true, local_low=true, respectively. Set labels to annotate the centers of closed innermost contours (i.e., the local lows and highs). If no labels (i.e, set labels=\"\") is set, we use - and + as the labels. Appending exactly two characters, e.g., labels=:LH, will plot the two characters (here, L and H) as labels. For more elaborate labels, separate the low and hight label strings with a comma (e.g., labels=\"lo,hi\"). If a file is given by cont, and ticks is set, then only contours marked with upper case C or A will have tick marks [and annotations]. \nW or pen : – pen=(annot=true, contour=true, pen=pen, colored=true, cline=true, ctext=true)\nannot=true if present, means to annotate contours or contour=true for regular contours [Default]. The pen sets the attributes for the particular line. Default pen for annotated contours: pen=(075black). Regular contours use pen=(025black). Normally, all contours are drawn with a fixed color determined by the pen setting. This option may be repeated, for example to separate contour and annotated contours settings. For that the syntax changes to use a Tuple of NamedTuples, e.g.  pen=((annot=true contour=true pen=pen) (annot=true contour=true pen=pen)). If the modifier pen=(cline=true) is used then the color of the contour lines are taken from the CPT (see cont). If instead pen=(ctext=true) is appended then the color from the cpt file is applied to the contour annotations. Select pen=(colored=true) for both effects.\nZ or scale : – scale=factor | scale=(factor=factor, shift=shift, periodic=true)\nUse to subtract shift from the data and multiply the results by factor before contouring starts. (Numbers in annot, cont, range refer to values after this scaling has occurred.) Use periodic=true to indicate that this grid file contains z-values that are periodic in 360 degrees (e.g., phase data, angular distributions) and that special precautions must be taken when determining 0-contours.\nU or time_stamp : – time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n Draw GMT time stamp logo on plot. More at timestamp\nV or verbose : – verbose=true | verbose=level\n Select verbosity level. More at verbose\nW or pen : – pen=pen\n Set pen attributes for lines or the outline of symbols [Defaults: width = default, color = black, style = solid].\nX or x_off or x_offset : – x_off=[] | x_off=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : – y_off=[] | y_off=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off","category":"page"},{"location":"grdcontour/#Examples","page":"grdcontour","title":"Examples","text":"","category":"section"},{"location":"grdcontour/","page":"grdcontour","title":"grdcontour","text":"Contour the peaks function. cont=1 and annot=2 means draw contours at every 1 unit of the G grid and annotate at every other contour line:","category":"page"},{"location":"grdcontour/","page":"grdcontour","title":"grdcontour","text":"    G = GMT.peaks();\n    grdcontour(G, cont=1, annot=2, show=true)","category":"page"},{"location":"grdcontour/","page":"grdcontour","title":"grdcontour","text":"For a more elaborated example see Contour maps","category":"page"},{"location":"grdcontour/#See-also","page":"grdcontour","title":"See also","text":"","category":"section"},{"location":"grdcontour/","page":"grdcontour","title":"grdcontour","text":"The GMT man page","category":"page"},{"location":"bar/#bar","page":"bar","title":"bar","text":"","category":"section"},{"location":"bar/","page":"bar","title":"bar","text":"bar(cmd0::String=\"\", arg1=[]; kwargs...)","category":"page"},{"location":"bar/","page":"bar","title":"bar","text":"Reads (x,y) pairs and plots a bar graph. This module is a subset of plot to make it simpler to draw bar plots. So not all (fine) controlling parameters are listed here. For a finer control, user should consult the plot module.","category":"page"},{"location":"bar/","page":"bar","title":"bar","text":"If input is a MxN array and N > 2 it will plot a bar-group with M groups and N-1 bars in each group (first column holds always the coordinates).","category":"page"},{"location":"bar/#Parameters","page":"bar","title":"Parameters","text":"","category":"section"},{"location":"bar/","page":"bar","title":"bar","text":"B or axes or frame\nSet map boundary frame and axes attributes. Default is to draw and annotate left and bottom axes. More at frame\nJ or proj : – proj=<parameters>\nSelect map projection. Default is linear and 14 cm width. More at proj\nR or region or limits : – limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more \n Specify the region of interest. Default limits are computed from data extents. More at limits\nG or markerfacecolor or MarkerFaceColor or mc or fill\n Select color or pattern for filling of symbols [Default is no fill]. Note that plot will search for fill  and pen settings in all the segment headers (when passing a GMTdaset or file of a multi-segment dataset)  and let any values thus found over-ride the command line settings (but those must be provided in the terse GMT  syntax). See Setting color for extend color selection (including color map generation).\nbar\n Vertical bar extending from base to y. By default, base is 0 and the bar widths are 0.8 of the width in  x-units. You can change this by using (in alternative):\nwidth=xx\n where xx is the bar width in x-units (bar base remains = 0).\nbase=xx\n where xx is the base value (bar width remains = 0.8).\nbar=??\n where ?? is a string with a full GMT syntax for this option (-Sb)\nbar=(width=xx,unit=xx,base=xx,height=xx)\n Attention, the order of members matters but only width is mandatory.\nwidth\n The bar width in x-units. To specify it in plot units, use the unit member with cm, inch or point.\nunit\n In case width is given in plot units. Valid units are cm, inch or point.\nbase=xx\n where xx is the base value.\nheight\n If the bar height is measured relative to base xx [Default is relative to origin].  Cannot be used together with base.\nhbar\n Horizontal bar extending from base to x. Same as bar but now with respect to y axis, except that one  cannot use width or base to change just those defaults (the use of it is restricted to the vertical  bars case).\nfill=[\"color1\", \"color2\", ...] | fill=(\"color1\", \"color2\", ...) | fill=(1,2,...)\n List of colors used to wrapp the bars inside each group. When using numbers that means patterns codes.\nfillalpha=[...]\n When fill was used, control the transparency level. Numbers v=can be flots <= 1.0 or integeres in 0-100 range.\nstack\n Plot a vertically stacked group plot","category":"page"},{"location":"bar/#Examples","page":"bar","title":"Examples","text":"","category":"section"},{"location":"bar/","page":"bar","title":"bar","text":"A simple bar plot with 10 bars and automatic limits.","category":"page"},{"location":"bar/","page":"bar","title":"bar","text":"    bar(rand(10), show=true)","category":"page"},{"location":"bar/","page":"bar","title":"bar","text":"A bar group with selected colors and transparency.","category":"page"},{"location":"bar/","page":"bar","title":"bar","text":"    bar([0. 1 2 3; 1 2 3 4], fillalpha=[0.3 0.5 0.7], show=1, fill=[\"red\" \"green\" \"blue\"])","category":"page"},{"location":"bar/","page":"bar","title":"bar","text":"A bar group with bars filled with patterns.","category":"page"},{"location":"bar/","page":"bar","title":"bar","text":"    bar([0 1 2 3; 1 2 3 4], fill=(1,2,3), show=1)","category":"page"},{"location":"bar/","page":"bar","title":"bar","text":"A bar group with error bars","category":"page"},{"location":"bar/","page":"bar","title":"bar","text":"    bar([0. 1 2 3; 1 2 3 4], error_bars=(y=[0.1 0.2 0.33; 0.2 0.3 0.4],), show=1)","category":"page"},{"location":"bar/#See-also","page":"bar","title":"See also","text":"","category":"section"},{"location":"bar/","page":"bar","title":"bar","text":"The GMT man page","category":"page"},{"location":"gallery/scripts_agu/lines/#Lines","page":"Lines","title":"Lines","text":"","category":"section"},{"location":"gallery/scripts_agu/lines/","page":"Lines","title":"Lines","text":"Plot some line examples","category":"page"},{"location":"gallery/scripts_agu/lines/","page":"Lines","title":"Lines","text":"plot([0 0; 10 1], limits=(-1,11,-1,11), figsize=14, lw=1, lc=:red)\nplot!([0 1; 10 2], lw=3, lc=:green)\nplot!([0 2; 10 3], pen=(3,:blue,:dashed))\nplot!([0 3; 10 4], pen=(1,:black,:dotted))\nplot!([0 4; 10 5], pen=(1,\"0/150/0\",\"-.\"))\nplot!([0 5; 10 6], pen=(4,:black,:dashed), par=(:PS_LINE_CAP,:round))\nlines!([0 7; 10 7], lw=1, lc=:sienna,\n       decorated=(quoted=true, n_labels=15, const_label=\"~\", font=25))\ntext!(mat2ds([5 7.1],\"Now, a bit harder\"), clearance=true, fill=:white,\n      font=18, justify=:MC)\nplot!([0 8; 10 9], pen=(10,:orange,\"0_20:0\"), par=(:PS_LINE_CAP,:round))\nplot!([0 9; 10 10], pen=(6,:brown,\"0_20:0\"), par=(:PS_LINE_CAP,:round))\nplot!([0 9; 10 10], pen=(3,:green,\"0_20:10\"), par=(:PS_LINE_CAP,:round),\n      show=true, savefig=\"lines.png\")","category":"page"},{"location":"gallery/scripts_agu/lines/","page":"Lines","title":"Lines","text":"<img src=\"../figs/lines.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/historic/ex43/#","page":"","title":"","text":"","category":"section"},{"location":"gallery/historic/ex43/","page":"","title":"","text":"","category":"page"},{"location":"gallery/historic/ex43/","page":"","title":"","text":"See also GMT ex43","category":"page"},{"location":"gallery/historic/ex07/#A-simple-location-map","page":"A simple location map","title":"A simple location map","text":"","category":"section"},{"location":"gallery/historic/ex07/","page":"A simple location map","title":"A simple location map","text":"    coast(region=(-50,0,-10,20), water=:lightblue, land=\"P300/26:FtanBdarkbrown\",\n          res=:low, shore=:thinnest, frame=(annot=10,), proj=:Mercator, figsize=18,\n          par=(:FORMAT_GEO_MAP, :dddF))\n    plot!(\"@fz_07.txt\", pen=\"thinner,-\")\n    scatter!(\"@quakes_07.txt\", h=1, i=\"0,1,2s0.01\", marker=:circle, fill=:red,\n             markerline=:thinnest, MarkerSize=\"3p\")\n    plot!(\"@isochron_07.txt\", pen=\"thin,blue\")\n    plot!(\"@ridge_07.txt\", pen=(:thicker,:orange))\n    legend!(text_record(\"S 0.1i c 0.08i red thinnest 0.3i ISC Earthquakes\"),\n            pos=(inside=true, anchor=:TR, width=5.6, offset=0.5),\n            box=(pen=:thick,inner=:thinner,fill=:white),\n            par=(:FONT_ANNOT_PRIMARY, \"18p,Times-Italic\"))\n    text!(text_record([-43 -5; -43 -8; -7 11], [\"SOUTH\", \"AMERICA\", \"AFRICA\"]),\n          attrib=(font=(20,\"Helvetica-Bold\",\"white=thin\"),), show=1)\n","category":"page"},{"location":"gallery/historic/ex07/","page":"A simple location map","title":"A simple location map","text":"See also GMT ex07","category":"page"},{"location":"gallery/historic/ex41/#Legend-with-tables","page":"Legend with tables","title":"Legend with tables","text":"","category":"section"},{"location":"gallery/historic/ex41/","page":"Legend with tables","title":"Legend with tables","text":"    C = makecpt(color=\"red,orange,yellow,green,bisque,cyan,magenta,white,gray\", range=(1,10,1))\n    coast(region=\"130W/50W/8N/56N\", proj=:Mercator, figsize=14, frame=:noannot,\n          land=:lightgray, water=:azure1, area=1000, shore=:faint, y_off=3,\n          par=(:MAP_FRAME_TYPE, :plain))\n    coast!(DCW=((country=\"US\", pen=:faint, fill=:lightyellow),\n                (country=\"CU\", pen=:faint, fill=:lightred),\n                (country=\"MX\", pen=:faint, fill=:lightgreen),\n                (country=\"CA\", pen=:faint, fill=:lightblue)) )\n    coast!(borders=(type=1, pen=(1,:darkred)), area=\"1000/2/2\",\n           shore=:faint, river_fill=:azure1)\n    plot!(\"@data_41.txt\", marker=\"k@symbol_41\", ms=0.25, C=C, ml=0.25, yx=true)\n    legend!(\"@table_41.txt\", region=(0,15,0,23), pos=(paper=true, anchor=(7.5,11.5),\n            width=14, justify=:BC, spacing=1.2), clearance=0.12,\n            box=(pen=true, fill=:snow1), proj=:linear, figscale=1, frame=:bare,\n            x_off=-0.5, y_off=-0.5, par=(FONT_ANNOT_PRIMARY=12, FONT_LABEL=12), show=true)","category":"page"},{"location":"gallery/historic/ex41/","page":"Legend with tables","title":"Legend with tables","text":"See also GMT ex41","category":"page"},{"location":"gallery/historic/ex01/#Contour-maps","page":"Contour maps","title":"Contour maps","text":"","category":"section"},{"location":"gallery/historic/ex01/","page":"Contour maps","title":"Contour maps","text":"\t# Purpose:    Make two contour maps based on the data in the file osu91a1f_16.nc\n\t# GMT progs:  gmtset, grdcontour, basemap, coast\n\n    \tgmtset(MAP_GRID_CROSS_SIZE_PRIMARY=0, FONT_ANNOT_PRIMARY=10, PS_CHAR_ENCODING=\"Standard+\")\n\t\n\tbasemap(limits=(0,16.5,0,19.0), frame=0, figscale=1)\n\tcoast!(limits=:global360, proj=(name=:Hammer, center=0), frame=(ticks=30,),\n\t       resolution=:crude,  land=:lightbrown, water=:lightblue, figsize=15,\n\t       x_off=0.64, y_off=0.5)\n\tgrdcontour!(\"@osu91a1f_16.nc\", cont=10, annot=(int=50,labels=(font=7,)), labels=(dist=10,),\n\t            range=(-1000,-1), pen=((contour=1,pen=\"thinnest,-\"), (annot=1, pen=\"thin,-\")),\n\t            ticks=(gap=(0.25,0.05),))\n\tgrdcontour!(\"@osu91a1f_16.nc\", cont=10, annot=(int=50,labels=(font=7,)), labels=(dist=10,),\n\t            range=(-1,1000), ticks=(gap=(0.25,0.05),))\n\n\tcoast!(limts=:d, proj=:Hammer, frame=(title=\"Low Order Geoid\", ticks=30), res=:crude,\n\t       land=:lightbrown, water=:lightblue, y_off=8.5, figsize=15)\n\tgrdcontour!(\"@osu91a1f_16.nc\", cont=10, annot=(int=50,labels=(font=7,)), labels=(dist=10,),\n\t            range=(-1000,-1), pen=((contour=1,pen=\"thinnest,-\"), (annot=1, pen=\"thin,-\")),\n\t            ticks=(gap=(0.25,0.05),labels=\"\"))\n\tgrdcontour!(\"@osu91a1f_16.nc\", cont=10, annot=(int=50,labels=(font=7,)), labels=(dist=10,),\n\t            range=(-1,100), ticks=(gap=(0.25,0.05),labels=\"\"), show=true)","category":"page"},{"location":"gallery/historic/ex01/","page":"Contour maps","title":"Contour maps","text":"See also GMT ex01","category":"page"},{"location":"gallery/historic/ex22/#World-wide-seismicity-the-last-7-days","page":"World-wide seismicity the last 7 days","title":"World-wide seismicity the last 7 days","text":"","category":"section"},{"location":"gallery/historic/ex22/","page":"World-wide seismicity the last 7 days","title":"World-wide seismicity the last 7 days","text":"    using Printf\n    D = gmtinfo(\"@usgs_quakes_22.txt\", header=1, F=:i, outcol=2)\n    n = D[1].data[1]\n    #D = gmtinfo(\"@usgs_quakes_22.txt\", header=1, colinfo=\"0T\",\n                 per_column=true, inc=1, par=(TIME_UNIT=:d,))\n    #first = D[1].data[1]\n    #last  = D[1].data[2]\n    # The above commented lines work but give a numeric time. Still have to find howto convert ot Time string\n    first = \"2017-09-01\"\n    last  = \"2017-10-01\"\n\n    # Start plotting. First lay down map, then plot quakes with size = magintude/50\":\n    coast(region=:global360, land=:burlywood, ocean=:lightblue, area=1000,\n          frame=(annot=45, grid=30, title=\"World-wide earthquake activity\"),\n          proj=(name=:EckertVI, center=180), figsize=22, y_off=7, portrait=false)\n    neis = makecpt(color=\"red,green,blue\", range=\"0,100,300,10000\", nobg=true)\n    plot!(\"@usgs_quakes_22.txt\", cmap=neis, marker=:circle, ml=:faint,\n          header=1, incol=\"2,1,3,4+s0.04\")\n\n    # Create legend input file for NEIS quake plot\n    neis_legend = text_record([\n    @sprintf(\"H 16p,Helvetica-Bold %d events during %s to %s\", n, first, last)\n    \"D 0 1p\"\n    \"N 3\"\n    \"V 0 1p\"\n    \"S 0.1i c 0.1i red 0.25p 0.2i Shallow depth (0-100 km)\"\n    \"S 0.1i c 0.1i green 0.25p 0.2i Intermediate depth (100-300 km)\"\n    \"S 0.1i c 0.1i blue 0.25p 0.2i Very deep (> 300 km)\"\n    \"D 0 1p\"\n    \"V 0 1p\"\n    \"N 7\"\n    \"V 0 1p\"\n    \"S 0.1i c 0.06i - 0.25p 0.3i M 3\"\n    \"S 0.1i c 0.08i - 0.25p 0.3i M 4\"\n    \"S 0.1i c 0.10i - 0.25p 0.3i M 5\"\n    \"S 0.1i c 0.12i - 0.25p 0.3i M 6\"\n    \"S 0.1i c 0.14i - 0.25p 0.3i M 7\"\n    \"S 0.1i c 0.16i - 0.25p 0.3i M 8\"\n    \"S 0.1i c 0.18i - 0.25p 0.3i M 9\"\n    \"D 0 1p\"\n    \"V 0 1p\"\n    \"N 1\"\n    \"G 0.25l\"\n    \"P\"\n    \"T USGS/NEIS most recent earthquakes for the last seven days. The data were\"\n    \"T obtained automatically from the USGS Earthquake Hazards Program page at\"\n    \"T @_https://earthquake.usgs.gov@_. Interested users may also receive email alerts\"\n    \"T from the USGS.\"\n    \"T This script can be called daily to update the latest information.\"\n    \"G 0.4i\"\n    \"I @USGS.png 1i RT\"\n    \"G -0.3i\"\n    \"L 12p,Times-Italic LB GMT guru @@ GMTbox\"])\n    \n    # OK, now we can actually run legend. We center the legend below the map.\n    legend!(neis_legend, pos=(anchor=:BC, offset=(0,1), width=(18,4.3)),\n            box=(pen=1,fill=:lightyellow), par=(:FONT_ANNOT_PRIMARY,10), show=true)","category":"page"},{"location":"gallery/historic/ex22/","page":"World-wide seismicity the last 7 days","title":"World-wide seismicity the last 7 days","text":"See also GMT ex22","category":"page"},{"location":"symbols/#Symbols","page":"Symbols","title":"Symbols","text":"","category":"section"},{"location":"symbols/","page":"Symbols","title":"Symbols","text":"circle | c\ncross | x\ncube | u\ncustom | k\ndiamond | d\nhexagon | h\ninverted_tri | i | v\nletter | l\noctagon | g\npentagon | n\npoint | p\nplus | +\nstar | *\nsquare | s\ntriangle | t | ^\nTriangle | T\nx-dash | -\ny-dash | y","category":"page"},{"location":"gallery/scripts_agu/solar/#Daylight-terminators","page":"Daylight terminators","title":"Daylight terminators","text":"","category":"section"},{"location":"gallery/scripts_agu/solar/","page":"Daylight terminators","title":"Daylight terminators","text":"coast(region=:global,         # Global [-180 180 -90 90]\n      proj=:EckertVI,         # Projection\n      resolution=:low,        # Coastline resolution\n      area=5000,              # Do not plot features with area (km^2) lower than this\n      borders=(1,(0.5,:gray)),# Pen settings for national borders\n      water=(175,210,255),    # Ocean's color\n      shore=0.5,              # Pen thicknes for coastlines\n      frame=(annot=:a,ticks=:a,grid=:a))  # The frame settings\nsolar!(terminators=(term=:d, date=\"2016-02-09T16:00:00\"), fill=\"navy@95\")\nsolar!(terminators=(term=:c, date=\"2016-02-09T16:00:00\"), fill=\"navy@85\")\nsolar!(terminators=(term=:n, date=\"2016-02-09T16:00:00\"), fill=\"navy@80\")\nsolar!(terminators=(term=:a, date=\"2016-02-09T16:00:00\"), fill=\"navy@80\")","category":"page"},{"location":"gallery/scripts_agu/solar/","page":"Daylight terminators","title":"Daylight terminators","text":"As one-liners (to facilitate copy-paste):","category":"page"},{"location":"gallery/scripts_agu/solar/","page":"Daylight terminators","title":"Daylight terminators","text":"coast(region=:d, proj=:EckertVI, resolution=:low, area=5000, borders=(1,(0.5,:gray)), water=(175,210,255), shore=0.5, frame=(annot=:a,ticks=:a,grid=:a))\nsolar!(terminators=(term=:d, date=\"2016-02-09T16:00:00\"), fill=\"navy@95\")\nsolar!(terminators=(term=:c, date=\"2016-02-09T16:00:00\"), fill=\"navy@85\")\nsolar!(terminators=(term=:n, date=\"2016-02-09T16:00:00\"), fill=\"navy@80\")\nsolar!(terminators=(term=:a, date=\"2016-02-09T16:00:00\"), fill=\"navy@80\", show=true)","category":"page"},{"location":"gallery/scripts_agu/solar/","page":"Daylight terminators","title":"Daylight terminators","text":"<img src=\"../figs/solar.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/scripts_agu/decorated_I/#Decorated_I","page":"Decorated_I","title":"Decorated_I","text":"","category":"section"},{"location":"gallery/scripts_agu/decorated_I/","page":"Decorated_I","title":"Decorated_I","text":"Plot a Decorated line","category":"page"},{"location":"gallery/scripts_agu/decorated_I/","page":"Decorated_I","title":"Decorated_I","text":"xy = sind.(0:180) .+ 4.5\nlines(xy, limits=(-5,185,4,6), figsize=(16,8), pen=(1,:red),\n      decorated=(dist=(2.5,0.25), symbol=:star, size=1,\n                 pen=(0.5,:green), fill=:blue, dec2=true),\n      title=:Decorated, show=true)","category":"page"},{"location":"gallery/scripts_agu/decorated_I/","page":"Decorated_I","title":"Decorated_I","text":"<img src=\"../figs/decorated_I.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/historic/ex06/#Plotting-of-histograms","page":"Plotting of histograms","title":"Plotting of histograms","text":"","category":"section"},{"location":"gallery/historic/ex06/","page":"Plotting of histograms","title":"Plotting of histograms","text":"\trose(\"@fractures_06.txt\", limits=(0,1,0,360), swap_xy=true, sector=\"10r\", radius=:n,\n         fill=:orange, x_off=4, xaxis=(annot=0.2, grid=0.2), yaxis=(annot=30, grid=30),\n         axes=(fill=:lightblue,), figsize=9, pen=1)\n\n\thistogram!(\"@v3206_06.txt\", limits=(-6000,0,0,30), y_off=12, x_off=-1.0, pen=1,\n               xaxis=(annot=2000, ticks=1000, label=\"Topography (m)\"),\n               yaxis=(annot=10, ticks=5, label=:Frequency, suffix=\" %\"),\n               axes=(axes=:WSne, title=:Histograms, fill=:lightblue), fill=:orange,\n               kind=(freq=true,), bin=250, proj=:linear, figsize=(12,6), show=true)","category":"page"},{"location":"gallery/historic/ex06/","page":"Plotting of histograms","title":"Plotting of histograms","text":"See also GMT ex06","category":"page"},{"location":"gallery/historic/ex36/#Spherical-gridding-using-Renka’s-algorithms","page":"Spherical gridding using Renka’s algorithms","title":"Spherical gridding using Renka’s algorithms","text":"","category":"section"},{"location":"gallery/historic/ex36/","page":"Spherical gridding using Renka’s algorithms","title":"Spherical gridding using Renka’s algorithms","text":"\t# Interpolate data of Mars radius from Mariner9 and Viking Orbiter spacecrafts\n\tmakecpt(cmap=:rainbow, range=(-7000,15000))\n\t# Piecewise linear interpolation; no tension\n\tGtt = sphinterpolate(\"@mars370d.txt\", region=:global, inc=1, tension=0, grid=true)\n\tgrdimage(Gtt, proj=:Hammer, figsize=15, frame=(annot=:auto, grid=:auto), y_off=18)\n\tplot!(\"@mars370d.txt\", marker=:circle, ms=0.1, fill=0,\n          frame=(annot=30, grid=30), y_off=-8)\n\t# Smoothing\n\tGtt = sphinterpolate(\"@mars370d.txt\", region=:global, inc=1, tension=3, grid=true)\n\tgrdimage!(Gtt, frame=(annot=30, grid=30), y_off=-8,  show=1)","category":"page"},{"location":"gallery/historic/ex36/","page":"Spherical gridding using Renka’s algorithms","title":"Spherical gridding using Renka’s algorithms","text":"See also GMT ex36","category":"page"},{"location":"coast/#coast","page":"coast","title":"coast","text":"","category":"section"},{"location":"coast/","page":"coast","title":"coast","text":"coast(cmd0::String=\"\"; kwargs...)","category":"page"},{"location":"coast/","page":"coast","title":"coast","text":"Plot continents, shorelines, rivers, and borders on maps","category":"page"},{"location":"coast/#Description","page":"coast","title":"Description","text":"","category":"section"},{"location":"coast/","page":"coast","title":"coast","text":"Plots grayshaded, colored, or textured land-masses [or water-masses] on maps and [optionally] draws coastlines, rivers, and political boundaries. Alternatively, it can (1) issue clip paths that will contain all land or all water areas, or (2) dump the data to an ASCII table. The data files come in 5 different resolutions: (f)ull, (h)igh, (i)ntermediate, (l)ow, and (c)rude. The full resolution files amount to more than 55 Mb of data and provide great detail; for maps of larger geographical extent it is more economical to use one of the other resolutions. If the user selects to paint the land-areas and does not specify fill of water-areas then the latter will be transparent (i.e., earlier graphics drawn in those areas will not be overwritten). Likewise, if the water-areas are painted and no land fill is set then the land-areas will be transparent. A map projection must be supplied.","category":"page"},{"location":"coast/#Required-Arguments","page":"coast","title":"Required Arguments","text":"","category":"section"},{"location":"coast/","page":"coast","title":"coast","text":"J or proj – proj=<parameters>\n Select map projection. More at proj\nR or region or limits – limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more   Specify the region of interest. More at limits","category":"page"},{"location":"coast/#Optional-Arguments","page":"coast","title":"Optional Arguments","text":"","category":"section"},{"location":"coast/","page":"coast","title":"coast","text":"-A or area : – area=(min_area[,min_level,max_level]), river_lake=true, lake=true, antarctica_ground=true, skip60S=true, skipN60S=true, percent=pct)\n Features with an area smaller than min_area in km^2 or of hierarchical level that is lower than min_level or higher than max_level will not be plotted [Default is 0/0/4 (all features)]. Level 2 (lakes) contains regular lakes and wide river bodies which we normally include as lakes; use river_lake=true to just get river-lakes or lake=true to just get regular lakes. By default we select the ice shelf boundary as the coastline for Antarctica; use antarctica_ground=true to instead select the ice grounding line as coastline. For expert users who wish to print their own Antarctica coastline and islands via plot you can use skip60S=true to skip all GSHHG features below 60S or skipN60S=true to instead skip all features north of 60S. Finally, append percent=pct to exclude polygons whose percentage area of the corresponding full-resolution feature is less than pct.\nB or axes or frame\n Set map boundary frame and axes attributes. More at frame\nC or river_fill : – river_fill=fill | river_fill=(lake=true, river_lake=true, fill=fill)\n Set the shade, color, or pattern for lakes and river-lakes [Default is the fill chosen for \"wet\" areas (water)]. Optionally, specify separate fills by using river_fill=(lake=true, fill=fill) for lakes and river_fill=(river_lake=true, fill=fill) for river-lakes. To repeate the river_fill option use a tuple of tuples.\nclip : – clip=:land |  clip=:water|ocean | clip=:end\n clip=:land or clip=:water|ocean starts a clipping path. clip=:end marks end of existing clip path. No projection information is needed. Also supply X and Y settings if you have moved since the clip started.\nD or res or resolution : – res=full | res=auto\n Selects the resolution of the data set to use full, high, intermediate, low, and crude. The resolution drops off by 80% between data sets. The default is res=auto, which chooses to automatically select the best resolution given the chosen map scale.\nE or DCW : – DCW=code1,code2,... | DCW=(country=code, continent=code, pen=pen, fill=fill)\n Select painting country polygons from the Digital Chart of the World. This is another dataset independent of GSHHG and hence the area and resolution options do not apply. DCW=\"+l\" just list the countries and their codes [plotting takes place] and DCW=\"+L\" shows states/territories for Argentina, Australia, Brazil, Canada, and the US. country or name=code(s), where code(s) is a one or more comma-separated countries using the 2-character ISO 3166-1 alpha-2 convention. To select a state of a country (if available), append .state, e.g, US.TX for Texas. To specify a whole continent, use continent=code, with continent codes AF (Africa),AN (Antarctica), AS (Asia), EU (Europe), OC (Oceania), NA (North America), or SA (South America). Use pen=pen (see Pen attributes) to draw polygon outlines and fill=fill (see Fill color/pattern) to fill them [default is no fill]. At least one of these must be specified unless dump is in effect, in which case only one DCW option can be given. It is also possible to specify the parameters using simple Tuples. For example: DCW=(\"PT\", (0.5,\"red\",\"–\"), \"blue\") plots the polygon PT with a 0.5p red dashed line and filled with blue and DCW=:PT uses a default pen of 0.5. DCW=(:PT, :blue) fills with blue. You may repeat DCW to give different groups of items their own pen/fill settings. However, since we cannot repeat a keyword, the solution to setting different groupes is to use a tuple of tuples. An example would be DCW=((country=:PT, pen=(2,:red), fill=:blue), (country=:ES, pen=(2,:blue)) ). If neither proj nor dump are set then we just print the region.\nF or box : – box=(clearance=gap, pen=pen, fill=fill, inner=(gap,pen), rounded=xx, shaded=(dx,dy[,shade]))\n Without further options, draws a rectangular border around the map scale or rose using MAP_FRAME_PEN; specify a different pen with pen=new_pen. Add fill=fill_value to fill the logo box [no fill]. Append clearance=gap where gap is either a scalar, or tuples with (xgap, ygap), or (lgap,rgap,bgap,tgap) where these items are uniform, separate in x- and y-direction, or individual side spacings between logo and border. Append inner to draw a secondary, inner border as well. We use a uniform gap between borders of 2p and the MAP_DEFAULT_PEN unless other values are specified. Append rounded=6 to draw rounded rectangular borders instead, with a 6p corner radius. You can override this radius by appending another value. Finally, append shaded=(dx,dy[,shade]) to draw an offset background shaded region. Here, dx,dy indicates the shift relative to the foreground frame [4p,4p] and shade sets the fill style to use for shading [gray50]. Requires map_scale or rose.  If both map_scale or rose, you may repeat box after each of these but remember to put repeated settings inside a tuple of tuples.\nG or land : – land=fill\n Select filling (see Fill color/pattern) \"dry\" areas. Append the shade, color, or pattern.\nI or rivers : – rivers=type | rivers=(type=type, pen=(pen))\n Draw rivers. Specify the type of rivers and [optionally] append pen attributes [Default pen: width = default, color = black, style = solid].\n Choose type from the list of river types below; To repeat this option, use a tuple of tuples.\n0 = Double-lined rivers (river-lakes)\n1 = Permanent major rivers\n2 = Additional major rivers\n3 = Additional rivers\n4 = Minor rivers\n5 = Intermittent rivers - major\n6 = Intermittent rivers - additional\n7 = Intermittent rivers - minor\n8 = Major canals\n9 = Minor canals\n10 = Irrigation canals\n\nYou can also choose from several preconfigured river groups:\n\na = All rivers and canals (0-10)\nA = All rivers and canals except river-lakes (1-10)\nr = All permanent rivers (0-4)\nR = All permanent rivers except river-lakes (1-4)\ni = All intermittent rivers (5-7)\nc = All canals (8-10)\nL or map_scale : – map_scale=([map=true, inside=true, norm=true, paper=true,] anchor=refpoint, scale_at_lat=lat, length=len [,align=side, justify=code, fancy=true, label=lab, offset=(dx,dy), units=unit, vertical=true])\n Draws a simple map scale centered on the reference point specified using one of four coordinate systems: (1) Use map=true for map (user) coordinates, (2) use inner=code for setting refpoint via a 2-char justification code that refers to the (invisible) map domain rectangle, (3) use norm=true for normalized (0-1) coordinates, or (4) use paper=true for plot coordinates (inches, cm, etc.). Scale is calculated for latitude slat (optionally supply longitude slon for oblique projections [Default is central meridian]), length=len when len is in km, or append unit from e or f or k or M ot n or u. Change the label alignment with align=:left|:right|:top|:bottom. Use fancy=true to get a \"fancy\" scale [Default is plain]. By default, the anchor point on the map scale is assumed to be the center of the scale (MC), but this can be changed by adding justify=code, where code is a 2-char justification code (see text for list and explanation of codes). label=lab selects the default label, which equals the distance unit (meter, foot, km, mile, nautical mile, US survey foot) and is justified on top of the scale. Change this by giving your own label lab. Add offset=(dx,dy) to offset the map scale by dx,dy away from the anchor in the direction implied by justify. Select units=unit to append the unit to all distance annotations along the scale (for the plain scale, this will instead select the unit to be appended to the distance length). Cartesian projections: Origin scale_at_lat is not required, fancy is not allowed, and no units should be specified in length. You must set any Cartesian data units via label. For a vertical rather than horizontal Cartesian scale, append vertical=true. Note: Use [FONT_LABEL] to change the label font and [FONT_ANNOT_PRIMARY] to change the annotation font. The height of the map scale is controlled by [MAP_SCALE_HEIGHT], and the pen thickness is set by [MAP_TICK_PEN_PRIMARY]. See box on how to place a panel behind the scale.\nM or dump : – dump=true\n Dumps a single multisegment ASCII (or binary, see -bo) file to standard output. No plotting occurs. Specify one of DCW, rivers, borders or shore. Note: if dump is used with DCW then region or the +r modifier to DCW are not required as we automatically determine the region given the selected geographic entities.\nN or borders : – borders=type | borders=(type=type, pen=(pen))\n Draw political boundaries. Specify the type of boundary and [optionally] append pen attributes [Default pen: width = default, color = black, style = solid].\n Choose type from the list of boundaries below. To repeat this option, use a tuple of tuples.\n1 = National boundaries\n2 = State boundaries within the Americas\n3 = Marine boundaries\na = All boundaries (1-3)\nS or water or ocean : – water=fill\n Select filling of \"wet\" areas. Append the shade, color, or pattern;  [Default is no fill].\nTd or rose : – rose=([map=true, inside=true, outside=true, norm=true, paper=true,] anchor=refpoint, width=width [,justify=code, fancy=level, labels=labels, offset=(dx,dy)])\n Draws a map directional rose on the map at the location defined by the reference and anchor points: Give the reference point on the map for the rose using one of four coordinate systems: (1) Use map=true for map (user) coordinates, (2) use inside=code for setting refpoint via a 2-char justification code that refers to the (invisible) map domain rectangle, (3) use norm=true for normalized (0-1) coordinates, or (4) use paper=true for plot coordinates (inches, cm, etc.). You can offset the reference point with offset=(dx,dy) in the direction implied by justify=code. By default, the anchor point is assumed to be the center of the rose (MC), but this can be changed by using justify=code where code is a 2-char justification code (see text for list and explanation of codes). Note: If outside=true is used then justify defaults to the same as refpoint, if outside=true is used then justify defaults to the mirror opposite of refpoint. Use width=width to set the width of the rose in plot coordinates (in inches, cm, or points). Add fancy=true to get a \"fancy\" rose, and specify in level what you want drawn. The default [1 or true] draws the two principal E-W, N-S orientations, 2 adds the two intermediate NW-SE and NE-SW orientations, while 3 adds the eight minor orientations WNW-ESE, NNW-SSE, NNE-SSW, and ENE-WSW. Label the cardinal points W,E,S,N by adding labels and append your own four comma-separated string to override the default. Skip a specific label by leaving it blank. See Placing-dir-map-roses and box on how to place a panel behind the scale.\nTm or compass : – compass=([map=true, inside=true, outside=true, norm=true, paper=true,] anchor=refpoint, width=width, [dec=(dec, dlabel), justify=code, labels=labels, rose_primary=pen, rose_secondary=pen, offset=(dx,dy)])\n Draws a map magnetic rose on the map at the location defined by the reference and anchor points: Give the reference point on the map for the rose using one of four coordinate systems: (1) Use map=true for map (user) coordinates, (2) use inner=code for setting refpoint via a 2-char justification code that refers to the (invisible) map domain rectangle, (3) use norm=true for normalized (0-1) coordinates, or (4) use paper=true for plot coordinates (inches, cm, etc.). You can offset the reference point with offset=(dx,dy) in the direction implied by justify=code. By default, the anchor point is assumed to be the center of the rose (MC), but this can be changed by using justify=code where code is a 2-char justification code (see text for list and explanation of codes). Note: If outside=true is used then justify defaults to the same as refpoint, if outside=true is used then justify defaults to the mirror opposite of refpoint. Use width=width to set the width of the rose in plot coordinates (in inches, cm, or points). Use dec=dec to assign the magnetic declination or dec=(dec, dlabel) to set dlabel, which is a label for the magnetic compass needle (use \"-\" as dlabel to bypass labeling). With dec, both directions to geographic and magnetic north are plotted [Default is geographic only]. If the north label is a star `as in *dec=(1,\"W,E,S,`\") then a north star is plotted instead of the north label. Annotation and two levels of tick intervals for both geographic and magnetic directions default to 30/5/1 degrees; override these settings by appending annot=(...,...,.), and enter six intervals to set both the geographic (first three) and magnetic (last three) intervals. Label the cardinal points W,E,S,N by adding label=lab where lab is your own four comma-separated string to override the default. Skip a specific label by leaving it blank. The rose_primary=pen and rose_secondary=pen modify the pens used to plot the outter and inner circles of the comapss. A number GMT default parameters control pens, fonts, and color. See Placing-dir-map-roses and box on how to place a panel behind the scale.\nU or time_stamp : – time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n Draw GMT time stamp logo on plot. More at timestamp\nV or verbose : – verbose=true | verbose=level\n Select verbosity level. More at verbose\nW  or shore : – shore=pen | shore=(level, pen)\n Draw shorelines [the Default]. Append pen attributes (see Pen attributes) [Defaults: width = default, color = black,style = solid] which apply to all four levels. To set the pen for each level differently, use the form shore=(level, pen), where level is 1-4 and represent coastline, lakeshore, island-in-lake shore, and lake-in-island-in-lake shore. To repeat the shore option, use a tuple of tuples. When specific level pens are set, those not listed will not be drawn [Default draws all levels; but see area].\nX or x_off or x_offset : – x_off=[] | x_off=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : – y_off=[] | y_off=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off\np or view or perspective : – view=(azim, elev)\n Selects perspective view and sets the azimuth and elevation of the viewpoint. More at perspective\nt or transparency or alpha: – alpha=50\n Set PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].  Works only for the PDF and PNG formats.","category":"page"},{"location":"coast/#Examples","page":"coast","title":"Examples","text":"","category":"section"},{"location":"coast/","page":"coast","title":"coast","text":"To plot Great Britain, Italy, and France in blue with a red outline and Spain, Portugal and Greece in yellow (no outline), and pick up the plot domain form the extents of these countries, use:","category":"page"},{"location":"coast/","page":"coast","title":"coast","text":"    coast(proj=:Mercator, DCW=((country=\"GB,IT,FR\", fill=:blue, pen=(0.25,:red)),\n                               (country=\"ES,PT,GR\", fill=:yellow)), show=true)","category":"page"},{"location":"gallery/historic/ex08/#A-3-D-histogram","page":"A 3-D histogram","title":"A 3-D histogram","text":"","category":"section"},{"location":"gallery/historic/ex08/","page":"A 3-D histogram","title":"A 3-D histogram","text":"    bar3(\"@guinea_bay.nc\", grd=true,\n         frame=(annot=1, axes=:WSneZ, title=:ETOPO5, cube=true),\n         zaxis=(annot=1000, label=\"Topography (m)\"), fill=:lightgreen,\n         lw=:thinnest, proj=:Mercator, figsize=12, zsize=13, view=(200,30))\n    text!(text_record([0.1 4.7], \"This is the surface of cube\"), JZ=true, Z=0,\n          attrib=(font=(24,\"Helvetica-Bold\"),justify=:TL), view=true, show=1)","category":"page"},{"location":"gallery/historic/ex08/","page":"A 3-D histogram","title":"A 3-D histogram","text":"See also GMT ex08","category":"page"},{"location":"scatter/#scatter","page":"scatter","title":"scatter","text":"","category":"section"},{"location":"scatter/","page":"scatter","title":"scatter","text":"scatter(cmd0::String=\"\", arg1=nothing; kwargs...)","category":"page"},{"location":"scatter/","page":"scatter","title":"scatter","text":"Reads (x,y) pairs and plot symbols at those locations on a map/figure. The input can either be a file name of a file with at least two columns (x,y), but optionally more, a GMTdatset object with also two or more columns.","category":"page"},{"location":"scatter/","page":"scatter","title":"scatter","text":"This module is a subset of plot to make it simpler to draw scatter plots. So many (fine) controlling parameters are not listed here. For a finer control, user should consult the plot module.","category":"page"},{"location":"scatter/#Required-Arguments","page":"scatter","title":"Required Arguments","text":"","category":"section"},{"location":"scatter/","page":"scatter","title":"scatter","text":"There are no required arguments but","category":"page"},{"location":"scatter/#Optional-Arguments","page":"scatter","title":"Optional Arguments","text":"","category":"section"},{"location":"scatter/","page":"scatter","title":"scatter","text":"B or axes or frame\nSet map boundary frame and axes attributes. Default is to draw and annotate left and bottom axes. Extended at frame\nJ or proj : – proj=<parameters>\nSelect map projection. Default is linear and 14 cm width. Extended at proj\nR or region or limits : – limits=(xmin, xmax, ymin, ymax) | limits=(BB=(xmin, xmax, ymin, ymax),)  | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more \n Specify the region of interest. Default limits are computed from data extents. Extended at limits\nG or markerfacecolor or MarkerFaceColor or mc or fill\n Select color or pattern for filling of symbols [Default is no fill]. Note that scatter will search for fill  and pen settings in all the segment headers (when passing a GMTdaset or file of a multi-segment dataset)  and let any values thus found over-ride the command line settings (but those must be provided in the terse GMT  syntax). See Setting color for extend color selection (including color map generation).\nS or symbol or marker or Marker or shape : – Default is circle with a diameter of 7 points\nsymbol=symbol string\n A full GMT compact string.\nsymbol=(symb=??, size=??, unit=??)\n Where symb is one Symbols like :circle, size is symbol size in cm, unless unit  is specified i.e. :points\nIn alternative to the symbol keyword, user can select the symbol name with eithermarker or shape  and symbol size withmarkersizeorms. The value of these keywords can be either numeric  (symb meaning size in cm) or string if an unit is appended, *e.g.*  markersize=\"5p\" This form of symbol  selection allows also to specify a variable symbol size. All it's need for this is that the keyword's value  be an array with the same number of elements as the number of data points. ","category":"page"},{"location":"scatter/#Examples","page":"scatter","title":"Examples","text":"","category":"section"},{"location":"scatter/","page":"scatter","title":"scatter","text":"A simple scatter of ten points plotted as red circles of 7 points size","category":"page"},{"location":"scatter/","page":"scatter","title":"scatter","text":"    scatter(1:10,rand(10), fill=:red, show=true)","category":"page"},{"location":"scatter/","page":"scatter","title":"scatter","text":"A plot where symbol's size grows linearly","category":"page"},{"location":"scatter/","page":"scatter","title":"scatter","text":"    sizevec = [s for s = 1:10] ./ 10;\n    scatter(1:10, 1:10, markersize = sizevec, marker=:square, fill=:green, show=1)","category":"page"},{"location":"scatter/#See-also","page":"scatter","title":"See also","text":"","category":"section"},{"location":"scatter/","page":"scatter","title":"scatter","text":"The GMT man page","category":"page"},{"location":"gallery/historic/ex44/#Map-insets","page":"Map insets","title":"Map insets","text":"","category":"section"},{"location":"gallery/historic/ex44/","page":"Map insets","title":"Map insets","text":"    using DelimitedFiles\n    coast(region=(110,170,-44,-9), proj=:merc, figsize=15, shore=:faint,\n          borders=(type=2, pen=1), DCW=(country=\"AU\", fill=:bisque),\n          land=:brown, water=:azure1)\n    basemap!(inset=(anchor=:TR, width=3.8, offset=(0.4, 0.25), save=\"xx000\"),\n             box=(fill=:white, pen=1, clearance=0.1, shaded=true))\n    t = readdlm(\"xx000\");\t\t# x0 y0 w h\n    coast!(region=:global360, proj=(name=:ortho, center=(120,-30), parallel=t[3]),\n           land=:brown, area=5000, frame=(grid=:auto,), shore=:faint,\n           DCW=(country=\"AU\", fill=:bisque), x_off=t[1], y_off=t[2]);\n\n    # Determine size of inset map of Europe\n    tt = mapproject(region=(-15,35,30,48), proj=:merc, figsize=5, map_size=true);\t# w h\n    mapW = tt[1].data[1];   mapH = tt[1].data[2]\n    coast!(region=(-10,5,35,44), proj=:merc, figsize=15,\n          frame=(axes=:WSne, annot=:auto, ticks=:auto),\n          DCW=(country=\"ES\", fill=:bisque), land=:brown, shore=:faint,\n          borders=(type=1,pen=1), water=:azure1, res=:full, x_off=-t[1],\n          y_off=11.5-t[2], par=(:FORMAT_GEO_MAP, :dddF))\n    basemap!(inset=(anchor=:TR, size=(mapW, mapH), offset=(0.4, 0.25),save=\"xx000\"),\n             box=(fill=:white, pen=1, clearance=0.1, shaded=true))\n    t = readdlm(\"xx000\");\t\t# x0 y0 w h\n    coast!(region=(-15,35,30,48), proj=:merc, figsize=t[3], land=:brown,\n           frame=:bare, DCW=(country=\"ES\", fill=:bisque), par=(:MAP_FRAME_TYPE, :plain),\n           x_off=t[1], y_off=t[2], show=true)\n    rm(\"xx000\")","category":"page"},{"location":"gallery/historic/ex44/","page":"Map insets","title":"Map insets","text":"See also GMT ex44","category":"page"},{"location":"gallery/scripts_agu/scatter_polar/#Variable-symbol-size/color-Polar-scatter-plot","page":"Variable symbol size/color Polar scatter plot","title":"Variable symbol size/color Polar scatter plot","text":"","category":"section"},{"location":"gallery/scripts_agu/scatter_polar/","page":"Variable symbol size/color Polar scatter plot","title":"Variable symbol size/color Polar scatter plot","text":"Draw a Polar scatter plot with variable symbol size, color and transparency. We will use the default color scale (rainbow) and fig size (12 cm).","category":"page"},{"location":"gallery/scripts_agu/scatter_polar/","page":"Variable symbol size/color Polar scatter plot","title":"Variable symbol size/color Polar scatter plot","text":"teta = 2pi*rand(150)*180/pi; r = 9*rand(150); ms = r / 10;\n\nscatter(teta, r,                  # The data\n\tlimits=(0,360,0,10),      # Fig limits\n        xaxis=(annot=45,grid=45), # Annotate and plor grid lines every 45 deg\n        yaxis=(annot=2,grid=2),   # Same but for 2 units in radial direction\n        proj=:Polar,              # Set the polar projection\n        zcolor=teta,              # Assign color to each symbol\n        size=ms,                  # The symbl sizes\n        alpha=25,                 # Set transparency to 50%\n        title=\"Polar scatter\",    # Fig title\n        show=true)                # Show the result","category":"page"},{"location":"gallery/scripts_agu/scatter_polar/","page":"Variable symbol size/color Polar scatter plot","title":"Variable symbol size/color Polar scatter plot","text":"As one-liners (to facilitate copy-paste):","category":"page"},{"location":"gallery/scripts_agu/scatter_polar/","page":"Variable symbol size/color Polar scatter plot","title":"Variable symbol size/color Polar scatter plot","text":"teta = 2pi*rand(150)*180/pi; r = 9*rand(150); ms = r / 10;\nscatter(teta, r, xaxis=(annot=45,grid=45), yaxis=(annot=2,grid=2), title=\"Polar scatter\", proj=:Polar, limits=(0,360,0,10), zcolor=teta, size=ms, alpha=25, show=true)","category":"page"},{"location":"gallery/scripts_agu/scatter_polar/","page":"Variable symbol size/color Polar scatter plot","title":"Variable symbol size/color Polar scatter plot","text":"<img src=\"../figs/scatter_polar.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/scripts_agu/arrows_III/#Arrows_III","page":"Arrows_III","title":"Arrows_III","text":"","category":"section"},{"location":"gallery/scripts_agu/arrows_III/","page":"Arrows_III","title":"Arrows_III","text":"Plot GMT5 and GMT4 arrows ","category":"page"},{"location":"gallery/scripts_agu/arrows_III/","page":"Arrows_III","title":"Arrows_III","text":"# Plot GMT4 style arrows. WE sho here three alternatives to set arrow heads\narrows([1 0 45 4], region=(0,6,-1,1), J=\"x2.5\",\n       frame=(annot=0, grid=1, title=\"GMT4 Vectors\"),\n       pen=(1,:blue), fill=:red, arrow4=(align=:middle,\n       head=(arrowwidth=\"4p\", headlength=\"18p\", headwidth=\"7.5p\"), double=true))\narrows!([3 0 45 4], pen=(1,:blue), fill=:red,\n        arrow4=(align=:middle, head=(\"4p\",\"18p\", \"7.5p\")))\narrows!([5 0 45 4], pen=(1,:blue), fill=:red,\n        arrow4=(align=:middle, head=\"4p/18p/7.5p\"))\n\n# Now the GMT5 type arrows\narrows!([1 0 45 4], frame=(annot=0, grid=1, title=\"GMT5 Vectors\"), lw=2, fill=:red,\n        arrow=(length=\"18p\", start=true, stop=true, pen=(1,:blue),\n               angle=45, justify=:center, shape=0.5), y_off=7)\narrows!([3 0 45 4], lw=2, fill=:red,\n        arrow=(length=\"18p\", stop=true, pen=\"-\", angle=45, justify=:center, shape=0.5))\narrows!([5 0 45 4], lw=2, fill=:red,\n        arrow=(length=\"18p\", stop=true, angle=45, justify=:center, shape=0.5),\n        show=true)\n","category":"page"},{"location":"gallery/scripts_agu/arrows_III/","page":"Arrows_III","title":"Arrows_III","text":"<img src=\"../figs/arrows_III.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/historic/ex30/#Trigonometric-functions-plotted-in-graph-mode","page":"Trigonometric functions plotted in graph mode","title":"Trigonometric functions plotted in graph mode","text":"","category":"section"},{"location":"gallery/historic/ex30/","page":"Trigonometric functions plotted in graph mode","title":"Trigonometric functions plotted in graph mode","text":"    basemap(region=(0,360,-1.25,1.75), frame=(axes=:WS, title=\"Two Trigonometric Functions\"),\n            xaxis=(annot=90, ticks=30, suffix=\"@.\"), yaxis=(annot=1, grid=10),\n            par=(MAP_FRAME_TYPE=:graph, MAP_VECTOR_SHAPE=0.5), figsize=(20,15), portrait=false)\n\n    #Draw sine an cosine curves\n    plot!(cosd.(linspace(0,360,360)), lw=3)\n    plot!(sind.(linspace(0,360,360)), pen=\"3p,0_6:0\", par=(:PS_LINE_CAP,:round))\n\n    # Indicate the x-angle = 120 degrees\n    plot!([120 -1.25; 120 1.25], pen=(0.5, :dashed))\n\n    T = text_record([360 1; 360 0; 120 -1.25; 370 -1.35; -5 1.85],\n        [\"18p,Times-Roman RB x = cos(@%12%a@%%)\", \"18p,Times-Roman RB y = sin(@%12%a@%%)\", \n        \"14p,Times-Roman LB 120@.\", \"24p,Symbol LT a\", \"24p,Times-Roman RT x,y\"])\n\n    text!(T, offset=(away=true, shift=0.2), noclip=true, font=\"\", justify=\"\")\n\n    # Draw a circle and indicate the 0-70 degree angle\n    plot!([0 0], region=(-1,1,-1,1), proj=:linear, figscale=3.81, marker=:circle,\n          ms=5.1, ml=1, noclip=true, x_off=9, y_off=7)\n    plot!(lw=\"\",\n        [NaN NaN\n        -1 0\n        1 0\n        NaN NaN\n        0 -1\n        0 1\n        NaN NaN\n        0 0\n        1 0\n        NaN NaN\n        0 0\n        -0.5 0.866025])\n    plot!(lw=2,\n        [NaN NaN\n        -0.3333\t0\n        0\t0\n        NaN NaN\n        -0.3333 0.57735\n        -0.3333 0])\n\n    T = text_record([-0.16666 0 0; -0.3333 0.2888675 0; 0.22 0.27 -30; -0.33333 0.6 30],\n        [\"12p,Times-Roman CT x\", \"12p,Times-Roman RM y\", \"12p,Symbol CB a\", \"12p,Times-Roman LB 120@.\"])\n    text!(T, offset=(away=true, shift=0.1), font=\"\", angle=\"\", justify=\"\")\n\n    plot!([0 0 1.25 0 120], marker=:matang, ms=\"0.4+e\", ml=1, fill=:black, show=true) ","category":"page"},{"location":"gallery/historic/ex30/","page":"Trigonometric functions plotted in graph mode","title":"Trigonometric functions plotted in graph mode","text":"See also GMT ex30","category":"page"},{"location":"pens/#Pen-attributes","page":"Pen attributes","title":"Pen attributes","text":"","category":"section"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"A pen in GMT has three attributes: width, color, and style. Most programs will accept pen attributes in the form of an option argument, with commas separating the given attributes, e.g.,","category":"page"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"pen=(width, color, style)","category":"page"},{"location":"pens/#width","page":"Pen attributes","title":"width","text":"","category":"section"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"Width is by default measured in points (1/72 of an inch). Append c, i, or p to specify pen width in cm, inch, or points, respectively (but note that this form requires using a string instead of a number). Minimum-thickness pens can be achieved by giving zero width. The result is device-dependent but typically means that as you zoom in on the feature in a display, the line thickness stays at the minimum.","category":"page"},{"location":"pens/#color","page":"Pen attributes","title":"color","text":"","category":"section"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"The color can be specified in five different ways:","category":"page"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"Gray. Specify a gray shade in the range 0–255 (linearly going from black [0] to white [255]).\nRGB. Specify r/g/b, each ranging from 0–255. Here 0/0/0 is black, 255/255/255 is white, 255/0/0 is red, etc. Alternatively, you can give RGB in hexadecimal using the #rrggbb format. All of these forms must be provided as strings\nHSV. Specify hue-saturation-value, with the former in the 0–360 degree range while the latter two take on the range 0–1 17 (string).\nCMYK. Specify cyan/magenta/yellow/black, each ranging from 0–100% (string).\nName. Specify one of 663 valid color names. See gmtcolors for a list of all valid names. A very small yet versatile subset consists of the 29 choices white, black, and [light|dark] {red, orange, yellow, green, cyan, blue, magenta, gray|grey, brown}. The color names are case-insensitive, so mixed upper and lower case can be used (like DarkGreen). This can be provided as a String or Symbol. ","category":"page"},{"location":"pens/#line-style","page":"Pen attributes","title":"line style","text":"","category":"section"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"The style attribute controls the appearance of the line. Giving dot or . yields a dotted line, whereas a dashed pen is requested with dash or -. Also combinations of dots and dashes, like .- for a dot-dashed line, are allowed. The lengths of dots and dashes are scaled relative to the pen width (dots has a length that equals the pen width while dashes are 8 times as long; gaps between segments are 4 times the pen width). It is however not possible to mix the word and char forms. Valid styles are for example DashDot, dashdashdot, dotdotdash, -. , --. The style words are case-insensitive.","category":"page"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"For more detailed attributes including exact dimensions you may specify string, where string is a series of numbers separated by underscores. These numbers represent a pattern by indicating the length of line segments and the gap between segments. For example, if you want a yellow line of width 0.1 cm that alternates between long dashes (4 points), an 8 point gap, then a 5 point dash, then another 8 point gap, specify pen=(\"0.1c\",:yellow,\"4_8_5_8\"). Just as with pen width, the default style units are points, but can also be explicitly specified in cm, inch, or points.","category":"page"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"Line styles can also be provided autonomously via the linestyle (or short ls) keywords. For example, ls=:dash. An interesting extension to the above line styles is when we add also a symbol and make an annotated line. The syntax is to add the symbol name to the style specification separated by one the three characters &, _ or !. e.g. \"Line&Circ\" or :DashDot!Square. This will draw an open symbol with outline color and thickness equal to line width. The symbols size and spacing are computed to be 4 times the line width and spacing. Append a non-letter char like # or % (e.g. \"Line&Triang#\") to plot symbols with a white outline and filled with line color. If you want to annotate with a text string, wrap whatever text in a pair of those three characters. For example \"Line&Silly saying&\"","category":"page"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"Front lines can also be drawn with the linestyle mechanism. For that, use the form: \"FrontSymbol[left|right]\" where Symbol can be any of Circle, Box, Triangle, Slip, Fault (case-insensitive and only first char is parsed). The Left or Right options mean that only half of the symbol will be plotted. Either on the left or right side of the line. Example ls=FrontTriangleLeft will draw a subduction zone line.","category":"page"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"The above line and symbol at fixed spacing is nice but there are many instances where one wants to have a line and symbols only at vertex locations. While that can generally be achieved by using the marker, markersize (mc), markercolor (mc) and linecolor (lc), linewidth (lw) keywords we can also use a condensed form similar to the annotated lines above. In this case we drop the separating char and compose it only with the line style and symbol name, e.g. \"LineCirc\".","category":"page"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"The annotated, quoted and front lines short forms presented here use several heuristics to decide on symbol size, symbol separation, fill collor, outline pen, etc ... But one can overwrite most of those guesses by using the markersize, markecolor, markerline options of the plot module.","category":"page"},{"location":"pens/","page":"Pen attributes","title":"Pen attributes","text":"In addition to these pen settings there are several PostScript settings that can affect the appearance of lines. These are controlled via the GMT defaults settings PS_LINE_CAP, PS_LINE_JOIN, and PS_MITER_LIMIT. See the end of the GMT CookBook section on Specifying pen attributes for a visual display on the effect of changing these defaults.","category":"page"},{"location":"gallery/spirals/spirals/#Spirals","page":"Spirals","title":"Spirals","text":"","category":"section"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"This started when Kristoff wanted to pain patterns on maps depicting sandy soils. See the all story in this Forum discussion","category":"page"},{"location":"gallery/spirals/spirals/#Archimedean-spiral","page":"Spirals","title":"Archimedean spiral","text":"","category":"section"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"From https://en.wikipedia.org/wiki/Archimedean_spiral","category":"page"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"The begin end of this block are NOT the GMT's modern mode gmt begin ... gmt end. They are forced by the Nootebook to have more than one command per cell.","category":"page"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"# Play arround with these parameters\nT = 1;\nomega = omega = 2pi / T;\nv = 0.2;\nt = 0:0.01:5pi;\nx = v.*t .* cos.(omega .* t);\ny = v.*t .* sin.(omega .* t);\nplot(x, y, aspect=:equal, show=true)","category":"page"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"<img src=\"../spir_archim.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/spirals/spirals/#Fermati-spiral","page":"Spirals","title":"Fermati spiral","text":"","category":"section"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"teta = 0:0.01:5pi;\nxf = sqrt.(teta) .* cos.(teta);\nyf = sqrt.(teta) .* sin.(teta);\nplot(xf,yf, aspect=:equal, show=true)","category":"page"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"<img src=\"../spir_fermati.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/spirals/spirals/#Sunflower","page":"Spirals","title":"Sunflower","text":"","category":"section"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"From This FEX contribution. The author here wanted to reflect the fact that on a sunflower the seeds close to the center are smaller and have a higher density.","category":"page"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"phi = (sqrt(5)-1)/2;\nn = 2618;\nrho = (2:n-1) .^ phi;\ntheta = (2:n-1)*2pi*phi;\nscatter(rho .* cos.(theta), rho .* sin.(theta), marker=:point, aspect=:equal, show=true)","category":"page"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"<img src=\"../sunflower1.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/spirals/spirals/#Another-Sunflower","page":"Spirals","title":"Another Sunflower","text":"","category":"section"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"This one was reversed from the javascript in this page, which follows the original work of Helmut Vogel in A better Way to Construct the Sunflower Head, where he proposed that spiral branches of seeds in a sunflower head are added from the center at an angle of 137.5∘ from the preceding one.","category":"page"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"This time we will also color the seed points in function of r, the distance to the center and pain with a dark background.","category":"page"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"\tangle = 137.5;\t# Play with this angle between [137.0 138.0]. Amazing the effect, no?\n\talfa = 2pi * angle / 360;\n\tn_seeds = 1500;\n\tseeds = 0:n_seeds;\n\tr = sqrt.(seeds);\n\tϕ = alfa * seeds;\n\tC = makecpt(range=(1,sqrt(n_seeds),1), cmap=:buda);\t# Color map to paint the seeds\n\tscatter(r .* cos.(ϕ), r .* sin.(ϕ), marker=:point, cmap=C, zcolor=r,\n\t\tframe=(fill=20,), aspect=:equal, show=true)","category":"page"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"<img src=\"../sunflower2.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"","category":"page"},{"location":"gallery/spirals/spirals/","page":"Spirals","title":"Spirals","text":"Download a Pluto Notebook here","category":"page"},{"location":"gallery/ternary/ternary/#Ternary-plots","page":"Ternary","title":"Ternary plots","text":"","category":"section"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"To plot points on a ternary diagram at the positions listed in the file ternary.txt (that GMT knows where to find it), with default annotations and gridline spacings, using the specified labeling, do","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"using GMT\nternary(\"@ternary.txt\", labels=(\"Clay\",\"Silt\",\"Sand\"), marker=:p, show=true)","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"<img src=\"../ternary1.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"– Ok, good but a bit dull. What about coloring the points? And if I want to have the axes runing in clock-wise order? And what about adding a percentage symbol to the annotations?","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"Simple. First we create a colormap and to rotte the axes we use the option clockwise=true. Regarding the % sign, it requires using the frame option and that obliges to be explicit on the axes labels because we are no longer using handy defaults.","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"# Make use of the knowledge that z ranges berween 0 and 71 (gmtinfo module is a friend)\nC = makecpt(T=(0,71));","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"ternary(\"@ternary.txt\",  marker=:p, cmap=C, clockwise=true, \n        frame=(annot=:auto, grid=:a, ticks=:a, alabel=\"Clay\", blabel=\"Silt\", clabel=\"Sand\", suffix=\" %\"),\n        show=true)","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"<img src=\"../ternary2.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/ternary/ternary/#Ah,-much-better,-but-now-I-would-like-to-display-the-above-data-as-an-image.","page":"Ternary","title":"Ah, much better, but now I would like to display the above data as an image.","text":"","category":"section"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"Solution: use the image=true option. Note that we may skip the cmap option and an automatic cmap is compute for us (but one can use whatever cmap we want, just create a colormap with the wished colors)","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"ternary(\"@ternary.txt\", marker=:p, image=true, clockwise=true,\n        frame=(annot=:auto, grid=:a, ticks=:a, alabel=\"Clay\", blabel=\"Silt\", clabel=\"Sand\", suffix=\" %\"),\n        show=true)","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"<img src=\"../ternary3.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/ternary/ternary/#And-to-overlay-some-contours?","page":"Ternary","title":"And to overlay some contours?","text":"","category":"section"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"Add the contour option. This option works either with automatically picked parameters or under the user full control (which contours to draw and which to annotate, etc). For simplicity we could use the automatic mode (just set contour=true) but the ternary plots may have several short contour lines that would not be annotated because they are too short for the default setting. So, and for demonstration sake, we will use the explicit contour form where we set also the distance between the labels.","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"ternary(\"@ternary.txt\", clockwise=true, image=true, \n        frame=(annot=:auto, grid=:a, ticks=:a, alabel=\"Clay\", blabel=\"Silt\", clabel=\"Sand\", suffix=\" %\"),\n        contour=(annot=10,cont=5,labels=(distance=3,)),\n        colorbar=true, show=true)","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"<img src=\"../ternary4.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"And we can do a contourf style plot too, but in this case only the area inside the data cloud is imaged since the method used involves a Delaunay triangulation.","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"ternary(\"@ternary.txt\", marker=:p, clockwise=true, \n        frame=(annot=:auto, grid=:a, ticks=:a, alabel=\"Clay\", blabel=\"Silt\", clabel=\"Sand\", suffix=\" %\"),\n        contourf=(annot=10, cont=5), show=true)","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"<img src=\"../ternary5.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"","category":"page"},{"location":"gallery/ternary/ternary/","page":"Ternary","title":"Ternary","text":"Download a Pluto Notebook here","category":"page"},{"location":"common_opts/#frame","page":"Common options","title":"frame","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"B | frame | axes | xaxis | xaxis2 | yaxis | ...","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Set map Axes parameters. They are specified by a keyword and a named tuple (but see [1])","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"frame=(axes=..., corners=..., xlabel=..., ylabel=..., annot=..., etc)","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"or separated on a per axes basis by using specific xaxis, yaxis and zaxis that share the same syntax as the generic frame option. The xaxis2 and yaxis2 apply when dealing with secondary axes.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Before the rest, note that several modules have axes default settings (scatter, bar, etc...) but if no axes is desired, just use axes=:none. Also useful is the axes=:same to repeat the previously set (from another call) axes specification.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"By default, all 4 map boundaries (or plot axes) are plotted and two annotated. To customize, use the axes keyword that takes as value a tuple with a combination of words. Axes are named left, bottom, right, top and, for the 3D maps, up. Next we have three categories of axes: the annotated and ticked, the ticked and those with no annoations and no tick marks. We call them full, ticks and bare and combine with the axes name using an underscore to glue them. Hence left_full means draw and annotate left axis, whilst top_bare means draw only top axis. The full combination is left|bottom|right|top|up_full|ticks|bare. To not draw a boundary, simply omit the name of it in tuple. Note that the short one single char naming used by GMT is also valid. E.g. axes=:WSn will draw and annotate left and south boundaries and draw but no ticks or annotations the top boundary. Two special cases are provided by the frame=:none and frame=:noannot that do not plot any axes or just plot but do not annotate or tick them respectively.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"If a 3-D base map is selected with view and J=:z, by default a single vertical axes will be plotted at the most suitable map corner. Override the default by using the keyword corners and any combination of corner ids 1234, where 1 represents the lower left corner and the order goes counter-clockwise.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Use cube=true to draw the outline of the 3-D cube defined by region this option is also needed to display gridlines in the x-z, y-z planes. Note that for 3-D views the title, if given, will be suppressed. You can paint the interior of the canvas with fill=fill where the fill value can be a color or a pattern.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Use noframe=true to have no frame and annotations at all [Default is controlled by the codes].","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Optionally append pole=\"plon/plat\" (or pole=(plon,plat) to draw oblique gridlines about specified pole [regular gridlines]. Ignored if gridlines are not requested (below) and disallowed for the oblique Mercator projection.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"For Cartesian plots the slanted=angle allows for the optional angle to plot slanted annotations; the angle is with respect to the horizontal and must be in the -90 <= angle <= 90 range only. This applies to the x-axis only, with the exception of the slanted=:parallel form that plots the y annotations parallel to y-axis.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"To add a plot title do title=\"My title\" The Frame setting is optional but can be invoked once to override the above defaults.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"GMT uses the notion of primary (the default) and secondary axes. To set an axes as secondary, use secondary=true (mostly used for time axes annotations).","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"The xaxis yaxis and zaxis specify which axis you are providing information for. The syntax is the same as for the axes keyword but allows fine tuning of different options for the 4 (or 5) axes.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"To add a label, to an axis use label=\"Label text\" if using the xaxis etc form, or use the xlabel, ylabel and zlabel keywords in the common axes tuple of options.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Use Yhlabel=true to force a horizontal label for y-axes (useful for very short labels).","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"If the axis annotation should have a leading text prefix (e.g., dollar sign for those plots of your net worth) you can add prefix=\"prefix\" For geographic maps the addition of degree symbols, etc. is automatic (and controlled by the GMT default setting FORMAT_GEO_MAP). However, for other plots you can add specific units by adding label_unit=\"unit\"","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Annotations, ticks and grid intervals are specified with the annot, ticks and grid keywords, which take as value the desired stride interval. As an example, annot=10 means annotate at spacing of 10 data units. Alternatively, for linear maps, we can use the special value :auto annotations at automatically determined intervals.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"annot=:auto, grid=:auto plots both annotations and grid lines with the same spacing,\nannot=:auto, ticks=:auto, grid=:auto adds suitable minor tick intervals,\ngrid=:auto plots grid lines with the same interval as if ticks=:auto was used.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"The optional phase_add=xx and phase_sub=xx shifts the annotation interval by tht xx amount (positive or negative).","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"The optional annot_unit indicates the unit of the stride and can be any of the ones listed below:","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":":year  or :Y (year, plot with 4 digits)\n:year2 or :y (year, plot with 2 digits)\n:month or :O (month, plot using FORMAT_DATE_MAP)\n:month2 or :o (month, plot with 2 digits)\n:ISOweek or :U (ISO week, plot using FORMAT_DATE_MAP)\n:ISOweek2 or :u (ISO week, plot using 2 digits)\nGregorian_week or :r (Gregorian week, 7-day stride from start of week TIME_WEEK_START)\n:ISOweekday or :K (ISO weekday, plot name of day)\n:date or :D (date, plot using FORMAT_DATE_MAP)\n:day_date or :d (day, plot day of month 0-31 or year 1-366, via FORMAT_DATE_MAP)\n:day_week or :R (day, same as d, aligned with TIME_WEEK_START)\n:hour    or :H (hour, plot using FORMAT_CLOCK_MAP)\n:hour2   or :h (hour, plot with 2 digits)\n:minute  or :M (minute, plot using FORMAT_CLOCK_MAP)\n:minute2 or :m (minute, plot with 2 digits)\n:second  or :S (second, plot using FORMAT_CLOCK_MAP)\n:second2 or :s (second, plot with 2 digits).","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Note for geographic axes m and s instead mean arc minutes and arc seconds. All entities that are language-specific are under control by GMT_LANGUAGE. ","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"For custom annotations and intervals, let intervals be given as custom=\"intfile\", where intfile contains any number of records with coord type [label]. Here, type is one or more letters from a or i, f, and g. For a or i you must supply a label that will be plotted at the coord location.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"A simpler way of controling the ticks and annotations with custom settings is to use the xticks option (same for yticks and zticks). Here, one give a tuple with annotations interval and labels. E.g. xticks=(1:5, [\"a\", \"b\", \"c\", \"d\"]) where first element is an AbstractArray and second an array or tuple of strings or symbols. The more elaborate effect described above for the *custom options is achieved here by escaping the a or i, f, and g codes with a forward slash in a text string. Example: xticks=(1:5, [\"a\", \"f\", \"/ag e\", \"f\", \"/ag @~p@~\"]). Here \"/ag e\" means annotate the third value with e and add a grid line. These x|y|zticks options work only for the primary axes. To change the secondary use the customtics form. E.g. xaxis2=(customticks(...),). Note that the ticks keyword is already taken to control the ticks interval hence the need to use a different one (customticks).","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"For non-geographical projections: Give negative scale (in proj=\"x scale\" or axis length (in proj=\"X map width\" to change the direction of increasing coordinates (i.e., to make the y-axis positive down).","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"For log10 axes: Annotations can be specified in one of three ways: ","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"stride can be 1, 2, 3, or -n. Annotations will then occur at 1,     1-2-5, or 1-2-3-4-...-9, respectively; for -n we annotate every     n't magnitude. This option can also be used for the frame and grid intervals. \nUse log=true, then log10 of the tick value is plotted at every integer log10 value.\nUse 10log=true, or pow=true then annotations appear as 10 raised to log10 of the tick value.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"For power axes: Annotations can be specified in one of two ways:","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"stride sets the regular annotation interval.\nUse exp=true, then, the annotation interval is     expected to be in transformed units, but the annotation value will     be plotted as untransformed units. E.g., if stride = 1 and power     = 0.5 (i.e., sqrt), then equidistant annotations labeled 1-4-9...  will appear.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Finally, if your axis is in radians you can use multiples or fractions of pi to set such annotation intervals. The format is pi=n or pi=(n,m), for an optional integer n and optional m fractions 2, 3, or 4.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"These GMT parameters can affect the appearance of the map boundary: MAP_ANNOT_MIN_ANGLE, MAP_ANNOT_MIN_SPACING, FONT_ANNOT_PRIMARY, FONT_ANNOT_SECONDARY, MAP_ANNOT_OFFSET_PRIMARY, MAP_ANNOT_OFFSET_SECONDARY, MAP_ANNOT_ORTHO, MAP_FRAME_AXES, MAP_DEFAULT_PEN, MAP_FRAME_TYPE, FORMAT_GEO_MAP, MAP_FRAME_PEN, MAP_FRAME_WIDTH, MAP_GRID_CROSS_SIZE_PRIMARY, MAP_GRID_PEN_PRIMARY, MAP_GRID_CROSS_SIZE_SECONDARY, MAP_GRID_PEN_SECONDARY, FONT_TITLE, FONT_LABEL, MAP_LINE_STEP, MAP_ANNOT_OBLIQUE, FORMAT_CLOCK_MAP, FORMAT_DATE_MAP, FORMAT_TIME_PRIMARY_MAP, FORMAT_TIME_SECONDARY_MAP, GMT_LANGUAGE, TIME_WEEK_START, MAP_TICK_LENGTH_PRIMARY, and MAP_TICK_PEN_PRIMARY","category":"page"},{"location":"common_opts/#Axes-options-table","page":"Common options","title":"Axes options table","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"The entire parameters collection is displayed in the following table","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"keyword value type meaning\naxes false Str or Symb Do not plot any axis\n noannot|bare Str or Symb Plot axes but no annot\n left_full Str or Symb Annot and tick left axis\n left_ticks Str or Symb Tick left axis\n left_bare Str or Symb Just draw left axis\n bottom_full Str or Symb Same for bottom axis\n right_full Str or Symb Same for right axis\n top_full Str or Symb Same for top axis\n up_full Str or Symb Same for z axis\n WESNwesn... Str or Symb The classic GMT syntax\ncorners 1234 Str or Symb Vertical axis\nsecondary true or false Bool Secondary axis info\nfill color Str or Symb Paint interior\ncube anything Sym or Bool Draw outline of the 3-D cube\nnoframe anything Sym or Bool No frame and annotations at all\npole lon lat Str or Tuple Draw oblique gridlines abot pole\ntitle the title Str or Symb Add a plot title\nlabel axis label Str or Symb Add a label to an axis\nYhlabel y-axis hlabel Str or Symb Horizontal label for y-axes\nprefix annot prefix Str or Symb Annot leading text prefix\nsuffix annot suffix Str or Symb Annot trailing text suffix\nxlabel x-axis label Str or Symb Add a label to X axis\nylabel y-axis label Str or Symb Add a label to Y axis\nzlabel z-axis label Str or Symb Add a label to Z axis\nxticks x-axis ticks Tuple Add custom ticks/annotations to X axis\nyticks y-axis ticks Tuple Add custom ticks/annotations to Y axis\nzticks z-axis ticks Tuple Add custom ticks/annotations to Z axis\ncustomticks x y z  ticks\nseclabel second label Str or Symb Add a seconadry label to X\nannot annot interval Symb or Num Annot stride interval\nticks tick interval Symb or Num Tick interval\ngrid grid interval Symb or Num Grid lines interval\nslanted x-annot angle Symb or Num Angle of slanted annotations\nphase_add xx Numb Shifts right the annot interval\nphase_sub xx Numb Shifts left the annot interval\nannot_unit annot unit Str or Symb Unit of the stride\ncustom custom annot Str or Symb Custom annotations file\npi n or (n,m) Num or Tuple If axis is in radians\nscale log Str or Symb log10 of the tick value\n 10log or pow Str or Symb Annot as 10 raised to log10\n exp Str or Symb Annot interval in transformed units","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"[1] However, the original GMT compact syntax can also be used. I.e, axes=:a, or frame=:WSen    or frame=\"a1Of1d WS\" also work.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"-B GMT doc","category":"page"},{"location":"common_opts/#Examples","page":"Common options","title":"Examples","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Demonstrates use of dual (left vs right, bottom vs top) Cartesian axis labels","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"basemap(limits=(0,50,0,7), figsize=8,\n        xaxis=(annot=:auto, ticks=:auto, label=\"Bottom Label\", seclabel=\"Top label\"),\n        yaxis=(annot=:auto, ticks=:auto, label=\"Left label\", seclabel=\"Right label\"), show=1)","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"we can obtain the same result with a slightly shorter version of the above that shows how can mix frame and xaxis calls.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"basemap(limits=(0,50,0,7), figsize=8,\n        frame=(annot=:auto, ticks=:auto, xlabel=\"Bottom Label\", ylabel=\"Left label\"),\n        xaxis=(seclabel=\"Top label\",), yaxis=(seclabel=\"Right label\",), show=1)","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Show inside labeling (use default fig size).","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"basemap(limits=(0,13,0,10), frame=(annot=2, ticks=0.5), par=(:MAP_FRAME_TYPE,:inside), show=1)","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Show horizontal and vertical annotations","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"basemap(region=[0 1000 0 1000], figsize=5,\n        frame=(axes=(:left_full,:bottom_full,:right_full,:top_full), annot=200,\n               ticks=100, xlabel=:horizontal, ylabel=:vertical),\n        par=(FONT_ANNOT_PRIMARY=10, FONT_LABEL=16, MAP_ANNOT_ORTHO=:we))\n\nbasemap!(frame=(axes=(:left_full,:bottom_full,:right_full,:top_full), annot=200,\n                ticks=100, xlabel=:horizontal, ylabel=:vertical),\n         par=(FONT_ANNOT_PRIMARY=10, FONT_LABEL=16, MAP_ANNOT_ORTHO=:sn),\n         x_offset=9, show=1)","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Show Yhlabel for horizontal labels for y-axis ","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"basemap(region=\"-30/30/-20/20\", figsize=(12,8),\n        frame=(annot=:a, ticks=:a, xlabel=\"Standard horizontal label\", Yhlabel=\"@~Y(q)@~\",\n               title=\"Vertical Y-axis label\"), show=1)","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"","category":"page"},{"location":"common_opts/#limits","page":"Common options","title":"limits","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"R | region | limits | xlimits,ylimits\nxmin, xmax, ymin, and ymax specify the region of interest (aka, BoundingBox). For geographic  regions, these limits correspond to west, east, south, and north and you may specify them in  decimal degrees or in [+|-]dd:mm[:ss.xxx][W|E|S|N] format.\nUsing the form region = [xmin xmax ymin ymax] or the equivalent tuple alternative covers the largest  chunk of user cases. However, for fine tunning the limits setting we have an extended syntax that  involves the use of Named Tuples. Next needed case is when one want/need to specify the BoundingBox  with the (xmin, ymin, xmax, ymax) corners. As mentioned, this involves a NamedTuple keyword that  can have any of the following members name/value:\nR=xx, region=xx or limits=xx – where xx is a string is interpreted as a GMT -R syntax string.\nbb, lmits, region – a four (or six) elements array or tuple with xmin, xmax, ymin, ymax [zmin zmax]\nbb=global or bb=:d – shorthand for bb=[-180 180 -90 90]\nbb=global360 or bb=:g – shorthand for bb=[0 360 -90 90]\nbb_diag, limits_diag, region_diag or LLUR – a four elements array with xmin, ymin, xmax, ymax\ndiag=true – makes the bb mean bb_diag\ncont or continents=continent name where continent name is any of: Africa, Antarctica, Asia, Europe, Oceania,  North America or South America (or the shorthands: AF, AN, AS, EU,  OC, NA, SA). This sets the geographic limts covered by these continents.\nISO=code – use ISO country codes from the Digital Chart of the World. Append one or more comma-separated  countries using the 2-character ISO 3166-1 alpha-2 convention. To select a state of a country  (if available), append .state, e.g, US.TX for Texas.\nadjust=xx – where xx is either a String, a Number or an Array/Tuple to set an inc, xinc yinc,  or winc einc sinc ninc to adjust the region to be a multiple of these steps steps.\npad=xx, extend=xx or expand=xx – same as above but extend the region outward by adding these  increments instead.\nunit=val – use Cartesian projected coordinates compatible with the chosen projection. Append the  length unit (e.g. \"k\" for kilometer). These coordinates are internally converted to the corresponding  geographic (longitude, latitude) coordinates for the lower left and upper right corners. This form is  convenient when you want to specify a region directly in the projected units (e.g., UTM meters). For  Cartesian data in radians you can also use [+|-][s]pi[f], for optional integer scales s and fractions f.\nThe xlimts, ylimits is used to break the specification into two pairs but it won't support all the  options of the limits functionality.\n-R GMT doc","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"","category":"page"},{"location":"common_opts/#proj","page":"Common options","title":"proj","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"J | proj : projection : proj=<parameters>","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Select map projection. The following table describes the projections available as well as extra parameters needed to set a specific projection. If the proj argument is a string then it is assumed that it contains a full GMT -J style specification. Please refer to the GMT manual to learn how that works. -J GMT doc In the table, the center column indicates if a projection needs to set a projection center or if that is optional (when the parameters are under []). Several projections not to set also the standard paralalle(s). Those are indicated by a non-empty parallels column. Still, other projections accept an optional horizon parameter, which is an angle that specifies the max distance from projection center (in degrees, <= 180, default 90) that is plotted.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Given the different needs to specify a projection we can either use a simple form when only the projection name is required, e.g. proj=Mercator or in the more elaborated cases, a named tuple with fields name, center, horizon, parallels. An example of this later case would be to set an Oblique Mercator projection with center at 280ºW, 25.5ºN and standard parallels at 22 and 60ºN. We would do that with proj=(name=:omercp, center=[280 25.5], parallels=[22 69]). Note that we can either use arrays or tuples to specify pairs of values.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"In case the central meridian is an optional parameter and it is being omitted, then the center of the longitude range given by the limits option is used. The default standard parallel is the equator. ","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"For linear (Cartesian) projections one can use proj=:linear but the simplest is just to omit the projection setting, which will default to a fig with of 14 cm. To set other fig dimensions, use the figsize specification with figsize=(width, height) (both numeric or string) or just figsize=width and the height is computed automatically from the fig limits aspect ratio. We can also specify the scale separately: e.g. figscale=x, figscale=1:xxxx. As mentioned, when no size is provided a default width value of 14 cm is assumed.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"For logarithm and power axes use logx, logy or loglog to take log10 of values before scaling, and powx and/or powy to to raise values to power before scaling.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"When specifying a figsize, the UNIT is cm by default but it can be overridden by appending i, or p to the scale or width values. Append h, +, or - to the given width if you instead want to set map height, the maximum dimension, or the minimum dimension, respectively [Default is w for width]. Off course, when these settings are used, the argument to figsize must be in the form of strings.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"The ellipsoid used in the map projections is user-definable by editing the gmt.conf file in your home directory. 73 commonly used ellipsoids and spheroids are currently supported, and users may also specify their own custom ellipsoid parameters [Default is WGS-84]. Several GMT parameters can affect the projection: PROJ_ELLIPSOID, GMT_INTERPOLANT, PROJ_SCALE_FACTOR, and PROJ_LENGTH_UNIT; see the gmt.conf man page for details.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"See GMT Map Projections for a list of projection examples ","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"name center horizon parallels GMT code Description\naea, Alberts lon_0lat_0 NA lat_1lat_2 Blon_0lat_0lat_1lat_2 Albers conic equal area\naeqd, azimuthalEquidistant lon_0lat_0 yes NA Elon_0lat_0 Azimuthal equidistant\nCyl_stere, cylindricalStereographic lon_0lat_0 NA NA Cyl_sterelon_0lat_0 Cylindrical stereographic\ncass, Cassini lon_0lat_0 NA NA Clon_0lat_0 Cassini cylindrical\ncea, cylindricalEqualarea lon_0lat_0 NA NA Ylon_0lat_0 Cylindrical equal area\neqdc, conicEquidistant lon_0lat_0 NA lat_1lat_2 Dlon_0lat_0lat_1lat_2 Equidistant conic\neqc, PlateCarree, equidistant lon_0lat_0 NA NA Qlon_0lat_0 Equidistant cylindrical\neck4, EckertIV lon_0 NA NA Kflon_0 Eckert IV equal area\neck6, EckertVI lon_0 NA NA Kslon_0 Eckert VI equal area\ngnom, Gnomonic lon_0lat_0 yes NA Flon_0lat_0 Azimuthal gnomonic\nhamm, Hammer lon_0 NA NA Hlon_0 Hammer equal area\nlaea, lambertAzimuthal lon_0lat_0 yes NA Alon_0lat_0 Lambert azimuthal equal area\nlcc, lambertConic lon_0lat_0 NA lat_1lat_2 Llon_0lat_0lat_1lat_2 Lambert conic conformal\nlin, Linear  NA NA X[l pexp\nlogx, logy, loglog    Xl Log\npowx, powy    Xp exp Power\nmerc, Mercator lon_0lat_0 NA NA Mlon_0lat_0 Mercator cylindrical\nmill, Miller lon_0 NA NA Jlon_0 Miller cylindrical\nmoll, Molweide lon_0 NA NA Wlon_0 Mollweide\nomerc, obliqueMerc1 lon_0lat_0 NA azim Oalon_0lat_0azim Oblique Mercator, 1: origin and azim\nomerc2, obliqueMerc2 lon_0lat_0 NA lon_1lat_1 Oblon_0lat_0lon_1lat_1 Oblique Mercator, 2: two points\nomercp, obliqueMerc3 lon_0lat_0 NA lon_plat_p Oclon_0lat_0lon_plat_p Oblique Mercator, 3: origin and pole\northo, Orthographic lon_0lat_0 yes NA Glon_0lat_0 Azimuthal orthographic\npoly, PolyConic lon_0lat_0 NA NA Polylon_0lat_0 (American) polyconic\nrobin, Robinson lon_0 NA NA Nlon_0 Robinson\nstere, Stereographic lon_0lat_0 yes NA Slon_0lat_0 General stereographic\nsinu, Sinusoidal lon_0 NA NA Ilon_0 Sinusoidal equal area\ntmerc, transverseMercator lon_0lat_0 NA NA Tlon_0lat_0 Transverse Mercator\nutmxx, UTMxx NA NA NA Uzone Universal Transverse Mercator (UTM)\nvand, VanDerGritten lon_0 NA NA Vlon_0 Van der Grinten\nwin, WinkelTripel lon_0 NA NA Rlon_0 Winkel Tripel","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"-J GMT doc","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"","category":"page"},{"location":"common_opts/#timestamp","page":"Common options","title":"timestamp","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"U | timestamp | time_stamp : timestamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\nDraw Unix System time stamp on plot. By adding [just\\ ]\\ /dx/dy/, the  user may specify the justification of the stamp and where the stamp  should fall on the page relative to lower left corner of the plot.  For example, BL/0/0 will align the lower left corner of the time  stamp with the lower left corner of the plot [LL]. Optionally, append a  label, or c (which will plot the command string.). The GMT  parameters MAP_LOGO, MAP_LOGO_POS, and  FORMAT_TIME_STAMP can affect the appearance; see the  gmt.conf man page for details. The time string will be in the  locale set by the environment variable TZ (generally local time).\n-U GMT doc","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"","category":"page"},{"location":"common_opts/#verbose","page":"Common options","title":"verbose","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"V | verbose : verbose=true | verbose=level\nSelect verbose mode, which will send progress reports to stderr.  Choose among 6 levels of verbosity; each level adds more messages:\nq – Complete silence, not even fatal error messages are produced.\nn – Normal verbosity: produce only fatal error messages.\nc – Produce also compatibility warnings (same as when verbose is omitted).\nv – Produce also warnings and progress messages (same as verbose only).\nl – Produce also detailed progress messages.\nd – Produce also debugging messages.","category":"page"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"","category":"page"},{"location":"common_opts/#x_off","page":"Common options","title":"x_off","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"X | x_off  | xoff  | x_offset | xshift : x_off=[] | x_off=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")","category":"page"},{"location":"common_opts/#y_off","page":"Common options","title":"y_off","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"Y | y_off y| xoff  | y_offset | yshift : y_off=[] | y_off=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\nShift plot origin relative to the current origin by (x-shift, y-shift) and optionally append the  length unit (c, i, or p). This second case (with units) implies that x-shift must be a  string. To make non-default sifts, use the form x_off=(shift=x-shift, mov=\"a|c|f|r\") where a  shifts the origin back to the original position after plotting; c centers the plot on the center of  the paper (optionally add shift); f shifts the origin relative to the fixed lower left corner of the  page, and r [Default] to move the origin relative to its current location. For overlays the default  (x-shift, y-shift) is (r0), otherwise it is (r1i). When x_off or y_off are used without any  further arguments, the values from the last use of that option in a previous GMT command will be used.  Note that x_off and y_off can also access the previous plot dimensions w and h and construct  offsets that involves them. For instance, to move the origin up 2 cm beyond the height of the previous  plot, use y_off=\"h+2c\". To move the origin half the width to the right, use x_off=\"w/2\".","category":"page"},{"location":"common_opts/#perspective","page":"Common options","title":"perspective","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"p | view | perspective : view=(azim, elev)\n Selects perspective view and sets the azimuth and elevation of the viewpoint (180,90). When view  is used in consort with Jz or JZ, a third value can be appended which indicates at which  z-level all 2D material, like the plot frame, is plotted (in perspective). [Default is at the bottom  of the z-axis]. \n-p GMT doc","category":"page"},{"location":"common_opts/#Spherical-distance","page":"Common options","title":"Spherical distance","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"j | spheric_dist : – spheric_dist=:e|:f|:g\n  Determine how spherical distances are calculated in modules that support this. By default (spheric_dist=:g) we perform great circle distance calculations and parameters such as distance increments or radii will be compared against calculated great circle distances. To simplify and speed up calculations you can select Flat Earth mode (spheric_dist=:f) which gives an approximate and fast result. Alternatively, you can select ellipsoidal (spheric_dist=:e) or geodesic mode for the highest precision (and slowest calculation time). All spherical distance calculations depends on the current ellipsoid (PROJ_ELLIPSOID), the definition of the mean radius (PROJ_MEAN_RADIUS), and the specification of latitude type (PROJ_AUX_LATITUDE). Geodesic distance calculations is also controlled by method (PROJ_GEODESIC).","category":"page"},{"location":"common_opts/#interp","page":"Common options","title":"interp","text":"","category":"section"},{"location":"common_opts/","page":"Common options","title":"Common options","text":"n | interp | interpol : interp=(Bspline=true, bicubic=true, bilinear=true, nearneighbor=true, aliasing=true, antialiasing=true, bc=?, clipz=true, threshold=?)\n  Select grid interpolation mode by adding B-spline smoothing, bicubic interpolation,  bilinear interpolation, or near-neighbor (for example to plot categorical data).  Optionally, append antialiasing to switch on antialiasing (where supported) or aliasing to leave it out  (in grdproject). Append bc to override the boundary  conditions used, adding g for geographic, p for periodic, or n for natural boundary conditions. For the  latter two you may append x or y to specify just one direction, otherwise both are assumed. Append clipz  to clip the interpolated grid to input z-min/max [Default may exceed limits]. Append threshold=val to  control how close to nodes with NaNs the interpolation will go. A threshold of 1.0 requires all (4 or 16)  nodes involved in interpolation to be non-NaN. 0.5 will interpolate about half way from a non-NaN value;  0.1 will go about 90% of the way, etc. [Default is bicubic interpolation with antialiasing and a threshold  of 0.5, using geographic (if grid is known to be geographic) or natural boundary conditions].\n-n GMT doc","category":"page"},{"location":"modules/#By-Modules","page":"By Modules","title":"By Modules","text":"","category":"section"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"In this mode we access the individual GMT modules directly by their name, and options are set using keyword arguments. The general syntax is (where the brackets mean optional parameters):","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"[output objects] = modulename([cmd::String=\"\",] [argi=[],] opt1=val1, opt2=val2, kwargs...);","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"where modulename is the program name (e.g. coast), cmd is used to transmit a file name for modules that will read data from files and argi is one or, and for certain modules, more data arrays or GMT.jl data types. opti named arguments common to many modules used for example to set the output format. Finally kwargs are keyword parameters used to set the individual module options. But contrary to the Monolithic usage, the one letter GMT option syntax may be replaced by more verbose aliases. To make it clear let us look at couple of examples.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"coast(region=:global, proj=(name=:laea, center=[300,30]), figsize=6,, axes=\"g\", land=\"navy\")","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"This command creates a map in PotScript file called GMTjl_tmp.ps and save it in your system's tmp directory. For comparison, the same command could have been written, using the classical one letter option syntax, as:","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"coast(R=\"g\", J=\"A300/30/6c\", B=\"g\", D=\"c\", G=\"navy\")","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"So, each module defines a set of aliases to the one letter options that are reported in each module man page.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"Before diving more in the way options may be transmitted into the module, we have to understand what happens with the output image file. By not directly specifying any format we are using the default output image format which is PNG (actually, except for grdimage -A, the only format that GMT can write PostScript). But we can select other formats by using the fmt keyword, for example fmt=\"jpg\" or fmt=:pdf. In such cases, the ghostscript program (you need to have it installed) will take care of converting the ps file into the selected format.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"When runing from Jupyter notebooks one does not need to worry about the image format. In fact the only allowed is png but that is taken care automatically, meaning that any fmt=xxx will be ignored.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"Note that we used either strings (\"\") or symbols (:) to represent the format. Here the rule is we can use symbols for any string argument that can be safely written as a symbol. Example, this is valid =:abc, but this is not =:+a (apparently parser will try to add to a). The use of symbols may be preferred for a question of laziness (less typing).","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"The above example, however, does not use any input data (coast knows how to find its own data). One way of providing it to modules that work on them is to send in a file name with the data to operate on. This example","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"grdimage(\"@tut_relief.nc\", shade=\"+ne0.8+a100\", proj=:merc, axes=:a, show=true)","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"reads a the netCDF grid tut_relief.nc and displays it as a Mercator projected image. The '@' prefix is used by GMT to know that the grid file should be downloaded from a server and cached locally. This example introduces also the show=true keyword. It means that we want to see right way the image that has just been created. While it might seem obvious that one wants to see the result, the result might not be ready with only one GMT module call. And that's why the GMT philosophy uses a layer cake model to construct potentially highly complex figures. Next example illustrates a slightly more evolved example","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"topo = makecpt(color=:rainbow, range=(1000,5000/500), Z=[]);\ngrdimage(\"@tut_relief.nc\", shade=\"+ne0.8+a100\", proj=:merc, axes=:a, color=topo,\n         fmt=:jpg)\ncolorbar!(position=\"jTC+w5i/0.25i+h+o0/-1i\", region=\"@tut_relief.nc\", color=topo,\n       axes=\"y+lm\", fmt=:jpg, show=true)","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"Here we use the makecpt command to compute a colormap object and used it as the value of the color keyword of both grdimage and colorbar modules. The final image is made up of two layers, the first one is the part created by grdimage, which is complemented by the color scale plot performed by colorbar. But since this was an appending operation we HAD to use the ! form. This form tells GMT to append to a previous initiated image. The image layer cake is finalized by the show=true keyword. If our example had more layers, we would have used the same rule: second and on layers use the ! construct and the last is signaled by show=true.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"By defaultn the image files are written into tmp system directory under the name GMTjl_tmp.ps (remember PostScript is the default format) and GMTjl_tmp.xxx when user specifies a different format with the fmt keyword. It's one of this files that shows up when show=true is used. But we may want to save the image file permanently under a different name and location. For that use the keyword savefig=name, where name is relative or full file name.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"The examples above show also that we didn't completely get rid of the compact GMT syntax. For example the shade=\"+ne0.8+a100\" in grdimage means that we are computing the shade using a normalized a cumulative Laplace distribution and setting the Sun direction from the 100 azimuth direction. For as much we would like to simplify that, it's just not possible for the time being. To access the (very) high degree of control that GMT provides one need to use its full syntax. As such, readers are redirected to the main GMT documentation to learn about the fine details of those options.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"Setting line and symbol attributes has received, however, a set of aliases. So, instead of declaring the pen line attributes like -W0.5,blue,–, one can use the aliases lw=0.5, lc=\"blue\", ls=\"–\". An example would be:","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"plot(collect(1:10),rand(10), lw=0.5, lc=:blue, ls=\"--\", marker=:circle,\n     markeredgecolor=0, size=0.2, markerfacecolor=:red, title=\"Bla Bla\",\n     x_label=:Spoons, y_label=:Forks, show=true)","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"This example introduces also keywords to plot symbols and set their attributes. Also shown are the parameters used to set the image's title and labels.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"But setting pen attributes like illustrated above may be complicated if one has more that one set of graphical objects (lines and polygons) that need to receive different settings. A good example of this is again provided by a coast command. Imagine that we want to plot coast lines as well as country borders with different line colors and thickness. Here we cannot simple state lw=1 because the program wouldn't know which of the shore line or borders this attribute applies to. The solution for this is to use tuples as values of corresponding keyword options.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"coast(limits=[-10 0 35 45], proj=:merc, shore=(0.5,\"red\"), axes=:a,\n        show=1, borders=(1,(1,\"green\")))","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"Here we used tuples to set the pen attributes, where the tuple may have 1 to 3 elements in the form (width[c|i|p]], [color], [style[c|i|p|]). The borders=(1,(1,\"green\")) option is actually a tuple-in-a-tuple because here we need also to specify the political boundary level to plot (1 = National Boundaries).","category":"page"},{"location":"modules/#Specifying-the-pen-attributes","page":"By Modules","title":"Specifying the pen attributes","text":"","category":"section"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"So, in summary, a pen attribute may be set in three different ways:","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"With a text string that follows the width, color, style specs as explained in Specifying pen attributes\nBy using the lw or linewidth keyword where its value is either a number, meaning the line thickness in points, or a string like the width above; the color is set with the lc or linecolor and the value is either a number between [0 255] (meaning a gray shade) or a color name (for example \"red\"); and a ls or linestyle with the value specified as a string (example: \"- -\" plot a dashed line).\nA tuple with one to three elements: ([width], [color], [style]) where each of the elements follow the same syntax as explained in the case (2) above.","category":"page"},{"location":"modules/#Specifying-the-axes","page":"By Modules","title":"Specifying the axes","text":"","category":"section"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"The axes are controlled by the B or frame or axes keywords. The easiest form it can have is the axes=:a, which means do an automatic annotation of the 4 map boundaries – left, bottom, right and top – axes. To annotate only the left and bottom boundaries, one would do axes=\"a WSne\" (note the space between a and WSne). For a higher level of control the user must really consult the original -B documentation.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"Other than setting titles and labels with a axes string we can also do it by using the keywords title, x_label and y_label.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"The figure limits is set with the R, region or limits  keywords. Again, the full docs for this option are explained in -R documentation. But other than the string version, the numeric form region=[xmin xmax ymin ymax] is also permitted. And when dealing with grids, even the region=mygrid.grd is a valid operation. Where mygrid.grd is a GMTgrid type. The plot() function allows a no limits setting, in which case it will default to the data's bounding box.","category":"page"},{"location":"modules/#Axes-(and-other)-configuration","page":"By Modules","title":"Axes (and other) configuration","text":"","category":"section"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"There are almost 150 parameters which can be adjusted individually to modify the appearance of plots or affect the manipulation of data. When a program is run, it initializes all parameters to the GMTdefaults (see more at GMT defaults).  At times it may be desirable to temporarily override some of those defaults. We can do that easily by using any of the keywords conf, par or params, which are recognized by all modules. Its usage follows closely the syntax described at gmt.conf but using Named Tuples. The parameter names are always given in UPPER CASE. The parameter values are case-insensitive unless otherwise noted and can be given as strings or numeric. Provide as many parameters as you want in the named tuple. Example","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"basemap(...., conf=(MAP_TICK_LENGTH_PRIMARY=0.25, FORMAT_GEO_MAP=\"ddd:mm:ssF\"))","category":"page"},{"location":"modules/#Specifying-the-figure-size","page":"By Modules","title":"Specifying the figure size","text":"","category":"section"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"Figure sizes are automatically set to 12x8 cm for basic case of Cartesian xy plots done with the plot() function but otherwise in general they need to be user specified using the J or proj or projection keywords. See the full doc at -J documentation.  For Cartesian plots one can also use the figsize=width  or figsize=[width height] keyword, where the dimensions are in centimeters. The array form allows also set height or width to 0 to have it recomputed based on the implied scale of the other axis. Use negative sizes to reverse the direction of an axis (e.g., to have y be positive down). If neither of these forms is used, the figure width defaults to 14 cm.","category":"page"},{"location":"modules/#The-output-format","page":"By Modules","title":"The output format","text":"","category":"section"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"It was referred above that the fmt determines the output format and that the default is PostScript. Actually, the default format is chosen by the contents of the global FMT variable set at the top of the GMT.jl file. Eventually this will evolve to using an environment variable but for the moment users will have to edit that file to set a different default format.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"An interesting alternative is to set FMT=\"\", that is to not specify any image format. This will result in NOT saving any file on disk but to keep the PS figure internally stored in the program's memory.  In other words, the figure is built and kept in memory only. This allows converting to another format directly without the use of an intermediary disk file. The conversion is performed by the psconvert GMT module that would be used like this (to convert to PDF):","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"psconvert(in_memory=true, adjust=true, format=:f, out_name=\"myfig.pdf\")","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"The issue with this solution, that could be implemented internally without user intervention, is that it currently only works on Windows.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"Another alternative to a file format is the option to create RGB images with psconvert and return it to Julia as a Image type type.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"I = psconvert(in_memory=true, adjust=true)","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"but again, so far on Windows only. A cool thing to develop would be the possibility to display this I image with the Images.jl package.","category":"page"},{"location":"modules/#Saving-data-to-disk","page":"By Modules","title":"Saving data to disk","text":"","category":"section"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"As referred in the Monolithic section, we have two programs to do read and writing. Their module names are gmtread and gmtwrite. These modules allow to import and export any of the GMT data types to and from external files. For instance, to save the grid G stored into a GMTgrid type into the file relief.nc we run ","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"gmtwrite(\"relief.nc\", G)","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"Here there is no need to inform about the type of data that we are dealing with because that can be inferred from the type of the numeric argument. There are cases, however, where we may want to save the result of a computation directly on disk instead of assigning it to a Julia variable and latter save it with gmtwrite. For computations that deal with grids that is easy. Just provide ask for an output name using the outgrid keyword, like","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"grdcut(G, limits=[3 9 2 8], outgrid=\"lixo.grd\");","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"but for table data the GMT programs normally output their results to stdout so if we want to save data directly to disk (as would do the corresponding GMT shell command) we use the write or |> keywords. We can also use this mechanism to append to an existing file, but then we use the append keyword. Use together with the bo option to save as a binary file. The following converts the grid G to x,y,z triplets and save the result in an ASCII disk file.","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"grd2xyz(G, write=\"lixo.xyz\")","category":"page"},{"location":"modules/#How-inputs-are-transmitted-to-modules","page":"By Modules","title":"How inputs are transmitted to modules","text":"","category":"section"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"Different modules take different number of inputs (for example grdblend accepts a variable number of grids) and some modules accept primary input and optionally a secondary input (for example the weights  option in grdtrend). The primary input(s) can be sent as text strings with the names of files to be read or as Julia variables holding the appropriate data type, and that as the first argument to the module call. Alternatively, the numeric input can be sent via the data keyword whose value can be a tuple when the expected input is composed by more than one variable. The same applies when an option is expected to receive more than one arguments (for example the three R,G,B in grdview). Examples:","category":"page"},{"location":"modules/","page":"By Modules","title":"By Modules","text":"grdimage(G, intens=I, J=:merc, color=C, B=\"1 WSne\", X=:c, Y=0.5, show=1)\n\ngrdimage(data=G, intens=I, J=:merc, color=C, B=\"1 WSne\", X=:c, Y=0.5, show=1)\n\ngrdview(G, intens=:+, J=:merc, zsize=\"2i\", view=(145,35), G=(Gr,Gg,Gb), Q=:i, show=1)","category":"page"},{"location":"gallery/historic/ex40/#Line-simplification","page":"Line simplification","title":"Line simplification","text":"","category":"section"},{"location":"gallery/historic/ex40/","page":"Line simplification","title":"Line simplification","text":"    using Printf\n    centroid = gmtspatial(\"@GSHHS_h_Australia.txt\", colinfo=:g, length=:k)\n    #centroid = [133.913549887 -22.9337944115 7592694.55567]\n    basemap(region=(112,154,-40,-10), proj=:Merc, figsize=14,\n            frame=(axes=:WSne, annot=20, bg=[240,255,240]))\n    plot!(\"@GSHHS_h_Australia.txt\", pen=:faint, fill=(240,255,240))\n    plot!(\"@GSHHS_h_Australia.txt\", ms=0.025, fill=:red)\n    T500k = gmtsimplify(\"@GSHHS_h_Australia.txt\", tolerance=\"500k\");\n    t = gmtspatial(\"@GSHHS_h_Australia.txt\", colinfo=:g, length=:k);\n    area = @sprintf(\"Full area = %.0f km@+2@+\", t[1].data[3]);\n    t = gmtspatial(T500k, colinfo=:g, length=:k); \n    area_T500k = @sprintf(\"Reduced area = %.0f km@+2@+\", t[1].data[3]);\n    plot!(T500k, pen=(1,:blue))\n    plot!(centroid, marker=:cross, ms=0.75, ml=3)\n    text!(text_record([112 -10], \"T = 500 km\"),\n          offset=(away=true, shift=(0.25,0.25)), font=18, justify=:TL)\n    text!(text_record(area), font=14, region_justify=:CM)\n    text!(text_record(area_T500k), font=14, region_justify=:LB,\n          offset=(away=true, shift=0.5))\n    basemap!(frame=(axes=:Wsne, annot=20, bg=[240,255,240]), y_off=12)\n    plot!(\"@GSHHS_h_Australia.txt\", pen=:faint, fill=(240,255,240))\n    plot!(\"@GSHHS_h_Australia.txt\", ms=0.025, fill=:red)\n    T100k = gmtsimplify(\"@GSHHS_h_Australia.txt\", tolerance=\"100k\");\n    t = gmtspatial(T100k, colinfo=:g, length=:k);\n    area_T100k = @sprintf(\"Reduced area = %.0f km@+2@+\", t[1].data[3]);\n    plot!(T100k, pen=(1,:blue))\n    plot!(centroid, marker=:cross, ms=0.75, ml=3)\n    text!(text_record([112 -10], \"T = 100 km\"),\n          offset=(away=true, shift=(0.25,0.25)), font=18, justify=:TL)\n    text!(text_record(area), font=14, region_justify=:CM)\n    text!(text_record(area_T100k), font=14, region_justify=:LB,\n          offset=(away=true, shift=0.5), show=1)","category":"page"},{"location":"gallery/historic/ex40/","page":"Line simplification","title":"Line simplification","text":"See also GMT ex40","category":"page"},{"location":"gallery/historic/ex09/#Time-series-along-tracks","page":"Time-series along tracks","title":"Time-series along tracks","text":"","category":"section"},{"location":"gallery/historic/ex09/","page":"Time-series along tracks","title":"Time-series along tracks","text":"    wiggle(\"@tracks_09.txt\", limits=(185,250,-68,-42), proj=:Mercator, figscale=0.27,\n           frame=(axes=:WSne, annot=10,ticks=5, fill=[240 255 240]), G=\"+red -G-blue\",\n           S=\"240/-67/500/@~m@~rad\", scale=800, pen=:thinnest, par=(:FORMAT_GEO_MAP,:dddF))\n    plot!(\"@ridge_09.txt\", pen=:thicker)\n    plot!(\"@fz_09.txt\", pen=\"thinner,-\")\n    # Take label from segment header and plot near coordinates of last record of each track\n    t = gmtconvert(\"@tracks_09.txt\", E=:l)\n    for k = 1:length(t)\t\tt[k].text = [t[k].header]\tend\n    text!(t, attrib=(font=(8,\"Helvetica-Bold\"), angle=50, justify=:RM, horizontal=true),\n          offset=(-0.1,-0.1), show=true)","category":"page"},{"location":"gallery/historic/ex09/","page":"Time-series along tracks","title":"Time-series along tracks","text":"See also GMT ex09","category":"page"},{"location":"movie/#movie","page":"movie","title":"movie","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"movie(main; pre=nothing, post=nothing, kwargs...)","category":"page"},{"location":"movie/#Description","page":"movie","title":"Description","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"movie module can generate GMT animation sequences using a single-plot script that is repeated for all frames, with some variation using specific frame variables. The module simplifies (and hides) most of the steps normally needed to set up a full-blown animation job. Instead, the user can focus on composing the main frame plot and let the parallel execution of frames and assembly of images into a movie take place in the background. Individual frames are converted from PostScript plots to lossless, transparent PNG images and optionally assembled into an animation (this last step requires external tools that must be present in your path; see Technical Details below). For opaque PNG images, simply specify a background color via -G.","category":"page"},{"location":"movie/#Required-Arguments","page":"movie","title":"Required Arguments","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"mainscript   This argument can be one of: (1) The name of a Julia function containg GMT.jl commands that makes the frame-dependent plot. (2) Name of a stand-alone GMT.jl script that makes the frame-dependent plot. The function or script may access frame variables, such as frame number and others. Parameters that can be accessed are discussed below.\nC or canvas : – canvas=...\n  Specify the canvas size used when composing the movie frames. You can choose from a set of preset formats or   specify a custom layout. The named 16:9 ratio formats have a canvas dimension of 24 x 13.5 cm or 9.6 x 5.4   inch and are (with pixel dimensions given in parenthesis):\n4320p (7680 x 4320), 2160p (3840 x 2160), 1080p (1920 x 1080), 720p (1280 x 720),\n540p (960 x 540), 480p (854 x 480), 360p (640 x 360), and 240p (426 x 240).\nWe also accept 8k or uhd-2 to mean 4320p, 4k or uhd to mean 2160p, and hd to mean 1080p.   The recognized 4:3 ratio formats have a canvas dimension of 24 x 18 cm or 9.6 x 7.2 inch   and are (with pixel dimensions given in parenthesis):\nuxga (1600 x 1200), sxga+ (1400 x 1050), xga (1024 x 768),\nsvga (800 x 600), and dvd (640 x 480).\nNote: Your PROJ_LENGTH_UNIT setting determines if movie sets you up to work with the SI or US canvas   dimensions. Instead of a named format you can request a custom format directly by giving   width x height x dpu (no spaces arround the x), where dpu is the dots-per-unit pixel density   (pixel density is set automatically for the named formats).\nN or name : – name=...\n  Determines the name of the final movie file and a sub-directory with frame images (but see work_dir).   Note: If the subdirectory exist then we exit immediately. You are therefore required to remove any   old directory by that name first. This is done to prevent the accidental loss of valuable data.\nT or frames : – frames=(range=..., nframes=..., first=..., tagwidth=..., split_words=...)\n  Either specify how many image frames to make (ex frames=30), create a one-column data set width values from   min to max every inc (ex frames=range(min,max,inc), append n_frames=\"\" if inc is number of frames   instead), or supply a file with a set of parameters, one record (i.e., row) per frame (ex frame= timefile).   The values in the columns will be available to the mainscript as named variables MOVIE_COL0, MOVIE_COL1,   etc., while any trailing text can be accessed via the variable MOVIE_TEXT. Append split_words=\"\" to split   the trailing string into individual words that can be accessed via variables MOVIE_WORD0, MOVIE_WORD1, etc.   By default we use any white-space to separate words. Use split_words=str to select another character(s) as the   valid separator(s). The number of records equals the number of frames. Note that the background script is allowed   to create timefile, hence we check for its existence both before and after the background script has completed.   Normally, the frame numbering starts at 0; you can change this by appending a different starting frame number via   first=.... Note: All frames are still included; this modifier only affects the numbering of the given frames.   Finally, tag_width=... can be used to set the tag width of the format used in naming frames. For instance,   name_000010.png has a tag width of 6. By default, this is automatically set but if you are splitting large jobs   across several computers then you must use the same tag width for all names.","category":"page"},{"location":"movie/#Optional-Arguments","page":"movie","title":"Optional Arguments","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"A or gif : – gif=(loop=..., stride=...)\n  Build an animated GIF file. You may specify if the movie should play more than once (i.e., loop=N)   and if so append how many times to repeat [default is infinite]. If a video product is also   selected (format) then you can limit the frames being used to make the GIF file. Append stride=stride   to only use every stride frame, with stride being one of a fixed set of strides: 2, 5, 10,   20, 50, 100, 200, and 500.\nD or frame_rate : – frame_rate=...\n  Set the display frame rate in frames per seconds for the final animation [24].\n-E or titlepage : – titlepage=(script=..., duration=N, fade=..., fill=...)\n  Give a titlepage script that creates a static title page for the movie (i.e. titlepage=(script=Fun|sc.jl,))   [no title]. Alternatively, titlepage can be a PostScript plot (titlepage=(script=\"psfile.ps\", )) of   dimensions exactly matching the canvas size set in canvas. You control the duration of the title sequence with   duration and specify the number of frames (or append s for a duration in seconds instead, e.g.   duration=\"10s\") [4s]. Optionally, supply the fade length via fade=N (in frames or seconds [1s]) as well   [no fading]; Use fade=\"iN\" and/or fade=\"oN\" to specify one-sided fading or to give unequal fade intervals   [Default is same duration for both]. The fading affects the beginning and end of the title page duration. We fade   from and to black by default; append fill=color to use another terminal fade color.\nF or format : – format=(format=..., transparent=\"\", options=...)\n  Set the format of the final video product. Choose either mp4 (MPEG-4 movie) or webm (WebM movie).   You may optionally add additional FFmpeg encoding settings for this format via the options=... modifier   (in quotes if more than one word). If \"none\" is chosen then no PNGs will be created at all; this requires   cover_page. Choose transparent=true to generate transparent PNG images [opaque].\nG or fill : – fill=color | fill=(fill=color, pen=pen)\n  Set the canvas color or fill before plotting commences [none]. Optionally, append pen=pen to draw the canvas   outline with pen [no outline]. See Setting color and Pen attributes for extend color and pen selections.\nH or scale : – scale=factor\n  Given the finite dots-per-unit used to rasterize PostScript frames to PNGs, the quantizing of features   to discrete pixel will lead to rounding.  Some of this is mitigated by the anti-aliasing settings. However,   changes from frame to frame is outside the control of the individual frame rasterization and we   find that, in particular, moving text may appear jittery when seen in the final animation. You can mitigate   this effect by selecting a scale factor that, in effect, temporarily increases the effective dots-per-unit   by factor, rasterizes the frame, then downsamples the image by the same factor at the end. The larger   the factor, the smoother the transitions. Because processing time increases with factor we suggest you   try values in the 2-5 range. Note that images can also suffer from quantizing when the original data have   much higher resolution than your final frame pixel dimensions. The **scale option may then be used to smooth the   result to avoid aliasing [no downsampling]. This effect is called subpixel rendering.\nI or includefile : – includefile=file\n  Insert the contents of includefile into the movie_init.sh|bat script that is accessed by all movie scripts.   This mechanism is used to add information (typically constant variable assignments) that the mainscript   and any optional S scripts rely on. Warning, the contents of this file are pure GMT commands.`\nK or fading : – fading=(fade=N, fill=color, preserve=true))\n  Add fading in and out for the main animation sequence [no fading]. Append the length of the fading in number of   frames (e.g. fading=10 or fading=5s for fading in seconds) [1s]. Use fading=\"iN(s) and/or   fading=\"oN\" to specify one-sided fading or to give unequal fade intervals [Default is same duration for both].   Normally, fading will be overlaid on the first and last fade frames of the main animation. Append   preserve=true to preserve these frames by fading over only the first and last (repeated) animation frames   instead. We fade from and to black by default; append fill=color to use another terminal fade color.\nL or label : – label=str (not yet translated to keywords)\n  Automatic labeling of individual frames. Places the chosen label at the frame perimeter:   e selects the elapsed time in seconds as the label; append +sscale to set the length   in seconds of each frame [Default is 1/framerate],   sstring uses the fixed text string as the label,   f selects the running frame number as the label, p selects the percentage of progress so far,   ccol uses the value in column   number col of timefile as label (first column is 0), while tcol uses word number   col from the trailing text in timefile (first word is 0). Note: If you use -Lc   with an absolute time column, then the format of the timestamp will depend on the two default settings   FORMAT_DATE_MAP and FORMAT_CLOCK_MAP. By default,   both date and time are displayed (with a space between); set one of the settings to \"-\" to skip that component.   Append +cdx [/dy] for the clearance between label and bounding box; only   used if +g or +p are set. Append units c | i | p or % of the font size [15%].   Append +f to use a specific font [FONT_TAG].   Append +g to fill the label bounding box with fill color [no fill].   Use +jrefpoint to specify where the label should be plotted [TL].   Append +odx [/dy] to offset label in direction implied by justify. Append units   c | i | p or % of the font size [20% of font size].   Append +p to draw the outline of the bounding box using selected pen [no outline].   Append +t to provide a format statement to be used with the label item selected [no special formatting].   If -Lt is used then the format statement must contain a %s-like format, else it may have an integer (%d)   or floating point (%e, %f, %g) format specification.\nM or cover_page : – cover_page=frame | cover_page=\"frame,format\"\n  In addition to making the animation sequence, select a single master frame [0] for a cover page. The master   frame will be written to the current directory with name prefix.format, where format can one of the   graphics extensions from the allowable graphics formats [pdf].\nP or progress : – progress=(indicator=char, annot=\"...\", font=font, justify=tag, offset=(dx,dy), width=..., fill=color, Fill=color, pen=pen, Pen=pen)\n   Automatic placement of progress indicator(s). Places the chosen indicator at the frame perimeter.   Select from six indicators called a-f [a]. Indicators a-c are different types of circular indicators while d-f are   linear (axis-like) indicators. Specify dimension of the indicator with wdth=... [5% of max canvas dimension for   circular indicators and 60% of relevant canvas dimension for the linear indicators] and placement via justify=tag   [TR for circular and BC for axes]. Indicators b-f can optionally add annotations if modifier annot is used,   append one of e or f or p or s or c\\ col or t\\ col to indicate what should be annotated   (see label for more information on what these are); append font=font to use a specific font   [FONT_ANNOT_SECONDARY scaled as needed]. Append offset=dx or offset=(dx,dy) to offset indicator in direction   implied by justify. Append fill=color to set moving item fill color [see below for defaults]. Use pen=pen   to set moving item pen. For corresponding static fill and pen, use Fill and Pen instead.\nQ or debug : – debug=true | debug=\"s\"\n  Debugging: Leave all files and directories we create behind for inspection. Alternatively, append s to   only build the movie scripts but not perform any execution. One exception involves the optional   background script derived from -Sb which is always executed since it may produce data needed when   building the movie scripts.\nSb or background : – background=\"script.jl\" or background=Fun\n  The optional background Julia script or function can be used for one or two purposes: (1) It may create files   (such as timefile) that will be needed by mainscript to make the movie, and (2) It may make a static background   plot that should form the background for all frames. If a plot is generated the script must make sure it uses the   same positioning (i.e., X Y) as the main script so that the layered plot will stack correctly (unless you   actually want a different offset). Alternatively, background can be a PostScript plot layer of dimensions   exactly matching the canvas size.\nSf or foreground : – foreground=\"script.jl\" or foreground=Fun\\    The optional foreground can be used to make a static foreground plot that should be overlain on all frames.   Make sure the script uses the same positioning (i.e., X Y) as the main script so that the layers will stack   correctly. Alternatively, foreground can be a PostScript plot layer of dimensions exactly matching the canvas size.\nV or verbose : verbose=true | verbose=level\n Select verbosity level. More at verbose\nW or workdir : – name=\"prefix\"\n  By default, all temporary files and frame PNG file are created in the subdirectory prefix set via name.   You can override that selection by giving another workdir as a relative or full directory path. If no   path is given then we create a working directory in the system temp folder named prefix. The main benefit   of a working directory is to avoid endless syncing by agents like DropBox or TimeMachine, or to avoid   problems related to low space in the main directory.\nZ or clean : – clean=true or clean=\"s\"\n  Erase the entire prefix directory after assembling the final movie [Default leaves directory with all images;   the temporary script files, parameter files, and layer PostScript files are all removed (but see debug)].   If your mainscript and all input scripts via titlepage, includefile, and fore|background should   be deleted as well then append s.\nx or cores : – cores=N\n  Limit the number of cores used when making the individual frames. By default we try to use all available cores.   Append N to only use n cores (if too large it will be truncated to the maximum cores available). Finally,   give a negative N to select (all - N) cores (or at least 1 if N equals or exceeds all). The parallel   processing does not depend on OpenMP.","category":"page"},{"location":"movie/#Parameters","page":"movie","title":"Parameters","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"Several parameters are automatically assigned and can be used when composing mainscript and the optional background and foreground scripts. There are two sets of parameters: Those that are constants and those that change with the frame number. The constants are accessible by all the scripts: MOVIE_WIDTH: The width of the canvas (the full movie frame), MOVIE_HEIGHT: The height of the canvas (the full movie frame), MOVIE_DPU: The current dots-per-unit, MOVIE_RATE: The current number of frames per second, MOVIE_NFRAMES: The total number of frames. Also, if includefile was used then any static parameters listed there will be available to all the scripts as well. In addition, the mainscript also has access to parameters that vary with the frame counter: MOVIE_FRAME: The current frame number (an integer, e.g., 136), MOVIE_TAG: The formatted frame number (a string, e.g., 000136), and MOVIE_NAME: The name prefix for the current frame (i.e., prefix\\ \\ **MOVIETAG), Furthermore, if a timefile was given then variables **MOVIE_COL0, MOVIE_COL1, etc. are also set, yielding one variable per column in timefile.  If timefile has trailing text then that text can be accessed via the variable MOVIE_TEXT, and if word-splitting was explicitly requested by -T+w or implicitly by selecting word labels in format or progress) then the trailing text is also split into individual word parameters MOVIE_WORD0, MOVIE_WORD1, etc.","category":"page"},{"location":"movie/#Data-Files","page":"movie","title":"Data Files","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"The movie scripts will be able to find any files present in the starting directory when movie was initiated, as well as any new files produced by mainscript or the optional scripts set via fore|background. No path specification is needed to access these files. Other files may require full paths unless their directories were already included in the DIR_DATA setting.","category":"page"},{"location":"movie/#Plotting-Temporal-Changes","page":"movie","title":"Plotting Temporal Changes","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"A movie is not very interesting if nothing changes. For the animation to change you need to have your mainscript either access a different data set as the frame counter changes, or you need to plot only a varying subset of a data set, showing only the part that should be displayed in each frame. There are several strategies you can use to accomplish these effects:","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"Your timefile passed to frames may have names of specific data files and you simply have your mainscript use the relevant MOVIE_TEXT or MOVIE_WORD? to access the frame-specific file name.\nYou have a single data table which includes absolute time for each record, and you wish to plot these events as time moves forward, yet not displaying events still in the future.  This effect is achieved via the module events.\nYou have a 3-D grid (or a stack of 2-D grids) and you want to interpolate along the axis perpendicular to the 2-D slices (e.g., time, or it could be depth).  In this situation you will use the module grdinterpolate to have the mainscript obtain a slice for the correct time (this may be an interpolation between two different times or depths) and make the frame plot with this temporary grid file.\nYou may be creating data on the fly using gmtmath or grdmath, or perhaps processing data slightly differently per frame (using parameters in the timefile) and displaying these or the changes between frames.","category":"page"},{"location":"movie/#Your-Canvas","page":"movie","title":"Your Canvas","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"As you can see from canvas, unless you specified a custom format you are given a canvas size that is either 24 x 13.5 cm (16:9) or 24 x 18 cm (4:3). If your PROJ_LENGTH_UNIT setting is inch then the custom canvas sizes are just slightly (1.6%) larger than the corresponding SI sizes (9.6 x 5.4\" or 9.6 x 7.2\"); this has no effect on the size of the movie frames but allow us to use good sizes that work well with the dpu chosen.  You should compose your plots using the given canvas size, and movie will make proper conversions of the canvas to image pixel dimensions. It is your responsibility to use X Y to allow for suitable margins and any positioning of items on the canvas. To minimize processing time it is recommended that any static part of the movie be considered either a static background (to be made once by background) and/or a static foreground (to be made once by foreground); movie will then assemble these layers per frame. Also, any computation of static data files to be used in the loop over frames can be produced by background. Any data or variables that depend on the frame number must be computed or set by mainscript or provided via the parameters as discussed above. Note: Using the variables MOVIE_WIDTH or MOVIE_HIGHT to set plot dimensions may lead to clipping against the canvas since these are also the exact canvas dimensions.","category":"page"},{"location":"movie/#External-*PostScript*-Layers","page":"movie","title":"External PostScript Layers","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"Instead of passing scripts/functions to fore|background you can alternatively provide the name of PostScript plot layer files. Note that these must exactly match the canvas size. As a simple example, if you are making a HD movie using the US unit dimensions then a background pink layer would be created by","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"    basemap(region=(0,9.6,0,5.4), proj=:linear, figscale=\"1i\", axes=(fill=:pink,), X=0, Y=0, par=(PS_MEDIA=\"9.6ix5.4i\", figname=\"background.ps\")","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"Note the canvas selection via PS_MEDIA, the matching region and projection, and the zero location of the origin.","category":"page"},{"location":"movie/#Basemap-Frames","page":"movie","title":"Basemap Frames","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"Some map projections will by default draw a fancy map frame; this feature is under the control of MAP_FRAME_TYPE. However, whether a fancy or plain frame is actually drawn also depends on the projection center latitude. Thus, if your movie varies the projection center latitude by changing the view, you should set the frame setting to plain as part of your setup.","category":"page"},{"location":"movie/#Transparent-Images","page":"movie","title":"Transparent Images","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"By default, movie will build opaque PNG images which can then be assembled into an animation. The vast majority of movies is likely to be made that way. Use the format option's experimental modifier transparent to make transparent PNG images. Currently, very few video codecs support transparency. It is claimed both H.265 (HECV) and VP9 (Webm) offer this capability; we have only been able to verify the latter by viewing a transparent webm movie in Chrome. Animated GIFs can be built from transparent PNGs as well and here each additional frame accumulate in the final movie. Experts may create transparent PNGs and create movies in professional tools that support a movie alpha channel.","category":"page"},{"location":"movie/#Technical-Details","page":"movie","title":"Technical Details","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"The movie module creates several hidden script files that are used in the generation of the images (here we have left the file extension off since it depends on the scripting language used): movie_init (initializes variables related to canvas size and dots-per-unit, and includes the contents of the optional includefile), movie_preflight (optional since it derives from background and computes needed data files and possibly a background layer), movie_postflight (optional since it derives from foreground and builds a foreground layer), movie_frame (accepts a frame counter argument and builds the frame image), and movie_cleanup (removes temporary files at the end of the run). For each frame there is a separate movieparams###### script that provides frame-specific variables (e.g., frame number and anything given via frames). The pre- and post-flight scripts have access to the information in movie_init while the frame script in addition has access to the frame-specific parameter file. Using the debug option will just produce these scripts which you can then examine. Note: The mainscript is duplicated per frame and each copy is run simultaneously on all available cores. Multi-treaded GMT modules will therefore be limited to a single core as well.","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"The conversion of PNG frames to an animated GIF (format=\"gif\") relies on GraphicsMagick. Thus, gm must be accessible via your standard search path. Likewise, the conversion of PNG frames to an MP4 (format=\"mp4\") or WebM (format=\"webm\") movie relies on FFmpeg.","category":"page"},{"location":"movie/#Hints-for-Movie-Makers","page":"movie","title":"Hints for Movie Makers","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"Composing movies is relatively simple but you have to think in terms of variables. Examine the examples we have described.  Then, start by making a single plot script (your mainscript) and identify which things should change with time (i.e., with the frame number). Create variables for these values. If they are among the listed parameters that movie creates then use those names. Unless you only require the frame number you will need to make a file that you can pass to frames. This file should then have all the values you need, per frame (i.e., row), with values across all the columns you need. If you need to assign various fixed variables that do not change with time then your mainscript will look shorter and cleaner if you offload those assignments to a separate includefile (includefile). To test your movie, start by using options format=:none debug cover_page to ensure your master frame page looks correct. This page shows you one frame of your movie (you can select which frame via the cover_page arguments). Fix any issues with your use of variables and options until this works. You can then try to remove debug. We recommend you make a very short (i.e., frames) and small (i.e., canvas) movie so you don't have to wait very long to see the result.  Once things are working you can beef up number of frames and movie quality.","category":"page"},{"location":"movie/#Color-Table-Usage","page":"movie","title":"Color Table Usage","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"Because movie launches individual frame plots as separate sessions running in parallel, we cannot utilize the current CPT (i.e., the last CPT created directly by makecpt or grd2cpt, or indirectly by grdimage or grdview). Instead, you must create CPTs using explicit files and pass those names to the modules that require CPT information. In modern mode, this means you need to use the H option in makecpt or grd2cpt in order to redirect their output to named files.","category":"page"},{"location":"movie/#Progress-Indicators","page":"movie","title":"Progress Indicators","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"<img src=\"../figures/docs/GMT_movie_progress.png\" alt=\"Simple color contour\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"The six types of movie progress indicators. All have default sizes, placements, colors and pens (shown)    but these can be overridden by the corresponding modifiers (see below).","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"The letters a-f select one of the six progress indicators shown above.","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"Indicator a) needs a static [lightgreen] and moving [lightred]","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"fill (set via Fill and fill); there is no label option.","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"Indicator b) takes a static [lightblue] and moving [blue] pen (set via Pen and pen),","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"and if annot is set we place a centered label with a font size scaled to 30% of indicator size (unless font was set which is used as given).","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"Indicator c) takes a static [dashed darkred, pen width is 1% of indicator size] and moving [red]","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"pen (default pen width is 5% of indicator size) for a circular arrow (head size is 20% of indicator size), with a central label (if given annot) with a font size 30% of indicator size (unless font was set which we will honor).","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"Indicator d) takes a static [black] and moving [yellow, width 0.5% of length] pen for a rounded line with a cross-mark. If","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"label is requested (annot) we use a font size that is twice the static pen thickness (unless font was set).","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"Indicator e) takes a static [red] and moving [lightgreen] pen. If labels are requested (annot) we","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"use a font size that is twice the static pen thickness (unless font was set).","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"Finally, indicator f) takes a pen for the static axis [black] and a fill for the moving triangle [red];","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"the triangle size is scaled to twice the axis width (see below), and a font size scaled to thrice the axis width.\nNote for indicators d-f: If percentage labels are selected (annot=\"p\"), then the axes display a unit label, otherwise no unit label is supplied. The indicators d-f are horizontal for all justify codes except for ML and MR. The default pen thickness for the linear static lines is the smallest of 2.5% of their lengths and 8p (1.5% and 3p for f). If no size is specified (width) then we default to 5% of canvas width for the three circular indicators and 60% of the relevant canvas dimension for the linear indicators.","category":"page"},{"location":"movie/#Title-Sequence-and-Fading","page":"movie","title":"Title Sequence and Fading","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"<img src=\"../figures/docs/GMT_title_fade.png\" alt=\"Simple color contour\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"The fade-level (0 means black, 100 means normal visibility) for the complete movie, including    an optional title sequence.","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"The complete movie may have an optional leading title sequence (titlepage) of a given duration. A short section at the beginning and/or end of this duration may be designated to fade in/out via the designated fade color [black].  The main animation sequence may also have an optional fade in and/or out section (fading). Here, you can choose to fade on top of the animation or you can \"freeze\" the first and/or last animation frame and only fade over those static images (via modifier preserve) in order to preserve the whole animation sequence.","category":"page"},{"location":"movie/#Examples","page":"movie","title":"Examples","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"To make an animated GIF movie based on the script globe.sh, which simply spins a globe using the frame number to serve as the view longitude, using a custom square 600 by 600 pixel canvas and 360 frames, place a frame counter in the top left corner, and place a progress indicator in the top right corner, try","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"    function globe_sc()\n        coast(region=:global, proj=(name=:Ortho, center=(\"MOVIE_FRAME\",20)), figsize=\"MOVIE_WIDTH\", land=:maroon, water=:turquoise, frame=:g, X=0, Y=0)\n    end\n\n    movie(globe_sc, name=:globe, frames=360, gif=true, canvas=\"15x15x100\", label=:f, progress=true, Vd=1)","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"Here, the globe_sc function simply plots a map with coast but uses the frame number variable as the center longitude. As the automatic frame loop is executed the different frames will be produced with different longitudes.","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"At the end of the execution we find the animated GIF globe.gif and a directory (called globe) that contains all 360 PNG images. Note that there is no information in the globe scripts that reflects the name of the plot, the canvas size, the dimensions of the rasterized PostScript, and so on. That information is hidden from the user; the actual movie scripts that execute are derived from the user-provided scripts and supply the extra machinery. The movie module automatically manages the parallel execution loop over all frames using all available cores.","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"You will note also that it was printed a line with","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"movie main_script.bat -C6ix6ix100 -Nglobe -Lf -A -P -T360","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"this is the result of having used the option Vd=1 in the movie command. It means print the GMT command that creates the movie. Another option is to use Vd=2. In this case, the same command is printed but it's not executed. This can be very handy if one wants to run that command from a system shell instead of from the Julia REPL because movie commands can take a long time to run.","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"As another simple example, this will create mp4 movie with 25 scroling numbers like in very old movies of 20th century.","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"    function main_sc()\n    \ttext(limits=(0,1,0,1), proj=:linear, figsize=10, font=\"200p\", region_justify=:CM, text=\"MOVIE_FRAME\", axes=:noannot, X=0, Y=0)\n    end\n    movie(main_sc, canvas=\"10cx10cx30\", name=:count, frames=25, fill=:pink, format=:mp4, frame_rate=4, clean=true)","category":"page"},{"location":"movie/#Longer-Examples","page":"movie","title":"Longer Examples","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"To explore more elaborate movies, see the Animations examples under our GMT Animations or view high-resolution movies on the GMT Youtube channel.","category":"page"},{"location":"movie/#Other-Movie-Formats","page":"movie","title":"Other Movie Formats","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"As configured, movie only offers the MP4 and WebM formats for movies. The conversion is performed by the tool FFmpeg, which has more codecs and processing options than there are children in China. If you wish to run FFmpeg with other options, run movie with one of the two video formats. At the end it will print the FFmpeg command used. You can copy, paste, and modify this command to select other codecs, bit-rates, and arguments. You can also use the PNG sequence as input to tools such as QuickTime Player, iMovie, MovieMaker, and other commercial programs to make a movie that way.","category":"page"},{"location":"movie/#Remaking-Movie-with-Existing-PNG-Frames","page":"movie","title":"Remaking Movie with Existing PNG Frames","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"Perhaps you made your movie and then decided you want to change the frame rate or adjust something else in how the movie is put together from all the still images. If you kept all the frame images then you do not have to rerun the whole render process. Assuming you want a MP4 movie and that you want to rerun just the ffmpeg command, here is an example","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"    ffmpeg -loglevel warning -f image2 -framerate 24 -y -i \"mydir/myimages_%04d.png\" -vcodec libx264 -pix_fmt yuv420p mymovie.mp4","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"This command is also written out when movie performs this step. For other movie formats you will need to consult the FFmpeg documentation. Note: On Windows, the percentage character is special (like the dollar sign under shells) so you will need to enter two (%%).","category":"page"},{"location":"movie/#Manipulating-Multiple-Movies","page":"movie","title":"Manipulating Multiple Movies","text":"","category":"section"},{"location":"movie/","page":"movie","title":"movie","text":"If you are making a series of similar movies, you can use FFmpeg to paste and stitch them into a single movie. Assume we have four movies called movie1.mp4, movie2.mp4, movie3.mp4, and movie4.mp4, and you wish to combine them into a 2x2 panel showing the four movies simultaneously. You would first combine movies (1,2) and (3,4) horizontally, then combine the two resulting strips vertically","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"    ffmpeg -i movie_1.mp4 -i movie_2.mp4 -filter_complex hstack=inputs=2 top.mp4\n    ffmpeg -i movie_3.mp4 -i movie_4.mp4 -filter_complex hstack=inputs=2 bottom.mp4\n    ffmpeg -i top.mp4 -i bottom.mp4 -filter_complex vstack=inputs=2 four_movies.mp4","category":"page"},{"location":"movie/","page":"movie","title":"movie","text":"For more information on such manipulations, see the FFmpeg documentation.","category":"page"},{"location":"arrows_control/#Vector-Attributes","page":"Vector Attributes","title":"Vector Attributes","text":"","category":"section"},{"location":"arrows_control/","page":"Vector Attributes","title":"Vector Attributes","text":"Set arrow parameters. They are specified by a keyword (arrow) and a named tuple. Several modifiers may be provided for specifying the placement of vector heads, their shapes, and the justification of the vector. Below, left and right refers to the side of the vector line when viewed from the start point to the end point of a segment:","category":"page"},{"location":"arrows_control/","page":"Vector Attributes","title":"Vector Attributes","text":"arrow=(length=..., start=..., shape=..., pen=..., norm=..., etc)","category":"page"},{"location":"arrows_control/","page":"Vector Attributes","title":"Vector Attributes","text":"len=xx or length=xx\n Length of the vector head. xx may be numeric, a string with the length and the  units attached (as in len=\"2c\") or a tuple with length and units as in len=(2,:centimeters)\nangle=xx\n Sets the angle of the vector head apex [default 30]\nstart=true\n Places a vector head at the beginning of the vector path [none]. Optionally, set\nstart=:line – For a terminal line\nstart=:arrow – For a arrow (the default)\nstart=:circle – For a circle\nstart=:tail – For a tail\nstart=:open_arrow – For a plain open arrow\nstart=:open_tail – For a plain open tail\nstart=:left_side – For draw the left half-side\nstart=:right_side – For draw the right half-side\nstop=true\n Places a vector head at the end of the vector path [none]. Optionally, set the same values  as the start case.\nmiddle=true\n Places a vector head at the mid-point of the vector path [none]. Optionally, set the same  values as the start case but it can't be used with the start and stop options. But it accepts two  further options:\nmiddle=:forward\n Forward direction of the vector [the default]\nmiddle=:reverse\n Reverse direction of the vector.\nfill=color\n Sets the vector head fill. The color value may contain any of valid ways ways of  specifying color.\nfill=:none\n Turns off vector head fill.\nshape=xx\n Sets the shape of the vector head (range -2/2). Determines the shape of the head of a vector.  Normally (i.e., for vector_shape = 0), the head will be triangular, but can be changed to an arrow (1) or  an open V (2). Intermediate settings give something in between. Negative values (up to -2) are allowed as  well. Shortcuts available as:\nshape=:triang     same as shape=0\nshape=:arrow      same as shape=1\nshape=:V          same as shape=2\nhalf=:left\n Draw half-arrows, using only the left side of specified heads [default is both sides].\nhalf=:right\n Draw half-arrows, using only the right side of specified heads [default is both sides].\nnorm=xx\n Scales down vector attributes (pen thickness, head size) with decreasing length, where vector  plot lengths shorter than norm will have their attributes scaled by length/norm. xx may be a number or a  string (number&unit).\npole=(plon,plat) – Specifies the oblique pole for the great or small circles.\npen=pen\n Sets the vector pen attributes. The pen value may contain any of valid ways of specifying pens.  If pen has a leading '-' (and hence the pen value must be a string) then the head outline is not drawn.\nang1_ang2=true or start_stop=true\n Means that input angle, length data instead represent the start and stop opening angles of the arc  segment relative to the given point.\ntrim=trim\n Shift the beginning or end point (or both) along the vector segment by the given trim. To  select begin or end prepend a 'b' or a 'e' to the trim value (hence it must be a string). Append suitable  unit (c, i, or p). If the modifiers b|e are not used then trim may be two values separated by a slash, which  is used to specify different trims for the beginning and end. Positive trims will short the vector while  negative trims will lengthen it [no trim].","category":"page"},{"location":"arrows_control/","page":"Vector Attributes","title":"Vector Attributes","text":"In addition, all but circular vectors may take these options:","category":"page"},{"location":"arrows_control/","page":"Vector Attributes","title":"Vector Attributes","text":"justify=??\n Determines how the input x,y point relates to the vector. Choose from\njustify=:begin          – The default\njustify=:end\njustify=:center\nendpoint=true\n Means that input angle and length are provided instead the x, y coordinates of the vector end point.","category":"page"},{"location":"arrows_control/","page":"Vector Attributes","title":"Vector Attributes","text":"Finally, Cartesian vectors may take this option:","category":"page"},{"location":"arrows_control/","page":"Vector Attributes","title":"Vector Attributes","text":"uv=scale\n Expects input vx,vy vector components and uses the scale to convert to polar coordinates with  length in given unit.","category":"page"},{"location":"gallery/GADM/gadm/#Plot-countries-administrative-units-from-[GADM](https://gadm.org)-data","page":"GADM Countries","title":"Plot countries administrative units from GADM data","text":"","category":"section"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"We start by download and save in cache the geopackage file with Mozambique data. Note, a downloading message will be printed only once, and in this case it will say","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"Downloading geographic data for country MOZ provided by the https://gadm.org project. It may take a while. The file gadm36_MOZ.gpkg (after uncompressing) will be stored in c:/j/.gmt\\cache","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"using GMT\nmozambique = gadm(\"MOZ\");","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"imshow(mozambique, proj=:guess, title=\"Mozambique\")","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"<img src=\"../mozambique.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"Next let us add all the provincies of Mozambique. For that we'll use the country code as parent and the option children=true to indicate that we want all provincies boundaries.","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"mozambique = gadm(\"MOZ\", children=true);\nimshow(mozambique, proj=:guess, title=\"Provinces of Mozambique\")","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"<img src=\"../moz_provinces.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"To know the provinces names such that we can use them individually for example, we use the option names=true","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"gadm(\"MOZ\", names=true)","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"\"Cabo Delgado\"\n\"Gaza\"\n\"Inhambane\"\n\"Manica\"\n\"Maputo\"\n\"Maputo City\"\n\"Nampula\"\n\"Nassa\"\n\"Sofala\"\n\"Tete\"\n\"Zambezia\"","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"Now we can plot only one of those provinces and its children","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"CD = gadm(\"MOZ\", \"Cabo Delgado\", children=true);\nimshow(CD, proj=:guess, title=\"Cabo Delgado\")","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"<img src=\"../cabo_delgado.png\" width=\"300\" class=\"center\"/>","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"","category":"page"},{"location":"gallery/GADM/gadm/","page":"GADM Countries","title":"GADM Countries","text":"Download a Neptune Notebook here","category":"page"},{"location":"gallery/historic/ex24/#Data-selection-based-on-geospatial-criteria","page":"Data selection based on geospatial criteria","title":"Data selection based on geospatial criteria","text":"","category":"section"},{"location":"gallery/historic/ex24/","page":"Data selection based on geospatial criteria","title":"Data selection based on geospatial criteria","text":"    dateline = [180 0; 180 -90];\n    point = [147.21667 -42.8 6000]\n\n    R = gmtinfo(\"@oz_quakes_24.txt\", inc=10);\n    coast(region=R[1].text[1][3:end], land=:tan, water=:darkblue,\n          shore=(:thin,:white), area=500, proj=:Mercator, figsize=14,\n          frame=(axes=:WeSn, annot=20, ticks=10, grid=10))\n    plot!(\"@oz_quakes_24.txt\", marker=:circle, ms=0.07, fill=:red)\n    t = gmtselect(\"@oz_quakes_24.txt\", mask=\"k/s\", \n                  dist2line=(line=dateline, dist=\"1000k\"),\n                  dist2pt=(pts=point, dist=\"3000k\"), colinfo=:g, reverse=:l)\n    plot!(t, marker=:circle, ms=0.07, fill=:green)\n\n    plot!(point, marker=\"Ellipse-\", ml=(:thick, :white))\n    text!(text_record(point, \"Hobart\"), font=(14,\"Helvetica-Bold\",:white),\n          justify=:LT, offset=(0.25, 0.25))\n    plot!(point, MarkerLine=(:fat, :white), marker=:plus, ms=0.4)\n    plot!(dateline, pen=(:thick, :white), straight_lines=true, show=true) ","category":"page"},{"location":"gallery/historic/ex24/","page":"Data selection based on geospatial criteria","title":"Data selection based on geospatial criteria","text":"See also GMT ex24","category":"page"},{"location":"gallery/historic/ex27/#Plotting-Sandwell/Smith-Mercator-img-grids","page":"Plotting Sandwell/Smith Mercator img grids","title":"Plotting Sandwell/Smith Mercator img grids","text":"","category":"section"},{"location":"gallery/historic/ex27/","page":"Plotting Sandwell/Smith Mercator img grids","title":"Plotting Sandwell/Smith Mercator img grids","text":"\t# Gravity in tasman_grav.nc is in 0.1 mGal increments and the grid\n\t# is already in projected Mercator x/y units.\n\n\t# Make a suitable cpt file for mGal\n\tgrav_cpt = makecpt(range=(-120,120), cmap=:rainbow)\n\n\t# Since this is a Mercator grid we use a linear projection\n\tgrdimage(\"@tasman_grav.nc=ns+s0.1\", frame=:none, shade=:default,\n             proj=:linear, figscale=0.635)\n\n\t# Then use gmt pscoast to plot land; get original -R from grid remark\n\t# and use Mercator gmt projection with same scale as above on a spherical Earth\n\tR = grdinfo(\"@tasman_grav.nc\", nearest=:i)\n\tR = R[1].text[1][3:end]\n\tcoast!(region=R, proj=:merc, figscale=0.635, land=:black, river_fill=:white,\n           frame=(axes=:WSne, annot=10, ticks=5), res=:high,\n           par=(FORMAT_GEO_MAP=\"dddF\", PROJ_ELLIPSOID=:Sphere))\n\n\t# Put a color legend in top-left corner of the land mask\n    colorbar!(region=R, pos=(inside=true, anchor=:TL, offset=1, length=(5, 0.4)),\n              xaxis=(annot=50, ticks=10), ylabel=\"mGal\", shade=true,\n              box=(pen=1, fill=:white), show=true)","category":"page"},{"location":"gallery/historic/ex27/","page":"Plotting Sandwell/Smith Mercator img grids","title":"Plotting Sandwell/Smith Mercator img grids","text":"See also GMT ex27","category":"page"},{"location":"rectangles/#Draw-rectangles","page":"Draw rectangles examples","title":"Draw rectangles","text":"","category":"section"},{"location":"rectangles/#Simple-filled-rectangle","page":"Draw rectangles examples","title":"Simple filled rectangle","text":"","category":"section"},{"location":"rectangles/","page":"Draw rectangles examples","title":"Draw rectangles examples","text":"using GMT\nrect = [2 2; 2 6; 6 6; 6 2; 2 2];\nplot(rect, region=[0 10 0 10], lw=1, fill=:blue, axes=:a, aspect=:equal, show=true)","category":"page"},{"location":"rectangles/","page":"Draw rectangles examples","title":"Draw rectangles examples","text":"(Image: \"Blue rectangle\")","category":"page"},{"location":"rectangles/#Rectangles-with-patterns","page":"Draw rectangles examples","title":"Rectangles with patterns","text":"","category":"section"},{"location":"rectangles/","page":"Draw rectangles examples","title":"Draw rectangles examples","text":"Now add some patterns. The full pattern syntax is explained in GMT patterns but basically we are using pattern number 20 at 200 dpi and a blue background for the left rectangle and pattern 89 also at 200 dpis for the right rectangle.","category":"page"},{"location":"rectangles/","page":"Draw rectangles examples","title":"Draw rectangles examples","text":"using GMT\nrect = [1 1; 1 7; 4 7; 4 1; 1 1];\nplot(rect, region=[0 10 0 10], lw=1, fill=\"p20+bgreen+r200\", axes=:a, aspect=:equal)\nplot!([4 0].+rect, lw=1, fill=\"p89+r200\", show=true)","category":"page"},{"location":"rectangles/","page":"Draw rectangles examples","title":"Draw rectangles examples","text":"(Image: \"Pattern Rectangles\")","category":"page"},{"location":"rectangles/#Rectangles-with-transparency","page":"Draw rectangles examples","title":"Rectangles with transparency","text":"","category":"section"},{"location":"rectangles/","page":"Draw rectangles examples","title":"Draw rectangles examples","text":"This variation creates rectangles with 0, 30% and 70% transparency as well as different boundary lines.","category":"page"},{"location":"rectangles/","page":"Draw rectangles examples","title":"Draw rectangles examples","text":"using GMT\nrect = [0.5 0.5; 0.5 7; 2.5 7; 2.5 0.5; 0.5 0.5];\nplot(rect, region=[0 10 0 10], lw=0.5, fill=:blue, axes=:a, aspect=:equal)\nplot!([3 0].+rect, lw=1, ls=\"--\", fill=:blue, transparency=30)\nplot!([6 0].+rect, lw=2, lc=:red, fill=:blue, transparency=70, show=true)","category":"page"},{"location":"rectangles/","page":"Draw rectangles examples","title":"Draw rectangles examples","text":"(Image: \"Transparent Rectangles\")","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/#Choropleth-example-Covid-rate-of-infection-in-Portugal","page":"Covid in Portugal","title":"Choropleth example Covid rate of infection in Portugal","text":"","category":"section"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"First, download the Portuguese district polygons shape file from this Github repo Next load it with:","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"using GMT, DataFrames, CSV","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"Pt = gmtread(\"C:\\\\programs\\\\compa_libs\\\\covid19pt\\\\extra\\\\mapas\\\\concelhos\\\\concelhos.shp\");","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"Download and load a CSV file from same repo with rate of infection per district. Load it into a DataFrame to simplify data extraction.","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"incidence = CSV.read(\"C:\\\\programs\\\\compa_libs\\\\covid19pt\\\\data_concelhos_incidencia.csv\", DataFrame);","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"Get the rate of incidence in number of infected per 100_000 habitants for the last reported week.","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"r = collect(incidence[end, 2:end]);","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"But the damn polygon names above are all uppercase, Ghrrr. We will have to take care of that.","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"ids = names(incidence)[2:end];","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"Because the multi-segment headers have several fields in a comma separated string and the one we care (the one that is common with the names in the Pt dataset) is in the seventh position we use argument 7. Last argument, 2 means to convert all names in the Pt headers to upper case so we can compare them with the names in ids. The comparison is made inside the next call to the make_zvals_vec() function that takes care to return the numerical vector that we need in plot's level option","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"zvals = GMT.make_zvals_vec(Pt, ids, r, 7, 2);","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"Create a Colormap to paint the district polygons","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"C = makecpt(range=(0,1500,10), inverse=true, cmap=:oleron, hinge=240, bg=:o);","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"Get the date for the data being represented to use in title","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"date = incidence[end,1];","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"And finaly do the plot","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"plot(Pt, level=zvals, cmap=C, close=true, fill=\"+z\", pen=0.5, region=(-9.75,-5.9,36.9,42.1), proj=:Mercator, title=\"Infected / 100.000 habitants \" * date)","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"colorbar!(pos=(anchor=:MR,length=(12,0.6), offset=(-2.4,-4)), color=C, axes=(annot=100,), show=true)","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"<img src=\"../choropleth_cv19.png\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"","category":"page"},{"location":"gallery/choropleths/choropleth_cv19/","page":"Covid in Portugal","title":"Covid in Portugal","text":"Download a Pluto Notebook here","category":"page"},{"location":"gallery/historic/ex26/#General-vertical-perspective-projection","page":"General vertical perspective projection","title":"General vertical perspective projection","text":"","category":"section"},{"location":"gallery/historic/ex26/","page":"General vertical perspective projection","title":"General vertical perspective projection","text":"    lat = 41.5;\tlon = -74;\talt = 160;\ttilt = 0;\tazim = 0;\ttwist = 0;\twidth = 0;\theight = 0;\n    coast(region=:global360, frame=(annot=5, grid=5), land=:lightbrown, water=:lightblue,\n          shore=true, borders=((level=1,pen=(1,:red)), (level=2, pen=0.5)),\n          proj=(name=:ortho, center=[lon, lat], parallels=[alt, azim, tilt, twist, width, height]),\n          figsize=10, y_off=12, x_off=2.5)\n\n    # Now point from an altitude of 160 km with a specific tilt and azimuth and with a wider restricted\n    # view and a boresight twist of 45 degrees\n    tilt=55;\tazim=210;\ttwist=45;\twidth=30;\theight=30;\n    coast!(frame=:same, land=:lightbrown, water=:lightblue, shore=true,\n           rivers=(level=:a, pen=:blue), res=:intermediate, borders=:a,\n           proj=(name=:ortho, center=[lon, lat], parallels=[alt, azim, tilt, twist, width, height]),\n           figsize=12, x_off=2.5, y_off=-10, show=1)","category":"page"},{"location":"gallery/historic/ex26/","page":"General vertical perspective projection","title":"General vertical perspective projection","text":"See also GMT ex26","category":"page"},{"location":"histogram/#histogram","page":"histogram","title":"histogram","text":"","category":"section"},{"location":"histogram/","page":"histogram","title":"histogram","text":"histogram(cmd0::String=\"\", arg1=nothing; kwargs...)","category":"page"},{"location":"histogram/","page":"histogram","title":"histogram","text":"Calculate and plot histograms","category":"page"},{"location":"histogram/#Description","page":"histogram","title":"Description","text":"","category":"section"},{"location":"histogram/","page":"histogram","title":"histogram","text":"Reads file, MxN matrix, GMTdataset or GMTimage and examines the first data column (or one set by incol) to calculate histogram parameters based on the bin-width provided. Using these parameters, scaling, and optional range parameters it will plot the histogram. A cumulative histogram may also be specified.","category":"page"},{"location":"histogram/#Optional-Arguments","page":"histogram","title":"Optional Arguments","text":"","category":"section"},{"location":"histogram/","page":"histogram","title":"histogram","text":"A or horizontal : – horizontal=true\n Plot the histogram horizontally from x = 0 [Default is vertically from y = 0]. The plot  dimensions remain the same, but the two axes are flipped.\nauto : – auto=true\n When input is a GMTimage of UInt16 type this option will compute the histogram as well as good  bounds to use in contrast enhancement, which will be plotted as two vertical lines.\nB or axes or frame\nSet map boundary frame and axes attributes. Default is to draw and annotate left and bottom axes. More at frame\nC or color or cmap : – color=cpt\n Give a CPT or specify color=\"color1,color2 [,color3 ,...]\" or color=((r1,g1,b1),(r2,g2,b2),...) to build a linear continuous CPT from those colors automatically. The mid x-value for each bar is used to look-up the bar color. If no argument is given then we select the current CPT.\nD or annot or annotate or count : – annot=true | annot=(beneath=|font=|offset=|vertical=,)\n Annotate each bar with the count it represents. Add any of the following options: Use annot=(beneath=true,) to place the labels beneath the bars instead of above; use annot=(font=\"font\",) to change to another font than the default annotation font; use annot=(offset=val,) to change the offset between bar and label [6p]; use annot=(vertical=true,) to rotate the labels from horizontal to vertical.\nE or width : – width=val | width=(width=val, offset=val)\\   Use an alternative histogram bar width than the default set via bin, and optionally shift all bars by an offset. Here width is either an alternative width in data units, or the user may append a valid plot dimension unit (\"c|i|p\") for a fixed dimension instead. Optionally, all bins may be shifted along the axis by offset. As for width, it may be given in data units of plot dimension units by appending the relevant unit.\nbinmethod or BinMethod : – binmethod=mthod\n Use a binning algorithm. For decimal data: \"scott\", optimal for data is close to being normally distributed. Also  appropriate for most other distributions. Uses a bin width of 35*std(X())*numel(X)^(-13); \"fd\", uses a bin  width of 2*IQR(X())*numel(X)^(-13), where IQR is the interquartile range of X; \"sturges\", chooses the number  of bins to be ceil(1 + log2(numel(X))). \"sqrt\", chooses the number of bins to be ceil(sqrt(numel(X))).\nFor DateTime data: \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\" or \"year\" \nF or center : – center=true\\   Center bin on each value. [Default is left edge].\nfull_histo : – full_histo=true\n When input is a GMTimage of UInt16 type histograms are often (e.g. Landsat images) characterized  by a very high number of countings at x=0 followed by may bins with zero countings. By default we  check for that case and if found we set the zero bin countings to zero. This is crucial for the  auto or thresholds to work. If, however, that is not wished use full_histo=true\nG or fill : fill=color\n Select filling of bars [Default is a type of blue].\nI or inquire or bins : – inquire=:all | inquire=:no_zero | inquire=:bins\n Inquire about min/max x and y after binning. The xmin xmax ymin ymax is output; no plotting is done. Use inquire=:no_zero to output a table of the resulting x,y data instead. inquire=:all will output all x,y bin data even when y == 0. inquire=:bins outputs the binned array (the histogram).\nJ or proj : – proj=<parameters>\n Select map projection. More at proj\nL or out_range : –  out_range=:first | out_range=:last | out_range=:both\n The modifiers specify the handling of extreme values that fall outside the range set by bin. By default these values are ignored. Use out_range=:both to let these values be included in the first or last bins. To only include extreme values below first bin into the first bin, use out_range=:first, and to only include extreme values above the last bin into that last bin, use out_range=:last.\nN or distribution : – distribution=mode | distribution=(mode=mode, pen=(pen))\n  Draw the equivalent normal distribution; append desired pen [0.5p,black].   The mode selects which central location and scale to use:\n      0 = mean and standard deviation [Default];      1 = median and L1 scale (1.4826 * median absolute deviation; MAD);      2 = LMS (least median of squares) mode and scale.\nThis option may be repeated to draw several of these curves. To do that use a tuple of tuples. Example: N=((mode=1,pen=(1,:red)), (mode=0,pen=(1,:blue)))\nQ or cumulative : – cumulative=true | cumulative=\"r\"\n Draw a cumulative histogram. Append r to instead compute the reverse cumulative histogram.\nR or region or limits : – limits=(xmin, xmax, ymin, ymax) | limits=(LLUR=(xmin, xmax, ymin, ymax),units=\"unit\") | ...more\n Specify the region of interest. More at limits\nS or stairs : – stairs=true\n Draws a stairs-step diagram which does not include the internal bars of the default histogram. Uses pen.\nT or range or bin : – range=(min,max,inc[,:number,:log2,:log10]) | range=[list] | range=file\n Defines the range of the new CPT by giving the lowest and highest z-value (and optionally an interval). If range  is not given, the existing range in the master CPT will be used intact. The values produces defines the color  slice boundaries. If :number is added as a fourth element then inc is meant to indicate the number of  equidistant coordinates instead. Use :log2 if we should take log2 of min and max, get their nearest integers,  build an equidistant log2-array using inc integer increments in log2, then undo the log2 conversion. Same for :log10.  For details on array creation, see Generate 1D Array.\nthresholds : – thresholds=(low,high)\n When input is a GMTimage of UInt16 type this option will compute the histogram as well as good  bounds to use in contrast enhancement. The alghoritm used checks from right and left when the  countings are >= low & <= high percentage of the maximum histogram countings. The defaul values  (which are used by auto and zoom) are thresholds=(0,0.5)\nU or time_stamp or timestamp : – time_stamp=true | time_stamp=(just=\"code\", pos=(dx,dy), label=\"label\", com=true)\n Draw GMT time stamp logo on plot. More at timestamp\nV or verbose : – verbose=true | verbose=level\n Select verbosity level. More at verbose\nW or pen : – pen=pen\n Draw bar outline (or stair-case curve) using the specified pen thickness. [Default is no outline]. . See Pen attributes\nX or x_off or x_offset : – x_off=[] | x_off=x-shift | x_off=(shift=x-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at x_off\nY or y_off or y_offset : – y_off=[] | y_off=y-shift | y_off=(shift=y-shift, mov=\"a|c|f|r\")\n Shift plot origin. More at y_off\nZ or kind : – kind=type | kind=(counts=, | freq=, | logcount=, | logfreq=, | log10count=, | log10freq=, weights=)\n Choose between 6 types of histograms:\n0 = counts [Default]\n1 = frequency_percent\n2 = log (1.0 + count)\n3 = log (1.0 + frequency_percent)\n4 = log10 (1.0 + count)\n5 = log10 (1.0 + frequency_percent).\nTo use weights provided as a second data column instead of pure counts, use a tuple. e.g. kind=(counts=true, weights=true)\nzoom : – zoom=true\n When input is a GMTimage of UInt16 type this option will set auto=true and show histogram only  on the region of interest. \nbi or binary_in\ndi or nodata_in\ne or pattern\nf or colinfo\nh or header\ni or incol\np or view or perspective : – view=(azim, elev)\n Selects perspective view and sets the azimuth and elevation of the viewpoint. More at perspective\nt or transparency or alpha: – alpha=50\n Set PDF transparency level for an overlay, in (0-100] percent range. [Default is 0, i.e., opaque].  Works only for the PDF and PNG formats.\nq or inrow","category":"page"},{"location":"histogram/#Examples","page":"histogram","title":"Examples","text":"","category":"section"},{"location":"histogram/","page":"histogram","title":"histogram","text":"To draw a histogram of the data v3206.t containing seafloor depths, using a 250 meter bin width, center bars, and draw bar outline, use:","category":"page"},{"location":"histogram/","page":"histogram","title":"histogram","text":"    histogram(\"@v3206.t\", bin=250, center=true, pen=\"0.5p\", show=true)","category":"page"},{"location":"histogram/","page":"histogram","title":"histogram","text":"If you know the distribution of your data, you may explicitly specify range and scales. E.g., to plot a histogram of the y-values (2nd column) in the file errors.xy using a 1 meter bin width, plot from -10 to +10 meters @ 0.75 cm/m, annotate every 2 m and 100 counts, and use black bars, run:","category":"page"},{"location":"histogram/","page":"histogram","title":"histogram","text":"    histogram(\"errors.xy\", bin=1, region=(-10,10,0,0), J=\"xc/0.01c\",\n               xaxis=(annot=2,label=:Error), yaxis=(annot=100, label=:Counts), fill=:black, incol=1) ","category":"page"},{"location":"histogram/","page":"histogram","title":"histogram","text":"Since no y-range was specified, histogram will calculate ymax in even increments of 100.","category":"page"},{"location":"histogram/","page":"histogram","title":"histogram","text":"To plot the histogram of a Landsat image, pick good bounds for contrast enhancement and show them","category":"page"},{"location":"histogram/","page":"histogram","title":"histogram","text":"    I = gmtread(\"landsat.tif\")\n    histogram(I, zoom=true, show=true);","category":"page"},{"location":"histogram/#See-also","page":"histogram","title":"See also","text":"","category":"section"},{"location":"histogram/","page":"histogram","title":"histogram","text":"The GMT man page","category":"page"},{"location":"gallery/scripts_agu/symbols/#Symbols","page":"Symbols","title":"Symbols","text":"","category":"section"},{"location":"gallery/scripts_agu/symbols/","page":"Symbols","title":"Symbols","text":"Plot some symbol examples","category":"page"},{"location":"gallery/scripts_agu/symbols/","page":"Symbols","title":"Symbols","text":"plot([0 0], limits=(-1,6,-1,6), figsize=(15,15), marker=:circle, ms=0.75,\n     fill=:green, frame=(axes=:WSen, annot=2,grid=1, title=\"Symbols & pens\"))\nplot!([1 0], marker=:circle, ms=0.75, fill=:green, ml=(1,:black))\nplot!([2 0], marker=:circle, ms=0.75, fill=:green, ml=(1,\"0/130/0\"))\nplot!([3 0], marker=:circle, ms=0.75, fill=:green, ml=(1,:black, :dashed))\nplot!([4 0], marker=:circle, ms=0.75, fill=:green, ml=(1,:black, \"-.\"))\nplot!([5 0], marker=:circle, ms=0.75, fill=\"-\",    ml=(1,\"0/130/0\"))\nplot!([0 1], marker=:star,   ms=0.75, fill=:red,   ml=(1,:black))\nplot!([1 1], marker=:triang, ms=0.75, fill=:red,   ml=(1,:black,:dashed))\nplot!([2 1], marker=:diamond,ms=0.75, fill=:red)\nplot!([3 1], marker=:hexagon,ms=0.75, fill=:red,   ml=(0.5,:black))\nplot!([4 1], marker=:plus,   ms=0.75, ml=(2,:red))\nplot!([5 1], marker=:square, ms=0.75, fill=:red)\nplot!([0 3], marker=(custom=\"flash\", size=1.5),  ml=1, fill=:brown)\nplot!([1 3], marker=(custom=\"hurricane\", size=1.5),  ml=1, fill=:blue)\nplot!([2 3], marker=(custom=\"pacman\", size=1.5),  ml=1, fill=:gray)\nplot!([3 3], marker=(custom=\"star3\", size=1.5),  ml=1, fill=:brown)\nplot!([4 3], marker=(custom=\"sun\", size=1.5),  ml=1, fill=:yellow)\nplot!([5 3], marker=(custom=\"volcano\", size=1.5),  ml=1, fill=:red)\nplot!([1 5], marker=(custom=\"@gallo\", size=3.5))\nplot!([4 5], marker=(custom=\"@sardinha\", size=6.0), show=1, name=\"symbols.png\")","category":"page"},{"location":"gallery/scripts_agu/symbols/","page":"Symbols","title":"Symbols","text":"<img src=\"../figs/symbols.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"quick_learn/#How-to-learn-using-GMT-in-Julia","page":"Quick Learn","title":"How to learn using GMT in Julia","text":"","category":"section"},{"location":"quick_learn/#Case-1.-You-are-already-a-GMT-user","page":"Quick Learn","title":"Case 1. You are already a GMT user","text":"","category":"section"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"So you already know GMT and how to consult the GMT manual pages. Then the easiest way to start is to use the option letters and options arguments as strings. Since (nearly) all base modules received a wrapper you would call pscoast (or its alias coast) like this:","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    coast(R=\"-10/0/35/45\", J=\"M15c\", B=\"afg\", W=\"0.5p\", show=true)","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"but what if you need to make a map with some data, a grid for example. Simple, give it as a first argument as in:","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    grdimage(\"@earth_relief_20m.grd\", J=\"R15c\", B=\"a\", show=true)","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"This will compute a cpt under the hood and use it. But what if you want to use another cpt? Also simple, just make one and use it in the above command. i.e.:","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    CPT = makecpt(T=\"-10000/8000/1000\");\n    grdimage(\"@earth_relief_20m.grd\", J=\"R15c\", B=\"a\", C=CPT, show=true)","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"The last command introduced a novelty in using the C option and that's where things start to be interesting. Instead of using a previously existing cpt file, e.g. a file called colorcpt and used it as C=\"color.cpt\", we created a GMTcpt object that resides only in Julia memory space and passed it directly via the C option. The same could have been done if we had the earth_relief_20m.grd grid in memory, which, for example sake, can be achieved by previously reading the grid file.","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    CPT = makecpt(T=\"-10000/8000/1000\");\n    G = gmtread(\"@earth_relief_20m.grd\");\n    grdimage(G, J=\"R15c\", B=\"a\", C=CPT, show=true)","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"Though not particularly useful nor memory more efficient to read the grid first this example illustrates typical usage. That is, use GMT to process and map/plot data resident in Julia memory. GMT modules know how to manipulate import/create data stored in GMTgridGrid type, GMTimageImage type, GMTdatasetDataset type, GMTcptCPT type and GMTpsPostscript type objects. The helper functions mat2grid, mat2img and mat2ds exist to allow creating those objects from 2D arrays of floats, uint8, uint16 and MxN matrices respectively.","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"Example: create three grids with random data, compute their average and display it","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    G1 = mat2grid(rand(128,128));\n    G2 = mat2grid(rand(128,128));\n    G3 = mat2grid(rand(128,128));\n    Gavg = (G1 .+ G2 .+ G3) ./ 3;\n    imshow(Gavg)","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"Here we introduced also the use of a module that does not exist in GMT, imshow, but one that is in fact a mockup made with grdimage and grdview and with a set of defaults and guesswork that allows quick and easy display of grids and images. It also opens the door for a more vast ensemble of tools that go beyond the use of pure GMT syntax.","category":"page"},{"location":"quick_learn/#Case-2.-You-are-a-new-GMT-user-or-one-that-wants-to-use-long-verbose-options","page":"Quick Learn","title":"Case 2. You are a new GMT user or one that wants to use long verbose options","text":"","category":"section"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"The GMT terse syntax is extremely versatile but also more cryptical and less on the likes of current times where explicit is better. So all of the one letter options in GMT modules were given an alias as well as many of its arguments. But there are so many of them (options + sub-options) that this raises a problem of documentation. Some modules have received an adapted version of the GMT official documentation but this is such a huge task that many modules do not have one yet. Most modules have a on-line help (type ? prog_name) that maps the one letter option to its aliases (there often more than one alias). This still leaves, however, the issue of how the sub-options have been expanded. This has been addressed for the modules that have so far a Julia manual, but not for all the others. For those, the recommended way is to use the helper program gmthelp. It lists the mapping between the options aliases (and, for some, the sub-options) and the GMT syntax. Let's, see the example of the plot (psxy) module","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    gmthelp(plot)\n    Option: R, or region, or limits => GMTgrid | NamedTuple |Tuple | Array | String\n    Option: J, or proj, or projection => NamedTuple | String\n    Option: B, or frame, or axes, or xaxis, or yaxis, or zaxis, or axis2, or xaxis2, or yaxis2 => NamedTuple | String\n    Option: a, or e, or f, or g, or l, or p, or t, or params => (Common options)\n    Option: D, or shift, or offset => Tuple | String | Number | Bool [Possibly not yet expanded]\n    Option: I, or intens => Tuple | String | Number | Bool [Possibly not yet expanded]\n    Option: N, or no_clip, or noclip => Tuple | String | Number | Bool [Possibly not yet expanded]\n    Option: A, or steps, or straight_lines => (x=?(x), y=?(y), meridian=?(m), parallel=?(p), )\n    Option: F, or conn, or connection => (continuous=?(c), net=?(n), network=?(n), refpoint=?(r), ignore_hdr=Any(a), single_group=Any(f), segments=Any(s), segments_reset=Any(r), anchor=?(), )\n    Option: C, or color, or cmap => GMTcpt | Tuple | Array | String | Number\n    Option: G, or fill => NamedTuple | Tuple | Array | String | Number\n    Option: G, or markerfacecolor, or MarkerFaceColor, or mc => NamedTuple | Tuple | Array | String | Number\n    Option: L, or close, or polygon => (left=Any(+xl), right=Any(+xr), x0=?(+x), bot=Any(+yb), top=Any(+yt), y0=?(+y), sym=Any(+d), asym=Any(+D), envelope=Any(+b), pen=?(+p), )\n    Option: W, or pen => NamedTuple | Tuple | String | Number\n    Option: S, or symbol => (symb=?(1), size=?(), unit=?(1), )","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"Let's look for example at option C that is called color or cmap in the expanded form. It can take as argument a GMTcpt argument (the example above), or a Tuple with the three (R,G,B) color elements with values between 0 and 255, or in a Array form [R, G, B], or a String (e.g. color=\"color.cpt\", or color=\"red\"), or as a Number (color=200).","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"Let's also look at the L or close or polygon option. It says that this option can be expanded in form a named tuple with keys like bot, top, x0, etc... (they describe how to connect first and last point). The Any in sub-options like bot=Any(+yb) informs that Anything will do and the (+yb) is the GMT terse syntax modifier. This info is useful when one needs to consult the pure GMT documentation. On the other hand when we see pen=?(+p) the ? means that one have to give the required info. So, for example polygon=(bot=true, pen=(1, :red)) means \"close the poly-line trough ymin and outline it with a red pen with 1 point thickness\"","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"Other options end with (Common options). This means they are options common to all GMT programs and that, for the ones that are currently implemented, one can do","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    gmthelp(:b)\n    Option: b, or binary => (ncols=?(), type=?(), swapp_bytes=Any(w), little_endian=Any(+l), big_endian=?(+b), )","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"but for many we still get","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    gmthelp(:i)\n    Option: i, or incol => (Common option not yet expanded)","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"meaning we must use the terse syntax arguments in form of strings. e.g. incol=\"0,2\" to read only first and third column of input data.","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"Still other options end with [Possibly not yet expanded]. It means that sub-options have not yet received aliases so you must use either arguments in string form or in Tuple form in case the input is numeric and GMT expects numbers separated by slashes. For example (invented option) shift=(1,2) will translate to s1/2","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"The plot command is hugely vast, so a series of avatars have been derived from it. Namely, lines, specialized in plotting lines only; scater & scater3 for scatter plots; bar & bar3, for bar plots,  arrows for drawing arrows; plot3, ternary, plotyy. They all share the same argument syntax that mimics in many cases the matplotlib syntax with also many Matlab synonyms.","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"Examples","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    # A Scatter plot\n    scatter(rand(100),rand(100), markersize=rand(100), marker=:c, color=:ocean, zcolor=rand(100), figsize=15, alpha=50, Y=4, title=\"Scatter\", show=true)","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    # Colored bar plot\n    bar(rand(15), color=:rainbow, figsize=(14,8), title=\"Colored bars\", Y=3, show=true)","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    # Arrow\n    arrows([0.5 0.5 0 8], limits=(-0.1,3,0,2.5), figsize=(16,5), arrow=(len=2,stop=1,shape=0.5), pen=6, B=\"a WSrt\", title=\"Arrow\", show=true)","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    # Peaks 3D bars\n    G = GMT.peaks();    cmap = grd2cpt(G);      # Compute a colormap with the grid's data range\n    bar3(G, lw=:thinnest, color=cmap, figsize=14, Y=5, show=true)","category":"page"},{"location":"quick_learn/","page":"Quick Learn","title":"Quick Learn","text":"    # Contours\n    G = GMT.peaks();\n    grdcontour(G, color=makecpt(range=(-6,8,1)), pen=\"+c\", figsize=16, region=(-3,3,-3,3), title=\"Contours\", show=true)","category":"page"},{"location":"gallery/scripts_agu/decorated_II/#Decorated_II","page":"Decorated_II","title":"Decorated_II","text":"","category":"section"},{"location":"gallery/scripts_agu/decorated_II/","page":"Decorated_II","title":"Decorated_II","text":"Plot a text decorated line","category":"page"},{"location":"gallery/scripts_agu/decorated_II/","page":"Decorated_II","title":"Decorated_II","text":"# Create a log spiral\nt = linspace(0,2pi,100);\nx = cos.(t) .* t;       y = sin.(t) .* t;\ntxt = \" In Vino Veritas  - In Aqua, Rãs & Toads\"\nlines(x,y, region=(-4,7,-5.5,2.5), lw=2, lc=:sienna,\n      decorated=(quoted=true, const_label=txt, font=(25,\"Times-Italic\"),\n                 curved=true, pen=(0.5,:red)),\n      aspect=:equal, show=true)","category":"page"},{"location":"gallery/scripts_agu/decorated_II/","page":"Decorated_II","title":"Decorated_II","text":"<img src=\"../figs/decorated_txt.png\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"themes/#Themes","page":"Themes","title":"Themes","text":"","category":"section"},{"location":"themes/","page":"Themes","title":"Themes","text":"Currently GMT.jl offers 3 themes (classic, modern, and dark). Classic theme has been the default up to version 0.34.0. Starting in 0.35.0 the so called (by GMT) modern theme has become the default. Differences may not be obvious at first (except for the default axes line width that was decreased to half-width [0.75p]) but it holds a significant improvement in its capability to scale the size of fonts and line thicknesses in function of figure size.","category":"page"},{"location":"themes/","page":"Themes","title":"Themes","text":"A third theme is the dark mode. Besides these 3 themes the last two (modern and dark) can still be tweaked with some other parameters. Basically one can use the theme as a function or as an option in the plot (and its avatars) module.","category":"page"},{"location":"themes/","page":"Themes","title":"Themes","text":"theme(name; kwrgs...)","category":"page"},{"location":"themes/","page":"Themes","title":"Themes","text":"modern: - This is the default theme (same as GMT modern theme but with thinner FRAME_PEN [0.75p])\nclassic: - The GMT classic theme\ndrak: - A modern theme variation with dark background.","category":"page"},{"location":"themes/","page":"Themes","title":"Themes","text":"On top of the modern mode variations (so far dark only) one can set the following kwargs options:","category":"page"},{"location":"themes/","page":"Themes","title":"Themes","text":"noticks or no_ticks: Axes will have annotations but no tick marks\ninner_ticks or innerticks: - Ticks will be drawn inside the axes instead of outside.\ngray_grid or graygrid: - When drawing grid line use gray instead of black\nsave: - Save the name in the directory printed in shell by gmt –show-userdir and make it permanent.\nreset: - Remove the saved theme name and return to the default modern theme.","category":"page"},{"location":"themes/","page":"Themes","title":"Themes","text":"Note: Except save and reset, the changes operated by the kwargs are temporary and operate only until an image is show(n) or saved.","category":"page"},{"location":"themes/","page":"Themes","title":"Themes","text":"This function can be called alone, e.g. theme(\"dark\") or as an keyword option in the plot() module. e.g. plot(..., theme=:dark) or plot(..., theme=(modern, noticks=true))","category":"page"},{"location":"examples/#Examples","page":"Some examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Here's-the-\"Hello-World\"","page":"Some examples","title":"Here's the \"Hello World\"","text":"","category":"section"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"using GMT\nplot(1:10, rand(10), lw=1, lc=:blue, marker=:square,\n     markeredgecolor=0, size=0.2, markerfacecolor=:red, title=\"Hello World\",\n     xlabel=\"Spoons\", ylabel=\"Forks\", show=true)","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"<img src=\"../figures/hello-world.png\" alt=\"Hello world\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"A few notes about this example. Because we didn't specify the figure size (with the figsize keyword) a default value of 12x8 cm (not counting labels and title) was used. The show=true is needed to show the image at the end.","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"But now we want an image made up with two layers of data. And we are going to plot on the sphere (the Earth). For that we will need to use the coast program to plot the Earth and append some curvy lines.","category":"page"},{"location":"examples/#And-the-\"Hello-Round-World\"","page":"Some examples","title":"And the \"Hello Round World\"","text":"","category":"section"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"x = range(0, stop=2pi, length=180);       seno = sin.(x/0.2)*45;\ncoast(region=[0 360 -90 90], proj=(name=:laea, center=(300,30)), frame=:g,\n      res=:crude, land=:navy, figsize=6)\n\nplot!(collect(x)*60, seno, lw=0.5, lc=:red, marker=:circle,\n      markeredgecolor=0, size=0.05, markerfacecolor=:cyan, show=true)","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"In this example region=[0 360 -90 90]  means the domain is the whole Earth, frame=:g sets the grid on, resolution=:c selects the crude coast lines resolution and the  land=:navy paints the continents with a navy blue color. The map projection used here is a Lambert projection (laea stands for Lambert Azimuthal Equal Area) with projection center at 300 degrees East, 30 degrees North.","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"<img src=\"../figures/hello-round-world.png\" alt=\"Hello round world\" width=\"400\" class=\"center\"/>","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"Note that now the first command, the coast, does not have the show keyword. It means we are here creating the first layer but we don't want to see it just yet. The second command uses the ! variation of the plot function, which means that we are appending to a previous plot, and uses the show=true because we are done with this figure.","category":"page"},{"location":"examples/#Simple-contours","page":"Some examples","title":"Simple contours","text":"","category":"section"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"Contours are created with grdcontour that takes a grid as input (or a GMTgrid data type). This example shows uses the peaks function to create a classical example. Note, however, that the memory consumption in this example, when creating the plot, is much lower than traditional likewise  examples because we will be using only one 2D array instead of 3 3D arrays (ref). In the example cont=1 and annot=2 means draw contours at every 1 unit of the G grid and annotate at every other contour line. axes=\"a\" means pick a default automatic annotation and labeling for the axes.","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"G = GMT.peaks();\ngrdcontour(G, cont=1, annot=2, show=true)","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"<img src=\"../figures/hello-bw-contour.png\" alt=\"Simple black&white contour\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"Now with colored contours. To make it colored we need to generate a color map and use it. Notice that we must specify a pen attribute to get the colored contours because pen specifications are always set separately. Here we will create first a colormap with makecpt that will from -6 to 8 with steps of 1. These values are picked up after the z values of the G grid. ","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"cpt = makecpt(range=(-6,8,1));      # Create the color map\ngrdcontour(G, pen=(colored=true,), show=true)","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"<img src=\"../figures/hello-color-contour.png\" alt=\"Simple color contour\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"examples/#Color-images","page":"Some examples","title":"Color images","text":"","category":"section"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"Color images are made with grdimage which takes the usual common options and a color map. It operates over grids or images. The next example shows how to create a color appropriate for the grid's z range, plot the image and add a color scale. We use here the data keyword to tell the program to load the grid from a file. The  before the tut_relief.nc file name instructs GMT to download the file from its server on the first usage and save it in a cache dir. See the GMT tuturial for more details about what the arguments mean.","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"topo = makecpt(color=:rainbow, range=(1000,5000,500), continuous=true);\ngrdimage(\"@tut_relief.nc\", shade=(azimuth=100, norm=\"e0.8\"), proj=:Mercator, frame=:a, color=topo)\ncolorbar!(pos=(anchor=:TC,length=(12.5,0.6), horizontal=true, offset=(0,1.0)),\n          color=topo, frame=(ylabel=:m,), fmt=:jpg, show=true)","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"<img src=\"../figures/hello-shaded-world.jpg\" alt=\"Hello shaded world\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"examples/#Perspective-view","page":"Some examples","title":"Perspective view","text":"","category":"section"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"We will make a perspective, color-coded view of the US Rockies from the southeast.","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"topo = makecpt(color=:rainbow, range=(1000,5000,500), continuous=true);\ngrdview(\"@tut_relief.nc\", proj=:Mercator, zsize=1, shade=(azim=100, norm=\"e0.8\"), view=(135,30),\n        frame=:a, fmt=:jpg, Q=\"i100\", show=true)","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"<img src=\"../figures/hello-view-world.jpg\" alt=\"Hello 3D view world\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"Above we used the Peaks function to create a contour plot. Let us use that grid again and display it this time as 3D bar plot in a perspective view. ","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"cmap = grd2cpt(G);      # Compute a colormap with the grid's data range\nbar3(G, lw=:thinnest, color=cmap, show=true)","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"<img src=\"../figures/bar3-peaks.png\" alt=\"Hello bar3D\" width=\"500\" class=\"center\"/>","category":"page"},{"location":"examples/#Warp-image-in-geographical-projection","page":"Some examples","title":"Warp image in geographical projection","text":"","category":"section"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"In this example we will load a network image (GDAL will do that for us) and make a creative world map. First command, the imshow, needs to set show=false to no display the image before it is complete. We have to do this because imshow is a one command only shot and so, by default, it has the show keyword hardwire to true.","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"imshow(\"http://larryfire.files.wordpress.com/2009/07/untooned_jessicarabbit.jpg\",\n      frame=:g, region=:d, proj=:Sinusoidal, image_in=:r, show=false)\ncoast!(shore=(1,:white), resolution=:c, figsize=15, show=true)","category":"page"},{"location":"examples/","page":"Some examples","title":"Some examples","text":"<img src=\"http://w3.ualg.pt/~jluis/jessy_.png\" alt=\"SinuJessica\" width=\"600\" class=\"center\"/>","category":"page"},{"location":"gallery/historic/ex29/#Gridding-spherical-surface-data-using-splines","page":"Gridding spherical surface data using splines","title":"Gridding spherical surface data using splines","text":"","category":"section"},{"location":"gallery/historic/ex29/","page":"Gridding spherical surface data using splines","title":"Gridding spherical surface data using splines","text":"    # Make Mars PROJ_ELLIPSOID given their three best-fitting axes:\n    a = 3399.472;\tb = 3394.329;\tc = 3376.502;\n    Gproj_ellipsoid = gmt(\"grdmath -Rg -I4 -r X COSD \" * \"$a\" * \" DIV DUP MUL X SIND \" * \"$b\" * \n        \" DIV DUP MUL ADD Y COSD DUP MUL MUL Y SIND \" * \"$c\" * \" DIV DUP MUL ADD SQRT INV =\")\n    #  Do both Parker and Wessel/Becker solutions (tension = 0.9975)\n    Gmars  = greenspline(\"@mars370.txt\", region=:global360, inc=4, reg=true,\n                         grid=true, mode=4, splines=:p)\n    Gmars2 = gmt(\"greenspline -R? @mars370.txt -D4 -Sq0.9975 -G\", Gproj_ellipsoid);\n    # Scale to km and remove PROJ_ELLIPSOID\n    Gmars  = Gmars  / 1000 - Gproj_ellipsoid\n    Gmars2 = Gmars2 / 1000 - Gproj_ellipsoid\n    mars_cpt = makecpt(cmap=:rainbow, range=(-7,15));\n\n    grdimage(Gmars2, region=:global360, shade=(azim=45, norm=\"e0.75\"),\n             frame=(axes=:Wsne, annot=30, grid=30), proj=(name=:Hammer, center=0),\n             figsize=18, dpi=200, x_off=2)\n    grdcontour!(Gmars2, cont=1, annot=5, labels=(line=\"z+/z-\",))\n    plot!(\"@mars370.txt\", marker=:circle, ms=0.1, fill=:black)\n    text!(text_record([0 90], \"b)\"), noclip=true, offset=(-9, -0.5),\n          font=(14,\"Helvetica-Bold\"), justify=:LB)\n\n    grdimage!(Gmars, frame=:same, shade=(azim=45, norm=\"e0.75\"), y_off=11, dpi=200)\n    grdcontour!(Gmars, cont=1, annot=5, labels=(line=\"z+/z-\",))\n    plot!(\"@mars370.txt\", marker=:circle, ms=0.1, fill=:black )\n    colorbar!(pos=(anchor=:BC, offset=(0,0.4), length=(12, 0.25), horizontal=true),\n              shade=true, frame=(annot=2, ticks=1), ylabel=:km)\n    text!(text_record([0 90], \"a)\"), noclip=true, offset=(-9, -0.5),\n          font=(14,\"Helvetica-Bold\"), justify=:LB, show=true)","category":"page"},{"location":"gallery/historic/ex29/","page":"Gridding spherical surface data using splines","title":"Gridding spherical surface data using splines","text":"See also GMT ex29","category":"page"},{"location":"gallery/historic/ex46/#Day-light-terminators-and-other-sunlight-parameters","page":"Day-light terminators and other sunlight parameters","title":"Day-light terminators and other sunlight parameters","text":"","category":"section"},{"location":"gallery/historic/ex46/","page":"Day-light terminators and other sunlight parameters","title":"Day-light terminators and other sunlight parameters","text":"    coast(limits=:global, frame=(annot=:a,ticks=:a,grid=:a), proj=:EckertVI,\n          area=5000, shore=0.5, borders=(type=1, pen=(0.5,:gray)),\n          water=[175 210 255], par=(:MAP_FRAME_TYPE, :plain), figsize=16)\n    solar!(terminators=(term=:d, date=\"2016-02-09T16:00:00\"), fill=\"navy@95\")\n    solar!(terminators=(term=:c, date=\"2016-02-09T16:00:00\"), fill=\"navy@85\")\n    solar!(terminators=(term=:n, date=\"2016-02-09T16:00:00\"), fill=\"navy@80\")\n    solar!(terminators=(term=:a, date=\"2016-02-09T16:00:00\"), fill=\"navy@80\")\n    # Get Sun position at at that date and time an plot it.\n    t = solar(sun=(date=\"2016-02-09T16:00:00\",), formated=true)\n    plot!(t, symbol=\"k@sunglasses/1.5\", fill=:yellow, show=true)","category":"page"},{"location":"gallery/historic/ex46/","page":"Day-light terminators and other sunlight parameters","title":"Day-light terminators and other sunlight parameters","text":"See also GMT ex46","category":"page"},{"location":"gallery/historic/ex10/#A-geographical-bar-graph-plot","page":"A geographical bar graph plot","title":"A geographical bar graph plot","text":"","category":"section"},{"location":"gallery/historic/ex10/","page":"A geographical bar graph plot","title":"A geographical bar graph plot","text":"coast(region=:global, shore=:faint, land=:wheat, ocean=:azure2, area=5000,\n      frame=:none, portrait=false, view=(200,40), figsize=20,\n      proj=(name=:PlateCarree, center=(0,37.5)))\nD = gmtread(\"@languages_10.txt\", table=true)\ntmp = [D[1].data[:,1:2] sum(D[1].data[:, 3:end], dims=2)]\ntext!(tmp, attrib=(font=(30,\"Helvetica-Bold\",\"firebrick=thinner\"), justify=:RM),\n      fill=\"white@30\", offset=(-0.6,0))\ncpt = makecpt(color=(:purple, :blue, :darkgreen, :yellow, :red), range=\"0,1,2,3,4,5\")\nbar3!(D, region=(-180,180,-90,90,0,2500), color=cpt, bar=(width=0.8, Nbands=5),\n      frame=(axes=:WSneZ, annot=:auto, ticks=:auto, title=\"World Languages By Continent\"),\n      zaxis=(annot=500, label=:Languages), G=:purple, W=:thinner, zsize=8,\n      par=(FONT_TITLE=\"30p,Times-Bold\", MAP_TITLE_OFFSET=-1.8, FORMAT_GEO_MAP=:dddF))\nlegend!(\"@legend_10.txt\", JZ=true, pos=(anchor=:LB, width=3.5, justify=:LB, offset=0.5),\n        par=(:FONT,\"Helvetica-Bold\"),\n        box=(fill=:lightgrey, pen=:thinner, shaded=\"-4p/-6p/grey20@40\"), show=true)","category":"page"},{"location":"gallery/historic/ex10/","page":"A geographical bar graph plot","title":"A geographical bar graph plot","text":"See also GMT ex10","category":"page"}]
}
